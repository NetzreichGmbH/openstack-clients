"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenStack Network API
 * Network API provided by Neutron service
 *
 * The version of the OpenAPI document: 2.25
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubnetsCreateResponseSubnetIpVersionEnum = exports.SubnetsCreateRequestSubnetIpv6AddressModeEnum = exports.SubnetsCreateRequestSubnetIpv6RaModeEnum = exports.SubnetsCreateRequestSubnetIpVersionEnum = exports.SecurityGroupRulesCreateResponseSecurityGroupRuleEthertypeEnum = exports.SecurityGroupRulesCreateResponseSecurityGroupRuleDirectionEnum = exports.SecurityGroupRulesCreateRequestSecurityGroupRuleEthertypeEnum = exports.SecurityGroupRulesCreateRequestSecurityGroupRuleDirectionEnum = exports.RoutersConntrackHelpersCreateResponseConntrackHelperProtocolEnum = exports.RoutersConntrackHelpersCreateRequestConntrackHelperProtocolEnum = exports.RoutersConntrackHelperUpdateRequestConntrackHelperProtocolEnum = exports.QosPoliciesMinimumPacketRateRulesCreateResponseMinimumPacketRateRuleDirectionEnum = exports.QosPoliciesMinimumPacketRateRulesCreateRequestMinimumPacketRateRuleDirectionEnum = exports.QosPoliciesMinimumBandwidthRulesCreateResponseMinimumBandwidthRuleDirectionEnum = exports.QosPoliciesMinimumBandwidthRulesCreateRequestMinimumBandwidthRuleDirectionEnum = exports.QosPoliciesDscpMarkingRulesCreateResponseDscpMarkingRuleDscpMarkEnum = exports.QosPoliciesDscpMarkingRulesCreateRequestDscpMarkingRuleDscpMarkEnum = exports.QosPoliciesBandwidthLimitRulesCreateResponseBandwidthLimitRuleDirectionEnum = exports.QosPoliciesBandwidthLimitRulesCreateRequestBandwidthLimitRuleDirectionEnum = exports.QosAliasMinimumBandwidthRulesCreateResponseAliasMinimumBandwidthRuleDirectionEnum = exports.QosAliasDscpMarkingRulesCreateResponseAliasDscpMarkingRuleDscpMarkEnum = exports.QosAliasBandwidthLimitRulesCreateResponseAliasBandwidthLimitRuleDirectionEnum = exports.PortsCreateResponsePortBindingvnicTypeEnum = exports.PortsCreateResponsePortNumaAffinityPolicyEnum = exports.PortsCreateResponsePortDataPlaneStatusEnum = exports.PortsCreateRequestPortBindingvnicTypeEnum = exports.PortsCreateRequestPortNumaAffinityPolicyEnum = exports.PortsBindingsCreateResponseBindingVnicTypeEnum = exports.PortsBindingsCreateRequestBindingVnicTypeEnum = exports.PortsBindingUpdateRequestBindingVnicTypeEnum = exports.PortUpdateRequestPortBindingvnicTypeEnum = exports.PortUpdateRequestPortNumaAffinityPolicyEnum = exports.PortUpdateRequestPortDataPlaneStatusEnum = exports.PoliciesPacketRateLimitRulesCreateResponsePacketRateLimitRuleDirectionEnum = exports.PoliciesPacketRateLimitRulesCreateRequestPacketRateLimitRuleDirectionEnum = exports.NetworkSegmentRangesCreateResponseNetworkSegmentRangeNetworkTypeEnum = exports.NetworkSegmentRangesCreateRequestNetworkSegmentRangeNetworkTypeEnum = exports.MeteringMeteringLabelRulesCreateResponseMeteringLabelRuleDirectionEnum = exports.MeteringMeteringLabelRulesCreateRequestMeteringLabelRuleDirectionEnum = exports.LogLogsCreateResponseLogEventEnum = exports.LogLogsCreateRequestLogEventEnum = exports.LocalIpsCreateResponseLocalIpIpModeEnum = exports.LocalIpsCreateRequestLocalIpIpModeEnum = exports.FloatingipsPortForwardingsCreateResponsePortForwardingProtocolEnum = exports.FloatingipsPortForwardingsCreateRequestPortForwardingProtocolEnum = exports.FloatingipsPortForwardingUpdateRequestPortForwardingProtocolEnum = exports.DefaultSecurityGroupRulesCreateResponseDefaultSecurityGroupRuleEthertypeEnum = exports.DefaultSecurityGroupRulesCreateResponseDefaultSecurityGroupRuleDirectionEnum = exports.DefaultSecurityGroupRulesCreateRequestDefaultSecurityGroupRuleEthertypeEnum = exports.DefaultSecurityGroupRulesCreateRequestDefaultSecurityGroupRuleDirectionEnum = void 0;
exports.FloatingipPoolsApi = exports.FloatingipPoolsApiFactory = exports.FloatingipPoolsApiFp = exports.FloatingipPoolsApiAxiosParamCreator = exports.FlavorsGetSortDirEnum = exports.FlavorsFlavorIdServiceProfilesGetSortDirEnum = exports.FlavorsFlavorIdNextProvidersGetSortDirEnum = exports.FlavorsApi = exports.FlavorsApiFactory = exports.FlavorsApiFp = exports.FlavorsApiAxiosParamCreator = exports.ExtensionsApi = exports.ExtensionsApiFactory = exports.ExtensionsApiFp = exports.ExtensionsApiAxiosParamCreator = exports.AgentsAgentIdDhcpNetworksGetSortDirEnum = exports.DhcpAgentSchedulerApi = exports.DhcpAgentSchedulerApiFactory = exports.DhcpAgentSchedulerApiFp = exports.DhcpAgentSchedulerApiAxiosParamCreator = exports.DefaultSecurityGroupRulesGetSortDirEnum = exports.DefaultSecurityGroupRulesGetEthertypeEnum = exports.DefaultSecurityGroupRulesGetDirectionEnum = exports.DefaultSecurityGroupRulesApi = exports.DefaultSecurityGroupRulesApiFactory = exports.DefaultSecurityGroupRulesApiFp = exports.DefaultSecurityGroupRulesApiAxiosParamCreator = exports.AvailabilityZonesGetSortDirEnum = exports.AvailabilityZonesApi = exports.AvailabilityZonesApiFactory = exports.AvailabilityZonesApiFp = exports.AvailabilityZonesApiAxiosParamCreator = exports.AutoAllocatedTopologyGetSortDirEnum = exports.AutoAllocatedTopologyApi = exports.AutoAllocatedTopologyApiFactory = exports.AutoAllocatedTopologyApiFp = exports.AutoAllocatedTopologyApiAxiosParamCreator = exports.AddressScopesGetSortDirEnum = exports.AddressScopesGetIpVersionEnum = exports.AddressScopesApi = exports.AddressScopesApiFactory = exports.AddressScopesApiFp = exports.AddressScopesApiAxiosParamCreator = exports.AddressGroupsGetSortDirEnum = exports.AddressGroupsApi = exports.AddressGroupsApiFactory = exports.AddressGroupsApiFp = exports.AddressGroupsApiAxiosParamCreator = exports.SubnetsCreateResponseSubnetIpv6AddressModeEnum = exports.SubnetsCreateResponseSubnetIpv6RaModeEnum = void 0;
exports.NetworkSegmentRangesApiAxiosParamCreator = exports.NetworkIpAvailabilitiesGetSortDirEnum = exports.NetworkIpAvailabilitiesApi = exports.NetworkIpAvailabilitiesApiFactory = exports.NetworkIpAvailabilitiesApiFp = exports.NetworkIpAvailabilitiesApiAxiosParamCreator = exports.NdpProxiesGetSortDirEnum = exports.NdpProxiesApi = exports.NdpProxiesApiFactory = exports.NdpProxiesApiFp = exports.NdpProxiesApiAxiosParamCreator = exports.MeteringMeteringLabelsGetSortDirEnum = exports.MeteringMeteringLabelRulesGetSortDirEnum = exports.MeteringMeteringLabelRulesGetDirectionEnum = exports.MeteringApi = exports.MeteringApiFactory = exports.MeteringApiFp = exports.MeteringApiAxiosParamCreator = exports.LogLogsGetSortDirEnum = exports.LogLogsGetEventEnum = exports.LogLoggableResourcesGetSortDirEnum = exports.LogApi = exports.LogApiFactory = exports.LogApiFp = exports.LogApiAxiosParamCreator = exports.LocalIpsLocalIpIdPortAssociationsGetSortDirEnum = exports.LocalIpsGetSortDirEnum = exports.LocalIpsGetIpModeEnum = exports.LocalIpsApi = exports.LocalIpsApiFactory = exports.LocalIpsApiFp = exports.LocalIpsApiAxiosParamCreator = exports.AgentsAgentIdL3RoutersGetSortDirEnum = exports.L3AgentSchedulerApi = exports.L3AgentSchedulerApiFactory = exports.L3AgentSchedulerApiFp = exports.L3AgentSchedulerApiAxiosParamCreator = exports.FloatingipsPortForwardingsApi = exports.FloatingipsPortForwardingsApiFactory = exports.FloatingipsPortForwardingsApiFp = exports.FloatingipsPortForwardingsApiAxiosParamCreator = exports.FloatingipsGetSortDirEnum = exports.FloatingipsFloatingipIdTagsGetSortDirEnum = exports.FloatingipsFloatingipIdPortForwardingsGetSortDirEnum = exports.FloatingipsFloatingipIdPortForwardingsGetProtocolEnum = exports.FloatingipsApi = exports.FloatingipsApiFactory = exports.FloatingipsApiFp = exports.FloatingipsApiAxiosParamCreator = exports.FloatingipPoolsGetSortDirEnum = void 0;
exports.QosPoliciesGetSortDirEnum = exports.QosAliasMinimumPacketRateRulesGetSortDirEnum = exports.QosAliasMinimumPacketRateRulesGetDirectionEnum = exports.QosAliasMinimumBandwidthRulesGetSortDirEnum = exports.QosAliasMinimumBandwidthRulesGetDirectionEnum = exports.QosAliasDscpMarkingRulesGetSortDirEnum = exports.QosAliasDscpMarkingRulesGetDscpMarkEnum = exports.QosAliasBandwidthLimitRulesGetSortDirEnum = exports.QosAliasBandwidthLimitRulesGetDirectionEnum = exports.QosApi = exports.QosApiFactory = exports.QosApiFp = exports.QosApiAxiosParamCreator = exports.PortsPortIdTagsGetSortDirEnum = exports.PortsGetSortDirEnum = exports.PortsApi = exports.PortsApiFactory = exports.PortsApiFp = exports.PortsApiAxiosParamCreator = exports.PortsPortIdBindingsGetSortDirEnum = exports.PortsPortIdBindingsGetVnicTypeEnum = exports.PortBindingsApi = exports.PortBindingsApiFactory = exports.PortBindingsApiFp = exports.PortBindingsApiAxiosParamCreator = exports.PoliciesPolicyIdTagsGetSortDirEnum = exports.PoliciesPolicyIdPacketRateLimitRulesGetSortDirEnum = exports.PoliciesPolicyIdPacketRateLimitRulesGetDirectionEnum = exports.PoliciesApi = exports.PoliciesApiFactory = exports.PoliciesApiFp = exports.PoliciesApiAxiosParamCreator = exports.NetworksNetworkIdTagsGetSortDirEnum = exports.NetworksNetworkIdDhcpAgentsGetSortDirEnum = exports.NetworksGetSortDirEnum = exports.NetworksApi = exports.NetworksApiFactory = exports.NetworksApiFp = exports.NetworksApiAxiosParamCreator = exports.AgentsGetSortDirEnum = exports.NetworkingAgentsApi = exports.NetworkingAgentsApiFactory = exports.NetworkingAgentsApiFp = exports.NetworkingAgentsApiAxiosParamCreator = exports.NetworkSegmentRangesNetworkSegmentRangeIdTagsGetSortDirEnum = exports.NetworkSegmentRangesGetSortDirEnum = exports.NetworkSegmentRangesGetNetworkTypeEnum = exports.NetworkSegmentRangesApi = exports.NetworkSegmentRangesApiFactory = exports.NetworkSegmentRangesApiFp = void 0;
exports.ServiceProfilesApiAxiosParamCreator = exports.SegmentsGetSortDirEnum = exports.SegmentsApi = exports.SegmentsApiFactory = exports.SegmentsApiFp = exports.SegmentsApiAxiosParamCreator = exports.SecurityGroupsSecurityGroupIdTagsGetSortDirEnum = exports.SecurityGroupsGetSortDirEnum = exports.SecurityGroupsApi = exports.SecurityGroupsApiFactory = exports.SecurityGroupsApiFp = exports.SecurityGroupsApiAxiosParamCreator = exports.SecurityGroupRulesGetSortDirEnum = exports.SecurityGroupRulesGetEthertypeEnum = exports.SecurityGroupRulesGetDirectionEnum = exports.SecurityGroupRulesApi = exports.SecurityGroupRulesApiFactory = exports.SecurityGroupRulesApiFp = exports.SecurityGroupRulesApiAxiosParamCreator = exports.RoutersRouterIdConntrackHelpersGetSortDirEnum = exports.RoutersRouterIdConntrackHelpersGetProtocolEnum = exports.RoutersConntrackHelperApi = exports.RoutersConntrackHelperApiFactory = exports.RoutersConntrackHelperApiFp = exports.RoutersConntrackHelperApiAxiosParamCreator = exports.RoutersRouterIdTagsGetSortDirEnum = exports.RoutersRouterIdL3AgentsGetSortDirEnum = exports.RoutersGetSortDirEnum = exports.RoutersApi = exports.RoutersApiFactory = exports.RoutersApiFp = exports.RoutersApiAxiosParamCreator = exports.RbacPoliciesGetSortDirEnum = exports.RbacPoliciesApi = exports.RbacPoliciesApiFactory = exports.RbacPoliciesApiFp = exports.RbacPoliciesApiAxiosParamCreator = exports.QuotasGetSortDirEnum = exports.QuotasApi = exports.QuotasApiFactory = exports.QuotasApiFp = exports.QuotasApiAxiosParamCreator = exports.QosRuleTypesGetSortDirEnum = exports.QosPoliciesPolicyIdMinimumPacketRateRulesGetSortDirEnum = exports.QosPoliciesPolicyIdMinimumPacketRateRulesGetDirectionEnum = exports.QosPoliciesPolicyIdMinimumBandwidthRulesGetSortDirEnum = exports.QosPoliciesPolicyIdMinimumBandwidthRulesGetDirectionEnum = exports.QosPoliciesPolicyIdDscpMarkingRulesGetSortDirEnum = exports.QosPoliciesPolicyIdDscpMarkingRulesGetDscpMarkEnum = exports.QosPoliciesPolicyIdBandwidthLimitRulesGetSortDirEnum = void 0;
exports.TrunksTrunkIdTagsGetSortDirEnum = exports.TrunksApi = exports.TrunksApiFactory = exports.TrunksApiFp = exports.TrunksApiAxiosParamCreator = exports.SubnetsSubnetIdTagsGetSortDirEnum = exports.SubnetsGetSortDirEnum = exports.SubnetsGetIpv6AddressModeEnum = exports.SubnetsGetIpv6RaModeEnum = exports.SubnetsGetIpVersionEnum = exports.SubnetsApi = exports.SubnetsApiFactory = exports.SubnetsApiFp = exports.SubnetsApiAxiosParamCreator = exports.SubnetpoolsSubnetpoolIdTagsGetSortDirEnum = exports.SubnetpoolsGetSortDirEnum = exports.SubnetpoolsApi = exports.SubnetpoolsApiFactory = exports.SubnetpoolsApiFp = exports.SubnetpoolsApiAxiosParamCreator = exports.ServiceProvidersGetSortDirEnum = exports.ServiceProvidersApi = exports.ServiceProvidersApiFactory = exports.ServiceProvidersApiFp = exports.ServiceProvidersApiAxiosParamCreator = exports.ServiceProfilesGetSortDirEnum = exports.ServiceProfilesApi = exports.ServiceProfilesApiFactory = exports.ServiceProfilesApiFp = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.DefaultSecurityGroupRulesCreateRequestDefaultSecurityGroupRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.DefaultSecurityGroupRulesCreateRequestDefaultSecurityGroupRuleEthertypeEnum = {
    Ipv4: 'IPv4',
    Ipv6: 'IPv6'
};
exports.DefaultSecurityGroupRulesCreateResponseDefaultSecurityGroupRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.DefaultSecurityGroupRulesCreateResponseDefaultSecurityGroupRuleEthertypeEnum = {
    Ipv4: 'IPv4',
    Ipv6: 'IPv6'
};
exports.FloatingipsPortForwardingUpdateRequestPortForwardingProtocolEnum = {
    Dccp: 'dccp',
    Icmp: 'icmp',
    Ipv6Icmp: 'ipv6-icmp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp'
};
exports.FloatingipsPortForwardingsCreateRequestPortForwardingProtocolEnum = {
    Dccp: 'dccp',
    Icmp: 'icmp',
    Ipv6Icmp: 'ipv6-icmp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp'
};
exports.FloatingipsPortForwardingsCreateResponsePortForwardingProtocolEnum = {
    Dccp: 'dccp',
    Icmp: 'icmp',
    Ipv6Icmp: 'ipv6-icmp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp'
};
exports.LocalIpsCreateRequestLocalIpIpModeEnum = {
    Translate: 'translate',
    Passthrough: 'passthrough'
};
exports.LocalIpsCreateResponseLocalIpIpModeEnum = {
    Translate: 'translate',
    Passthrough: 'passthrough'
};
exports.LogLogsCreateRequestLogEventEnum = {
    Accept: 'ACCEPT',
    Drop: 'DROP',
    All: 'ALL'
};
exports.LogLogsCreateResponseLogEventEnum = {
    Accept: 'ACCEPT',
    Drop: 'DROP',
    All: 'ALL'
};
exports.MeteringMeteringLabelRulesCreateRequestMeteringLabelRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.MeteringMeteringLabelRulesCreateResponseMeteringLabelRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.NetworkSegmentRangesCreateRequestNetworkSegmentRangeNetworkTypeEnum = {
    Vlan: 'vlan',
    Vxlan: 'vxlan',
    Gre: 'gre',
    Geneve: 'geneve'
};
exports.NetworkSegmentRangesCreateResponseNetworkSegmentRangeNetworkTypeEnum = {
    Vlan: 'vlan',
    Vxlan: 'vxlan',
    Gre: 'gre',
    Geneve: 'geneve'
};
exports.PoliciesPacketRateLimitRulesCreateRequestPacketRateLimitRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.PoliciesPacketRateLimitRulesCreateResponsePacketRateLimitRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.PortUpdateRequestPortDataPlaneStatusEnum = {
    Null: 'null',
    Active: 'ACTIVE',
    Down: 'DOWN'
};
exports.PortUpdateRequestPortNumaAffinityPolicyEnum = {
    Required: 'required',
    Preferred: 'preferred',
    Legacy: 'legacy',
    Socket: 'socket',
    Null: 'null'
};
exports.PortUpdateRequestPortBindingvnicTypeEnum = {
    Normal: 'normal',
    Direct: 'direct',
    Macvtap: 'macvtap',
    Baremetal: 'baremetal',
    DirectPhysical: 'direct-physical',
    VirtioForwarder: 'virtio-forwarder',
    SmartNic: 'smart-nic',
    Vdpa: 'vdpa',
    AcceleratorDirect: 'accelerator-direct',
    AcceleratorDirectPhysical: 'accelerator-direct-physical',
    RemoteManaged: 'remote-managed'
};
exports.PortsBindingUpdateRequestBindingVnicTypeEnum = {
    Normal: 'normal',
    Direct: 'direct',
    Macvtap: 'macvtap',
    Baremetal: 'baremetal',
    DirectPhysical: 'direct-physical',
    VirtioForwarder: 'virtio-forwarder',
    SmartNic: 'smart-nic',
    Vdpa: 'vdpa',
    AcceleratorDirect: 'accelerator-direct',
    AcceleratorDirectPhysical: 'accelerator-direct-physical',
    RemoteManaged: 'remote-managed'
};
exports.PortsBindingsCreateRequestBindingVnicTypeEnum = {
    Normal: 'normal',
    Direct: 'direct',
    Macvtap: 'macvtap',
    Baremetal: 'baremetal',
    DirectPhysical: 'direct-physical',
    VirtioForwarder: 'virtio-forwarder',
    SmartNic: 'smart-nic',
    Vdpa: 'vdpa',
    AcceleratorDirect: 'accelerator-direct',
    AcceleratorDirectPhysical: 'accelerator-direct-physical',
    RemoteManaged: 'remote-managed'
};
exports.PortsBindingsCreateResponseBindingVnicTypeEnum = {
    Normal: 'normal',
    Direct: 'direct',
    Macvtap: 'macvtap',
    Baremetal: 'baremetal',
    DirectPhysical: 'direct-physical',
    VirtioForwarder: 'virtio-forwarder',
    SmartNic: 'smart-nic',
    Vdpa: 'vdpa',
    AcceleratorDirect: 'accelerator-direct',
    AcceleratorDirectPhysical: 'accelerator-direct-physical',
    RemoteManaged: 'remote-managed'
};
exports.PortsCreateRequestPortNumaAffinityPolicyEnum = {
    Required: 'required',
    Preferred: 'preferred',
    Legacy: 'legacy',
    Socket: 'socket',
    Null: 'null'
};
exports.PortsCreateRequestPortBindingvnicTypeEnum = {
    Normal: 'normal',
    Direct: 'direct',
    Macvtap: 'macvtap',
    Baremetal: 'baremetal',
    DirectPhysical: 'direct-physical',
    VirtioForwarder: 'virtio-forwarder',
    SmartNic: 'smart-nic',
    Vdpa: 'vdpa',
    AcceleratorDirect: 'accelerator-direct',
    AcceleratorDirectPhysical: 'accelerator-direct-physical',
    RemoteManaged: 'remote-managed'
};
exports.PortsCreateResponsePortDataPlaneStatusEnum = {
    Null: 'null',
    Active: 'ACTIVE',
    Down: 'DOWN'
};
exports.PortsCreateResponsePortNumaAffinityPolicyEnum = {
    Required: 'required',
    Preferred: 'preferred',
    Legacy: 'legacy',
    Socket: 'socket',
    Null: 'null'
};
exports.PortsCreateResponsePortBindingvnicTypeEnum = {
    Normal: 'normal',
    Direct: 'direct',
    Macvtap: 'macvtap',
    Baremetal: 'baremetal',
    DirectPhysical: 'direct-physical',
    VirtioForwarder: 'virtio-forwarder',
    SmartNic: 'smart-nic',
    Vdpa: 'vdpa',
    AcceleratorDirect: 'accelerator-direct',
    AcceleratorDirectPhysical: 'accelerator-direct-physical',
    RemoteManaged: 'remote-managed'
};
exports.QosAliasBandwidthLimitRulesCreateResponseAliasBandwidthLimitRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.QosAliasDscpMarkingRulesCreateResponseAliasDscpMarkingRuleDscpMarkEnum = {
    _0: '0',
    _8: '8',
    _10: '10',
    _12: '12',
    _14: '14',
    _16: '16',
    _18: '18',
    _20: '20',
    _22: '22',
    _24: '24',
    _26: '26',
    _28: '28',
    _30: '30',
    _32: '32',
    _34: '34',
    _36: '36',
    _38: '38',
    _40: '40',
    _44: '44',
    _46: '46',
    _48: '48',
    _56: '56'
};
exports.QosAliasMinimumBandwidthRulesCreateResponseAliasMinimumBandwidthRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.QosPoliciesBandwidthLimitRulesCreateRequestBandwidthLimitRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.QosPoliciesBandwidthLimitRulesCreateResponseBandwidthLimitRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.QosPoliciesDscpMarkingRulesCreateRequestDscpMarkingRuleDscpMarkEnum = {
    _0: '0',
    _8: '8',
    _10: '10',
    _12: '12',
    _14: '14',
    _16: '16',
    _18: '18',
    _20: '20',
    _22: '22',
    _24: '24',
    _26: '26',
    _28: '28',
    _30: '30',
    _32: '32',
    _34: '34',
    _36: '36',
    _38: '38',
    _40: '40',
    _44: '44',
    _46: '46',
    _48: '48',
    _56: '56'
};
exports.QosPoliciesDscpMarkingRulesCreateResponseDscpMarkingRuleDscpMarkEnum = {
    _0: '0',
    _8: '8',
    _10: '10',
    _12: '12',
    _14: '14',
    _16: '16',
    _18: '18',
    _20: '20',
    _22: '22',
    _24: '24',
    _26: '26',
    _28: '28',
    _30: '30',
    _32: '32',
    _34: '34',
    _36: '36',
    _38: '38',
    _40: '40',
    _44: '44',
    _46: '46',
    _48: '48',
    _56: '56'
};
exports.QosPoliciesMinimumBandwidthRulesCreateRequestMinimumBandwidthRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.QosPoliciesMinimumBandwidthRulesCreateResponseMinimumBandwidthRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.QosPoliciesMinimumPacketRateRulesCreateRequestMinimumPacketRateRuleDirectionEnum = {
    Any: 'any',
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.QosPoliciesMinimumPacketRateRulesCreateResponseMinimumPacketRateRuleDirectionEnum = {
    Any: 'any',
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.RoutersConntrackHelperUpdateRequestConntrackHelperProtocolEnum = {
    Dccp: 'dccp',
    Icmp: 'icmp',
    Ipv6Icmp: 'ipv6-icmp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp'
};
exports.RoutersConntrackHelpersCreateRequestConntrackHelperProtocolEnum = {
    Dccp: 'dccp',
    Icmp: 'icmp',
    Ipv6Icmp: 'ipv6-icmp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp'
};
exports.RoutersConntrackHelpersCreateResponseConntrackHelperProtocolEnum = {
    Dccp: 'dccp',
    Icmp: 'icmp',
    Ipv6Icmp: 'ipv6-icmp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp'
};
exports.SecurityGroupRulesCreateRequestSecurityGroupRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.SecurityGroupRulesCreateRequestSecurityGroupRuleEthertypeEnum = {
    Ipv4: 'IPv4',
    Ipv6: 'IPv6'
};
exports.SecurityGroupRulesCreateResponseSecurityGroupRuleDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
exports.SecurityGroupRulesCreateResponseSecurityGroupRuleEthertypeEnum = {
    Ipv4: 'IPv4',
    Ipv6: 'IPv6'
};
exports.SubnetsCreateRequestSubnetIpVersionEnum = {
    _4: '4',
    _6: '6'
};
exports.SubnetsCreateRequestSubnetIpv6RaModeEnum = {
    Dhcpv6Stateful: 'dhcpv6-stateful',
    Dhcpv6Stateless: 'dhcpv6-stateless',
    Slaac: 'slaac'
};
exports.SubnetsCreateRequestSubnetIpv6AddressModeEnum = {
    Dhcpv6Stateful: 'dhcpv6-stateful',
    Dhcpv6Stateless: 'dhcpv6-stateless',
    Slaac: 'slaac'
};
exports.SubnetsCreateResponseSubnetIpVersionEnum = {
    _4: '4',
    _6: '6'
};
exports.SubnetsCreateResponseSubnetIpv6RaModeEnum = {
    Dhcpv6Stateful: 'dhcpv6-stateful',
    Dhcpv6Stateless: 'dhcpv6-stateless',
    Slaac: 'slaac'
};
exports.SubnetsCreateResponseSubnetIpv6AddressModeEnum = {
    Dhcpv6Stateful: 'dhcpv6-stateful',
    Dhcpv6Stateless: 'dhcpv6-stateless',
    Slaac: 'slaac'
};
/**
 * AddressGroupsApi - axios parameter creator
 * @export
 */
var AddressGroupsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/address-groups API
         * @param {string} [name] name query parameter for /v2.0/address-groups API
         * @param {string} [description] description query parameter for /v2.0/address-groups API
         * @param {string} [projectId] project_id query parameter for /v2.0/address-groups API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AddressGroupsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsGet: function (id_1, name_1, description_1, projectId_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, description_1, projectId_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, description, projectId, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/address-groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (projectId !== undefined) {
                                localVarQueryParameter['project_id'] = projectId;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupsAddAddressesAddAddressesRequest} [addressGroupsAddAddressesAddAddressesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdAddAddressesPut: function (id_1, addressGroupsAddAddressesAddAddressesRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, addressGroupsAddAddressesAddAddressesRequest_1], args_1, true), void 0, function (id, addressGroupsAddAddressesAddAddressesRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('addressGroupsIdAddAddressesPut', 'id', id);
                            localVarPath = "/v2.0/address-groups/{id}/add_addresses"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addressGroupsAddAddressesAddAddressesRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('addressGroupsIdDelete', 'id', id);
                            localVarPath = "/v2.0/address-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('addressGroupsIdGet', 'id', id);
                            localVarPath = "/v2.0/address-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupUpdateRequest} [addressGroupUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdPut: function (id_1, addressGroupUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, addressGroupUpdateRequest_1], args_1, true), void 0, function (id, addressGroupUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('addressGroupsIdPut', 'id', id);
                            localVarPath = "/v2.0/address-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addressGroupUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupsRemoveAddressesRemoveAddressesRequest} [addressGroupsRemoveAddressesRemoveAddressesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdRemoveAddressesPut: function (id_1, addressGroupsRemoveAddressesRemoveAddressesRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, addressGroupsRemoveAddressesRemoveAddressesRequest_1], args_1, true), void 0, function (id, addressGroupsRemoveAddressesRemoveAddressesRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('addressGroupsIdRemoveAddressesPut', 'id', id);
                            localVarPath = "/v2.0/address-groups/{id}/remove_addresses"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addressGroupsRemoveAddressesRemoveAddressesRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {AddressGroupsCreateRequest} [addressGroupsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsPost: function (addressGroupsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([addressGroupsCreateRequest_1], args_1, true), void 0, function (addressGroupsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/address-groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addressGroupsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AddressGroupsApiAxiosParamCreator = AddressGroupsApiAxiosParamCreator;
/**
 * AddressGroupsApi - functional programming interface
 * @export
 */
var AddressGroupsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AddressGroupsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/address-groups API
         * @param {string} [name] name query parameter for /v2.0/address-groups API
         * @param {string} [description] description query parameter for /v2.0/address-groups API
         * @param {string} [projectId] project_id query parameter for /v2.0/address-groups API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AddressGroupsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsGet: function (id, name, description, projectId, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressGroupsGet(id, name, description, projectId, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressGroupsApi.addressGroupsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupsAddAddressesAddAddressesRequest} [addressGroupsAddAddressesAddAddressesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdAddAddressesPut: function (id, addressGroupsAddAddressesAddAddressesRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressGroupsIdAddAddressesPut(id, addressGroupsAddAddressesAddAddressesRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressGroupsApi.addressGroupsIdAddAddressesPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressGroupsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressGroupsApi.addressGroupsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressGroupsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressGroupsApi.addressGroupsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupUpdateRequest} [addressGroupUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdPut: function (id, addressGroupUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressGroupsIdPut(id, addressGroupUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressGroupsApi.addressGroupsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupsRemoveAddressesRemoveAddressesRequest} [addressGroupsRemoveAddressesRemoveAddressesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdRemoveAddressesPut: function (id, addressGroupsRemoveAddressesRemoveAddressesRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressGroupsIdRemoveAddressesPut(id, addressGroupsRemoveAddressesRemoveAddressesRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressGroupsApi.addressGroupsIdRemoveAddressesPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {AddressGroupsCreateRequest} [addressGroupsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsPost: function (addressGroupsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressGroupsPost(addressGroupsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressGroupsApi.addressGroupsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AddressGroupsApiFp = AddressGroupsApiFp;
/**
 * AddressGroupsApi - factory interface
 * @export
 */
var AddressGroupsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AddressGroupsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/address-groups API
         * @param {string} [name] name query parameter for /v2.0/address-groups API
         * @param {string} [description] description query parameter for /v2.0/address-groups API
         * @param {string} [projectId] project_id query parameter for /v2.0/address-groups API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AddressGroupsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsGet: function (id, name, description, projectId, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.addressGroupsGet(id, name, description, projectId, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupsAddAddressesAddAddressesRequest} [addressGroupsAddAddressesAddAddressesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdAddAddressesPut: function (id, addressGroupsAddAddressesAddAddressesRequest, options) {
            return localVarFp.addressGroupsIdAddAddressesPut(id, addressGroupsAddAddressesAddAddressesRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdDelete: function (id, options) {
            return localVarFp.addressGroupsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdGet: function (id, options) {
            return localVarFp.addressGroupsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupUpdateRequest} [addressGroupUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdPut: function (id, addressGroupUpdateRequest, options) {
            return localVarFp.addressGroupsIdPut(id, addressGroupUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-groups/{id} API
         * @param {AddressGroupsRemoveAddressesRemoveAddressesRequest} [addressGroupsRemoveAddressesRemoveAddressesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsIdRemoveAddressesPut: function (id, addressGroupsRemoveAddressesRemoveAddressesRequest, options) {
            return localVarFp.addressGroupsIdRemoveAddressesPut(id, addressGroupsRemoveAddressesRemoveAddressesRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {AddressGroupsCreateRequest} [addressGroupsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressGroupsPost: function (addressGroupsCreateRequest, options) {
            return localVarFp.addressGroupsPost(addressGroupsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AddressGroupsApiFactory = AddressGroupsApiFactory;
/**
 * AddressGroupsApi - object-oriented interface
 * @export
 * @class AddressGroupsApi
 * @extends {BaseAPI}
 */
var AddressGroupsApi = /** @class */ (function (_super) {
    __extends(AddressGroupsApi, _super);
    function AddressGroupsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/address-groups API
     * @param {string} [name] name query parameter for /v2.0/address-groups API
     * @param {string} [description] description query parameter for /v2.0/address-groups API
     * @param {string} [projectId] project_id query parameter for /v2.0/address-groups API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {AddressGroupsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressGroupsApi
     */
    AddressGroupsApi.prototype.addressGroupsGet = function (id, name, description, projectId, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.AddressGroupsApiFp)(this.configuration).addressGroupsGet(id, name, description, projectId, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/address-groups/{id} API
     * @param {AddressGroupsAddAddressesAddAddressesRequest} [addressGroupsAddAddressesAddAddressesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressGroupsApi
     */
    AddressGroupsApi.prototype.addressGroupsIdAddAddressesPut = function (id, addressGroupsAddAddressesAddAddressesRequest, options) {
        var _this = this;
        return (0, exports.AddressGroupsApiFp)(this.configuration).addressGroupsIdAddAddressesPut(id, addressGroupsAddAddressesAddAddressesRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/address-groups/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressGroupsApi
     */
    AddressGroupsApi.prototype.addressGroupsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.AddressGroupsApiFp)(this.configuration).addressGroupsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/address-groups/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressGroupsApi
     */
    AddressGroupsApi.prototype.addressGroupsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.AddressGroupsApiFp)(this.configuration).addressGroupsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/address-groups/{id} API
     * @param {AddressGroupUpdateRequest} [addressGroupUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressGroupsApi
     */
    AddressGroupsApi.prototype.addressGroupsIdPut = function (id, addressGroupUpdateRequest, options) {
        var _this = this;
        return (0, exports.AddressGroupsApiFp)(this.configuration).addressGroupsIdPut(id, addressGroupUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/address-groups/{id} API
     * @param {AddressGroupsRemoveAddressesRemoveAddressesRequest} [addressGroupsRemoveAddressesRemoveAddressesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressGroupsApi
     */
    AddressGroupsApi.prototype.addressGroupsIdRemoveAddressesPut = function (id, addressGroupsRemoveAddressesRemoveAddressesRequest, options) {
        var _this = this;
        return (0, exports.AddressGroupsApiFp)(this.configuration).addressGroupsIdRemoveAddressesPut(id, addressGroupsRemoveAddressesRemoveAddressesRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {AddressGroupsCreateRequest} [addressGroupsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressGroupsApi
     */
    AddressGroupsApi.prototype.addressGroupsPost = function (addressGroupsCreateRequest, options) {
        var _this = this;
        return (0, exports.AddressGroupsApiFp)(this.configuration).addressGroupsPost(addressGroupsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AddressGroupsApi;
}(base_1.BaseAPI));
exports.AddressGroupsApi = AddressGroupsApi;
/**
 * @export
 */
exports.AddressGroupsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * AddressScopesApi - axios parameter creator
 * @export
 */
var AddressScopesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/address-scopes API
         * @param {string} [name] name query parameter for /v2.0/address-scopes API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/address-scopes API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/address-scopes API
         * @param {AddressScopesGetIpVersionEnum} [ipVersion] ip_version query parameter for /v2.0/address-scopes API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AddressScopesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesGet: function (id_1, name_1, tenantId_1, shared_1, ipVersion_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 10; _i < arguments.length; _i++) {
                args_1[_i - 10] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, tenantId_1, shared_1, ipVersion_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, tenantId, shared, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/address-scopes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (shared !== undefined) {
                                for (_a = 0, _b = Object.entries(shared); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (ipVersion !== undefined) {
                                localVarQueryParameter['ip_version'] = ipVersion;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('addressScopesIdDelete', 'id', id);
                            localVarPath = "/v2.0/address-scopes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('addressScopesIdGet', 'id', id);
                            localVarPath = "/v2.0/address-scopes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {AddressScopeUpdateRequest} [addressScopeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdPut: function (id_1, addressScopeUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, addressScopeUpdateRequest_1], args_1, true), void 0, function (id, addressScopeUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('addressScopesIdPut', 'id', id);
                            localVarPath = "/v2.0/address-scopes/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addressScopeUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {AddressScopesCreateRequest} [addressScopesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesPost: function (addressScopesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([addressScopesCreateRequest_1], args_1, true), void 0, function (addressScopesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/address-scopes";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(addressScopesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AddressScopesApiAxiosParamCreator = AddressScopesApiAxiosParamCreator;
/**
 * AddressScopesApi - functional programming interface
 * @export
 */
var AddressScopesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AddressScopesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/address-scopes API
         * @param {string} [name] name query parameter for /v2.0/address-scopes API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/address-scopes API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/address-scopes API
         * @param {AddressScopesGetIpVersionEnum} [ipVersion] ip_version query parameter for /v2.0/address-scopes API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AddressScopesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesGet: function (id, name, tenantId, shared, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressScopesGet(id, name, tenantId, shared, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressScopesApi.addressScopesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressScopesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressScopesApi.addressScopesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressScopesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressScopesApi.addressScopesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {AddressScopeUpdateRequest} [addressScopeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdPut: function (id, addressScopeUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressScopesIdPut(id, addressScopeUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressScopesApi.addressScopesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {AddressScopesCreateRequest} [addressScopesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesPost: function (addressScopesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.addressScopesPost(addressScopesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AddressScopesApi.addressScopesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AddressScopesApiFp = AddressScopesApiFp;
/**
 * AddressScopesApi - factory interface
 * @export
 */
var AddressScopesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AddressScopesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/address-scopes API
         * @param {string} [name] name query parameter for /v2.0/address-scopes API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/address-scopes API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/address-scopes API
         * @param {AddressScopesGetIpVersionEnum} [ipVersion] ip_version query parameter for /v2.0/address-scopes API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AddressScopesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesGet: function (id, name, tenantId, shared, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.addressScopesGet(id, name, tenantId, shared, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdDelete: function (id, options) {
            return localVarFp.addressScopesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdGet: function (id, options) {
            return localVarFp.addressScopesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/address-scopes/{id} API
         * @param {AddressScopeUpdateRequest} [addressScopeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesIdPut: function (id, addressScopeUpdateRequest, options) {
            return localVarFp.addressScopesIdPut(id, addressScopeUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {AddressScopesCreateRequest} [addressScopesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addressScopesPost: function (addressScopesCreateRequest, options) {
            return localVarFp.addressScopesPost(addressScopesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AddressScopesApiFactory = AddressScopesApiFactory;
/**
 * AddressScopesApi - object-oriented interface
 * @export
 * @class AddressScopesApi
 * @extends {BaseAPI}
 */
var AddressScopesApi = /** @class */ (function (_super) {
    __extends(AddressScopesApi, _super);
    function AddressScopesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/address-scopes API
     * @param {string} [name] name query parameter for /v2.0/address-scopes API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/address-scopes API
     * @param {string | boolean} [shared] shared query parameter for /v2.0/address-scopes API
     * @param {AddressScopesGetIpVersionEnum} [ipVersion] ip_version query parameter for /v2.0/address-scopes API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {AddressScopesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressScopesApi
     */
    AddressScopesApi.prototype.addressScopesGet = function (id, name, tenantId, shared, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.AddressScopesApiFp)(this.configuration).addressScopesGet(id, name, tenantId, shared, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/address-scopes/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressScopesApi
     */
    AddressScopesApi.prototype.addressScopesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.AddressScopesApiFp)(this.configuration).addressScopesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/address-scopes/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressScopesApi
     */
    AddressScopesApi.prototype.addressScopesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.AddressScopesApiFp)(this.configuration).addressScopesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/address-scopes/{id} API
     * @param {AddressScopeUpdateRequest} [addressScopeUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressScopesApi
     */
    AddressScopesApi.prototype.addressScopesIdPut = function (id, addressScopeUpdateRequest, options) {
        var _this = this;
        return (0, exports.AddressScopesApiFp)(this.configuration).addressScopesIdPut(id, addressScopeUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {AddressScopesCreateRequest} [addressScopesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressScopesApi
     */
    AddressScopesApi.prototype.addressScopesPost = function (addressScopesCreateRequest, options) {
        var _this = this;
        return (0, exports.AddressScopesApiFp)(this.configuration).addressScopesPost(addressScopesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AddressScopesApi;
}(base_1.BaseAPI));
exports.AddressScopesApi = AddressScopesApi;
/**
 * @export
 */
exports.AddressScopesGetIpVersionEnum = {
    _4: '4',
    _6: '6'
};
/**
 * @export
 */
exports.AddressScopesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * AutoAllocatedTopologyApi - axios parameter creator
 * @export
 */
var AutoAllocatedTopologyApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AutoAllocatedTopologyGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/auto-allocated-topology";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('autoAllocatedTopologyIdDelete', 'id', id);
                            localVarPath = "/v2.0/auto-allocated-topology/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('autoAllocatedTopologyIdGet', 'id', id);
                            localVarPath = "/v2.0/auto-allocated-topology/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {AutoAllocatedTopologyUpdateRequest} [autoAllocatedTopologyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdPut: function (id_1, autoAllocatedTopologyUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, autoAllocatedTopologyUpdateRequest_1], args_1, true), void 0, function (id, autoAllocatedTopologyUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('autoAllocatedTopologyIdPut', 'id', id);
                            localVarPath = "/v2.0/auto-allocated-topology/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(autoAllocatedTopologyUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {AutoAllocatedTopologyCreateRequest} [autoAllocatedTopologyCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyPost: function (autoAllocatedTopologyCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([autoAllocatedTopologyCreateRequest_1], args_1, true), void 0, function (autoAllocatedTopologyCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/auto-allocated-topology";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(autoAllocatedTopologyCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AutoAllocatedTopologyApiAxiosParamCreator = AutoAllocatedTopologyApiAxiosParamCreator;
/**
 * AutoAllocatedTopologyApi - functional programming interface
 * @export
 */
var AutoAllocatedTopologyApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AutoAllocatedTopologyApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AutoAllocatedTopologyGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.autoAllocatedTopologyGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AutoAllocatedTopologyApi.autoAllocatedTopologyGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.autoAllocatedTopologyIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AutoAllocatedTopologyApi.autoAllocatedTopologyIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.autoAllocatedTopologyIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AutoAllocatedTopologyApi.autoAllocatedTopologyIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {AutoAllocatedTopologyUpdateRequest} [autoAllocatedTopologyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdPut: function (id, autoAllocatedTopologyUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.autoAllocatedTopologyIdPut(id, autoAllocatedTopologyUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AutoAllocatedTopologyApi.autoAllocatedTopologyIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {AutoAllocatedTopologyCreateRequest} [autoAllocatedTopologyCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyPost: function (autoAllocatedTopologyCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.autoAllocatedTopologyPost(autoAllocatedTopologyCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AutoAllocatedTopologyApi.autoAllocatedTopologyPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AutoAllocatedTopologyApiFp = AutoAllocatedTopologyApiFp;
/**
 * AutoAllocatedTopologyApi - factory interface
 * @export
 */
var AutoAllocatedTopologyApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AutoAllocatedTopologyApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AutoAllocatedTopologyGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.autoAllocatedTopologyGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdDelete: function (id, options) {
            return localVarFp.autoAllocatedTopologyIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdGet: function (id, options) {
            return localVarFp.autoAllocatedTopologyIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
         * @param {AutoAllocatedTopologyUpdateRequest} [autoAllocatedTopologyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyIdPut: function (id, autoAllocatedTopologyUpdateRequest, options) {
            return localVarFp.autoAllocatedTopologyIdPut(id, autoAllocatedTopologyUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {AutoAllocatedTopologyCreateRequest} [autoAllocatedTopologyCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoAllocatedTopologyPost: function (autoAllocatedTopologyCreateRequest, options) {
            return localVarFp.autoAllocatedTopologyPost(autoAllocatedTopologyCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AutoAllocatedTopologyApiFactory = AutoAllocatedTopologyApiFactory;
/**
 * AutoAllocatedTopologyApi - object-oriented interface
 * @export
 * @class AutoAllocatedTopologyApi
 * @extends {BaseAPI}
 */
var AutoAllocatedTopologyApi = /** @class */ (function (_super) {
    __extends(AutoAllocatedTopologyApi, _super);
    function AutoAllocatedTopologyApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {AutoAllocatedTopologyGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoAllocatedTopologyApi
     */
    AutoAllocatedTopologyApi.prototype.autoAllocatedTopologyGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.AutoAllocatedTopologyApiFp)(this.configuration).autoAllocatedTopologyGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoAllocatedTopologyApi
     */
    AutoAllocatedTopologyApi.prototype.autoAllocatedTopologyIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.AutoAllocatedTopologyApiFp)(this.configuration).autoAllocatedTopologyIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoAllocatedTopologyApi
     */
    AutoAllocatedTopologyApi.prototype.autoAllocatedTopologyIdGet = function (id, options) {
        var _this = this;
        return (0, exports.AutoAllocatedTopologyApiFp)(this.configuration).autoAllocatedTopologyIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/auto-allocated-topology/{id} API
     * @param {AutoAllocatedTopologyUpdateRequest} [autoAllocatedTopologyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoAllocatedTopologyApi
     */
    AutoAllocatedTopologyApi.prototype.autoAllocatedTopologyIdPut = function (id, autoAllocatedTopologyUpdateRequest, options) {
        var _this = this;
        return (0, exports.AutoAllocatedTopologyApiFp)(this.configuration).autoAllocatedTopologyIdPut(id, autoAllocatedTopologyUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {AutoAllocatedTopologyCreateRequest} [autoAllocatedTopologyCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoAllocatedTopologyApi
     */
    AutoAllocatedTopologyApi.prototype.autoAllocatedTopologyPost = function (autoAllocatedTopologyCreateRequest, options) {
        var _this = this;
        return (0, exports.AutoAllocatedTopologyApiFp)(this.configuration).autoAllocatedTopologyPost(autoAllocatedTopologyCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AutoAllocatedTopologyApi;
}(base_1.BaseAPI));
exports.AutoAllocatedTopologyApi = AutoAllocatedTopologyApi;
/**
 * @export
 */
exports.AutoAllocatedTopologyGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * AvailabilityZonesApi - axios parameter creator
 * @export
 */
var AvailabilityZonesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [name] name query parameter for /v2.0/availability_zones API
         * @param {string} [resource] resource query parameter for /v2.0/availability_zones API
         * @param {string} [state] state query parameter for /v2.0/availability_zones API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AvailabilityZonesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availabilityZonesGet: function (name_1, resource_1, state_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([name_1, resource_1, state_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (name, resource, state, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/availability_zones";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (resource !== undefined) {
                                localVarQueryParameter['resource'] = resource;
                            }
                            if (state !== undefined) {
                                localVarQueryParameter['state'] = state;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.AvailabilityZonesApiAxiosParamCreator = AvailabilityZonesApiAxiosParamCreator;
/**
 * AvailabilityZonesApi - functional programming interface
 * @export
 */
var AvailabilityZonesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AvailabilityZonesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [name] name query parameter for /v2.0/availability_zones API
         * @param {string} [resource] resource query parameter for /v2.0/availability_zones API
         * @param {string} [state] state query parameter for /v2.0/availability_zones API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AvailabilityZonesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availabilityZonesGet: function (name, resource, state, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.availabilityZonesGet(name, resource, state, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AvailabilityZonesApi.availabilityZonesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AvailabilityZonesApiFp = AvailabilityZonesApiFp;
/**
 * AvailabilityZonesApi - factory interface
 * @export
 */
var AvailabilityZonesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AvailabilityZonesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [name] name query parameter for /v2.0/availability_zones API
         * @param {string} [resource] resource query parameter for /v2.0/availability_zones API
         * @param {string} [state] state query parameter for /v2.0/availability_zones API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AvailabilityZonesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        availabilityZonesGet: function (name, resource, state, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.availabilityZonesGet(name, resource, state, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AvailabilityZonesApiFactory = AvailabilityZonesApiFactory;
/**
 * AvailabilityZonesApi - object-oriented interface
 * @export
 * @class AvailabilityZonesApi
 * @extends {BaseAPI}
 */
var AvailabilityZonesApi = /** @class */ (function (_super) {
    __extends(AvailabilityZonesApi, _super);
    function AvailabilityZonesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [name] name query parameter for /v2.0/availability_zones API
     * @param {string} [resource] resource query parameter for /v2.0/availability_zones API
     * @param {string} [state] state query parameter for /v2.0/availability_zones API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {AvailabilityZonesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AvailabilityZonesApi
     */
    AvailabilityZonesApi.prototype.availabilityZonesGet = function (name, resource, state, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.AvailabilityZonesApiFp)(this.configuration).availabilityZonesGet(name, resource, state, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AvailabilityZonesApi;
}(base_1.BaseAPI));
exports.AvailabilityZonesApi = AvailabilityZonesApi;
/**
 * @export
 */
exports.AvailabilityZonesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * DefaultSecurityGroupRulesApi - axios parameter creator
 * @export
 */
var DefaultSecurityGroupRulesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/default-security-group-rules API
         * @param {string} [description] description query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteGroupId] remote_group_id query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteAddressGroupId] remote_address_group_id query parameter for /v2.0/default-security-group-rules API
         * @param {DefaultSecurityGroupRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/default-security-group-rules API
         * @param {string} [protocol] protocol query parameter for /v2.0/default-security-group-rules API
         * @param {number | null} [portRangeMin] port_range_min query parameter for /v2.0/default-security-group-rules API
         * @param {number | null} [portRangeMax] port_range_max query parameter for /v2.0/default-security-group-rules API
         * @param {DefaultSecurityGroupRulesGetEthertypeEnum} [ethertype] ethertype query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/default-security-group-rules API
         * @param {string | boolean} [usedInDefaultSg] used_in_default_sg query parameter for /v2.0/default-security-group-rules API
         * @param {string | boolean} [usedInNonDefaultSg] used_in_non_default_sg query parameter for /v2.0/default-security-group-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {DefaultSecurityGroupRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesGet: function (id_1, description_1, remoteGroupId_1, remoteAddressGroupId_1, direction_1, protocol_1, portRangeMin_1, portRangeMax_1, ethertype_1, remoteIpPrefix_1, usedInDefaultSg_1, usedInNonDefaultSg_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 17; _i < arguments.length; _i++) {
                args_1[_i - 17] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, description_1, remoteGroupId_1, remoteAddressGroupId_1, direction_1, protocol_1, portRangeMin_1, portRangeMax_1, ethertype_1, remoteIpPrefix_1, usedInDefaultSg_1, usedInNonDefaultSg_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, description, remoteGroupId, remoteAddressGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, usedInDefaultSg, usedInNonDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            localVarPath = "/v2.0/default-security-group-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _g.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (remoteGroupId !== undefined) {
                                localVarQueryParameter['remote_group_id'] = remoteGroupId;
                            }
                            if (remoteAddressGroupId !== undefined) {
                                localVarQueryParameter['remote_address_group_id'] = remoteAddressGroupId;
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (protocol !== undefined) {
                                localVarQueryParameter['protocol'] = protocol;
                            }
                            if (portRangeMin !== undefined) {
                                localVarQueryParameter['port_range_min'] = portRangeMin;
                            }
                            if (portRangeMax !== undefined) {
                                localVarQueryParameter['port_range_max'] = portRangeMax;
                            }
                            if (ethertype !== undefined) {
                                localVarQueryParameter['ethertype'] = ethertype;
                            }
                            if (remoteIpPrefix !== undefined) {
                                localVarQueryParameter['remote_ip_prefix'] = remoteIpPrefix;
                            }
                            if (usedInDefaultSg !== undefined) {
                                for (_a = 0, _b = Object.entries(usedInDefaultSg); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (usedInNonDefaultSg !== undefined) {
                                for (_d = 0, _e = Object.entries(usedInNonDefaultSg); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('defaultSecurityGroupRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/default-security-group-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('defaultSecurityGroupRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/default-security-group-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {DefaultSecurityGroupRuleUpdateRequest} [defaultSecurityGroupRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdPut: function (id_1, defaultSecurityGroupRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, defaultSecurityGroupRuleUpdateRequest_1], args_1, true), void 0, function (id, defaultSecurityGroupRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('defaultSecurityGroupRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/default-security-group-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(defaultSecurityGroupRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {DefaultSecurityGroupRulesCreateRequest} [defaultSecurityGroupRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesPost: function (defaultSecurityGroupRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([defaultSecurityGroupRulesCreateRequest_1], args_1, true), void 0, function (defaultSecurityGroupRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/default-security-group-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(defaultSecurityGroupRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DefaultSecurityGroupRulesApiAxiosParamCreator = DefaultSecurityGroupRulesApiAxiosParamCreator;
/**
 * DefaultSecurityGroupRulesApi - functional programming interface
 * @export
 */
var DefaultSecurityGroupRulesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DefaultSecurityGroupRulesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/default-security-group-rules API
         * @param {string} [description] description query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteGroupId] remote_group_id query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteAddressGroupId] remote_address_group_id query parameter for /v2.0/default-security-group-rules API
         * @param {DefaultSecurityGroupRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/default-security-group-rules API
         * @param {string} [protocol] protocol query parameter for /v2.0/default-security-group-rules API
         * @param {number | null} [portRangeMin] port_range_min query parameter for /v2.0/default-security-group-rules API
         * @param {number | null} [portRangeMax] port_range_max query parameter for /v2.0/default-security-group-rules API
         * @param {DefaultSecurityGroupRulesGetEthertypeEnum} [ethertype] ethertype query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/default-security-group-rules API
         * @param {string | boolean} [usedInDefaultSg] used_in_default_sg query parameter for /v2.0/default-security-group-rules API
         * @param {string | boolean} [usedInNonDefaultSg] used_in_non_default_sg query parameter for /v2.0/default-security-group-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {DefaultSecurityGroupRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesGet: function (id, description, remoteGroupId, remoteAddressGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, usedInDefaultSg, usedInNonDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.defaultSecurityGroupRulesGet(id, description, remoteGroupId, remoteAddressGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, usedInDefaultSg, usedInNonDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultSecurityGroupRulesApi.defaultSecurityGroupRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.defaultSecurityGroupRulesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultSecurityGroupRulesApi.defaultSecurityGroupRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.defaultSecurityGroupRulesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultSecurityGroupRulesApi.defaultSecurityGroupRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {DefaultSecurityGroupRuleUpdateRequest} [defaultSecurityGroupRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdPut: function (id, defaultSecurityGroupRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.defaultSecurityGroupRulesIdPut(id, defaultSecurityGroupRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultSecurityGroupRulesApi.defaultSecurityGroupRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {DefaultSecurityGroupRulesCreateRequest} [defaultSecurityGroupRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesPost: function (defaultSecurityGroupRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.defaultSecurityGroupRulesPost(defaultSecurityGroupRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DefaultSecurityGroupRulesApi.defaultSecurityGroupRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DefaultSecurityGroupRulesApiFp = DefaultSecurityGroupRulesApiFp;
/**
 * DefaultSecurityGroupRulesApi - factory interface
 * @export
 */
var DefaultSecurityGroupRulesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DefaultSecurityGroupRulesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/default-security-group-rules API
         * @param {string} [description] description query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteGroupId] remote_group_id query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteAddressGroupId] remote_address_group_id query parameter for /v2.0/default-security-group-rules API
         * @param {DefaultSecurityGroupRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/default-security-group-rules API
         * @param {string} [protocol] protocol query parameter for /v2.0/default-security-group-rules API
         * @param {number | null} [portRangeMin] port_range_min query parameter for /v2.0/default-security-group-rules API
         * @param {number | null} [portRangeMax] port_range_max query parameter for /v2.0/default-security-group-rules API
         * @param {DefaultSecurityGroupRulesGetEthertypeEnum} [ethertype] ethertype query parameter for /v2.0/default-security-group-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/default-security-group-rules API
         * @param {string | boolean} [usedInDefaultSg] used_in_default_sg query parameter for /v2.0/default-security-group-rules API
         * @param {string | boolean} [usedInNonDefaultSg] used_in_non_default_sg query parameter for /v2.0/default-security-group-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {DefaultSecurityGroupRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesGet: function (id, description, remoteGroupId, remoteAddressGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, usedInDefaultSg, usedInNonDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.defaultSecurityGroupRulesGet(id, description, remoteGroupId, remoteAddressGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, usedInDefaultSg, usedInNonDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdDelete: function (id, options) {
            return localVarFp.defaultSecurityGroupRulesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdGet: function (id, options) {
            return localVarFp.defaultSecurityGroupRulesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
         * @param {DefaultSecurityGroupRuleUpdateRequest} [defaultSecurityGroupRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesIdPut: function (id, defaultSecurityGroupRuleUpdateRequest, options) {
            return localVarFp.defaultSecurityGroupRulesIdPut(id, defaultSecurityGroupRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {DefaultSecurityGroupRulesCreateRequest} [defaultSecurityGroupRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        defaultSecurityGroupRulesPost: function (defaultSecurityGroupRulesCreateRequest, options) {
            return localVarFp.defaultSecurityGroupRulesPost(defaultSecurityGroupRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DefaultSecurityGroupRulesApiFactory = DefaultSecurityGroupRulesApiFactory;
/**
 * DefaultSecurityGroupRulesApi - object-oriented interface
 * @export
 * @class DefaultSecurityGroupRulesApi
 * @extends {BaseAPI}
 */
var DefaultSecurityGroupRulesApi = /** @class */ (function (_super) {
    __extends(DefaultSecurityGroupRulesApi, _super);
    function DefaultSecurityGroupRulesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/default-security-group-rules API
     * @param {string} [description] description query parameter for /v2.0/default-security-group-rules API
     * @param {string} [remoteGroupId] remote_group_id query parameter for /v2.0/default-security-group-rules API
     * @param {string} [remoteAddressGroupId] remote_address_group_id query parameter for /v2.0/default-security-group-rules API
     * @param {DefaultSecurityGroupRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/default-security-group-rules API
     * @param {string} [protocol] protocol query parameter for /v2.0/default-security-group-rules API
     * @param {number | null} [portRangeMin] port_range_min query parameter for /v2.0/default-security-group-rules API
     * @param {number | null} [portRangeMax] port_range_max query parameter for /v2.0/default-security-group-rules API
     * @param {DefaultSecurityGroupRulesGetEthertypeEnum} [ethertype] ethertype query parameter for /v2.0/default-security-group-rules API
     * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/default-security-group-rules API
     * @param {string | boolean} [usedInDefaultSg] used_in_default_sg query parameter for /v2.0/default-security-group-rules API
     * @param {string | boolean} [usedInNonDefaultSg] used_in_non_default_sg query parameter for /v2.0/default-security-group-rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {DefaultSecurityGroupRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultSecurityGroupRulesApi
     */
    DefaultSecurityGroupRulesApi.prototype.defaultSecurityGroupRulesGet = function (id, description, remoteGroupId, remoteAddressGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, usedInDefaultSg, usedInNonDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.DefaultSecurityGroupRulesApiFp)(this.configuration).defaultSecurityGroupRulesGet(id, description, remoteGroupId, remoteAddressGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, usedInDefaultSg, usedInNonDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultSecurityGroupRulesApi
     */
    DefaultSecurityGroupRulesApi.prototype.defaultSecurityGroupRulesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.DefaultSecurityGroupRulesApiFp)(this.configuration).defaultSecurityGroupRulesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultSecurityGroupRulesApi
     */
    DefaultSecurityGroupRulesApi.prototype.defaultSecurityGroupRulesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.DefaultSecurityGroupRulesApiFp)(this.configuration).defaultSecurityGroupRulesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/default-security-group-rules/{id} API
     * @param {DefaultSecurityGroupRuleUpdateRequest} [defaultSecurityGroupRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultSecurityGroupRulesApi
     */
    DefaultSecurityGroupRulesApi.prototype.defaultSecurityGroupRulesIdPut = function (id, defaultSecurityGroupRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.DefaultSecurityGroupRulesApiFp)(this.configuration).defaultSecurityGroupRulesIdPut(id, defaultSecurityGroupRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {DefaultSecurityGroupRulesCreateRequest} [defaultSecurityGroupRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultSecurityGroupRulesApi
     */
    DefaultSecurityGroupRulesApi.prototype.defaultSecurityGroupRulesPost = function (defaultSecurityGroupRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.DefaultSecurityGroupRulesApiFp)(this.configuration).defaultSecurityGroupRulesPost(defaultSecurityGroupRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DefaultSecurityGroupRulesApi;
}(base_1.BaseAPI));
exports.DefaultSecurityGroupRulesApi = DefaultSecurityGroupRulesApi;
/**
 * @export
 */
exports.DefaultSecurityGroupRulesGetDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.DefaultSecurityGroupRulesGetEthertypeEnum = {
    Ipv4: 'IPv4',
    Ipv6: 'IPv6'
};
/**
 * @export
 */
exports.DefaultSecurityGroupRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * DhcpAgentSchedulerApi - axios parameter creator
 * @export
 */
var DhcpAgentSchedulerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsAgentIdDhcpNetworksGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/agents/{agent_id}/dhcp-networks";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdDelete: function (agentId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentId_1, id_1], args_1, true), void 0, function (agentId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'agentId' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdDhcpNetworksIdDelete', 'agentId', agentId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdDhcpNetworksIdDelete', 'id', id);
                            localVarPath = "/v2.0/agents/{agent_id}/dhcp-networks/{id}"
                                .replace("{".concat("agent_id", "}"), encodeURIComponent(String(agentId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdGet: function (agentId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentId_1, id_1], args_1, true), void 0, function (agentId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'agentId' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdDhcpNetworksIdGet', 'agentId', agentId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdDhcpNetworksIdGet', 'id', id);
                            localVarPath = "/v2.0/agents/{agent_id}/dhcp-networks/{id}"
                                .replace("{".concat("agent_id", "}"), encodeURIComponent(String(agentId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdPut: function (agentId_1, id_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentId_1, id_1, body_1], args_1, true), void 0, function (agentId, id, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'agentId' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdDhcpNetworksIdPut', 'agentId', agentId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdDhcpNetworksIdPut', 'id', id);
                            localVarPath = "/v2.0/agents/{agent_id}/dhcp-networks/{id}"
                                .replace("{".concat("agent_id", "}"), encodeURIComponent(String(agentId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksPost: function (agentId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentId_1, body_1], args_1, true), void 0, function (agentId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'agentId' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdDhcpNetworksPost', 'agentId', agentId);
                            localVarPath = "/v2.0/agents/{agent_id}/dhcp-networks"
                                .replace("{".concat("agent_id", "}"), encodeURIComponent(String(agentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DhcpAgentSchedulerApiAxiosParamCreator = DhcpAgentSchedulerApiAxiosParamCreator;
/**
 * DhcpAgentSchedulerApi - functional programming interface
 * @export
 */
var DhcpAgentSchedulerApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DhcpAgentSchedulerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsAgentIdDhcpNetworksGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdDhcpNetworksGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DhcpAgentSchedulerApi.agentsAgentIdDhcpNetworksGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdDelete: function (agentId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdDhcpNetworksIdDelete(agentId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DhcpAgentSchedulerApi.agentsAgentIdDhcpNetworksIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdGet: function (agentId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdDhcpNetworksIdGet(agentId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DhcpAgentSchedulerApi.agentsAgentIdDhcpNetworksIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdPut: function (agentId, id, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdDhcpNetworksIdPut(agentId, id, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DhcpAgentSchedulerApi.agentsAgentIdDhcpNetworksIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksPost: function (agentId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdDhcpNetworksPost(agentId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DhcpAgentSchedulerApi.agentsAgentIdDhcpNetworksPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DhcpAgentSchedulerApiFp = DhcpAgentSchedulerApiFp;
/**
 * DhcpAgentSchedulerApi - factory interface
 * @export
 */
var DhcpAgentSchedulerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DhcpAgentSchedulerApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsAgentIdDhcpNetworksGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.agentsAgentIdDhcpNetworksGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdDelete: function (agentId, id, options) {
            return localVarFp.agentsAgentIdDhcpNetworksIdDelete(agentId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdGet: function (agentId, id, options) {
            return localVarFp.agentsAgentIdDhcpNetworksIdGet(agentId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksIdPut: function (agentId, id, body, options) {
            return localVarFp.agentsAgentIdDhcpNetworksIdPut(agentId, id, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdDhcpNetworksPost: function (agentId, body, options) {
            return localVarFp.agentsAgentIdDhcpNetworksPost(agentId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DhcpAgentSchedulerApiFactory = DhcpAgentSchedulerApiFactory;
/**
 * DhcpAgentSchedulerApi - object-oriented interface
 * @export
 * @class DhcpAgentSchedulerApi
 * @extends {BaseAPI}
 */
var DhcpAgentSchedulerApi = /** @class */ (function (_super) {
    __extends(DhcpAgentSchedulerApi, _super);
    function DhcpAgentSchedulerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {AgentsAgentIdDhcpNetworksGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DhcpAgentSchedulerApi
     */
    DhcpAgentSchedulerApi.prototype.agentsAgentIdDhcpNetworksGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.DhcpAgentSchedulerApiFp)(this.configuration).agentsAgentIdDhcpNetworksGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
     * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DhcpAgentSchedulerApi
     */
    DhcpAgentSchedulerApi.prototype.agentsAgentIdDhcpNetworksIdDelete = function (agentId, id, options) {
        var _this = this;
        return (0, exports.DhcpAgentSchedulerApiFp)(this.configuration).agentsAgentIdDhcpNetworksIdDelete(agentId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
     * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DhcpAgentSchedulerApi
     */
    DhcpAgentSchedulerApi.prototype.agentsAgentIdDhcpNetworksIdGet = function (agentId, id, options) {
        var _this = this;
        return (0, exports.DhcpAgentSchedulerApiFp)(this.configuration).agentsAgentIdDhcpNetworksIdGet(agentId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
     * @param {string} id id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DhcpAgentSchedulerApi
     */
    DhcpAgentSchedulerApi.prototype.agentsAgentIdDhcpNetworksIdPut = function (agentId, id, body, options) {
        var _this = this;
        return (0, exports.DhcpAgentSchedulerApiFp)(this.configuration).agentsAgentIdDhcpNetworksIdPut(agentId, id, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/dhcp-networks/{id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DhcpAgentSchedulerApi
     */
    DhcpAgentSchedulerApi.prototype.agentsAgentIdDhcpNetworksPost = function (agentId, body, options) {
        var _this = this;
        return (0, exports.DhcpAgentSchedulerApiFp)(this.configuration).agentsAgentIdDhcpNetworksPost(agentId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DhcpAgentSchedulerApi;
}(base_1.BaseAPI));
exports.DhcpAgentSchedulerApi = DhcpAgentSchedulerApi;
/**
 * @export
 */
exports.AgentsAgentIdDhcpNetworksGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * ExtensionsApi - axios parameter creator
 * @export
 */
var ExtensionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extensionsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/extensions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/extensions/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extensionsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('extensionsIdGet', 'id', id);
                            localVarPath = "/v2.0/extensions/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ExtensionsApiAxiosParamCreator = ExtensionsApiAxiosParamCreator;
/**
 * ExtensionsApi - functional programming interface
 * @export
 */
var ExtensionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ExtensionsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extensionsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.extensionsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExtensionsApi.extensionsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/extensions/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extensionsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.extensionsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ExtensionsApi.extensionsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ExtensionsApiFp = ExtensionsApiFp;
/**
 * ExtensionsApi - factory interface
 * @export
 */
var ExtensionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ExtensionsApiFp)(configuration);
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extensionsGet: function (options) {
            return localVarFp.extensionsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/extensions/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        extensionsIdGet: function (id, options) {
            return localVarFp.extensionsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ExtensionsApiFactory = ExtensionsApiFactory;
/**
 * ExtensionsApi - object-oriented interface
 * @export
 * @class ExtensionsApi
 * @extends {BaseAPI}
 */
var ExtensionsApi = /** @class */ (function (_super) {
    __extends(ExtensionsApi, _super);
    function ExtensionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtensionsApi
     */
    ExtensionsApi.prototype.extensionsGet = function (options) {
        var _this = this;
        return (0, exports.ExtensionsApiFp)(this.configuration).extensionsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/extensions/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtensionsApi
     */
    ExtensionsApi.prototype.extensionsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.ExtensionsApiFp)(this.configuration).extensionsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ExtensionsApi;
}(base_1.BaseAPI));
exports.ExtensionsApi = ExtensionsApi;
/**
 * FlavorsApi - axios parameter creator
 * @export
 */
var FlavorsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsFlavorIdNextProvidersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/flavors/{flavor_id}/next_providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdDelete: function (flavorId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorId_1, id_1], args_1, true), void 0, function (flavorId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'flavorId' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdNextProvidersIdDelete', 'flavorId', flavorId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdNextProvidersIdDelete', 'id', id);
                            localVarPath = "/v2.0/flavors/{flavor_id}/next_providers/{id}"
                                .replace("{".concat("flavor_id", "}"), encodeURIComponent(String(flavorId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdGet: function (flavorId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorId_1, id_1], args_1, true), void 0, function (flavorId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'flavorId' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdNextProvidersIdGet', 'flavorId', flavorId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdNextProvidersIdGet', 'id', id);
                            localVarPath = "/v2.0/flavors/{flavor_id}/next_providers/{id}"
                                .replace("{".concat("flavor_id", "}"), encodeURIComponent(String(flavorId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {FlavorsNextProviderUpdateRequest} [flavorsNextProviderUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdPut: function (flavorId_1, id_1, flavorsNextProviderUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorId_1, id_1, flavorsNextProviderUpdateRequest_1], args_1, true), void 0, function (flavorId, id, flavorsNextProviderUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'flavorId' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdNextProvidersIdPut', 'flavorId', flavorId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdNextProvidersIdPut', 'id', id);
                            localVarPath = "/v2.0/flavors/{flavor_id}/next_providers/{id}"
                                .replace("{".concat("flavor_id", "}"), encodeURIComponent(String(flavorId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(flavorsNextProviderUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {FlavorsNextProvidersCreateRequest} [flavorsNextProvidersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersPost: function (flavorId_1, flavorsNextProvidersCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorId_1, flavorsNextProvidersCreateRequest_1], args_1, true), void 0, function (flavorId, flavorsNextProvidersCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'flavorId' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdNextProvidersPost', 'flavorId', flavorId);
                            localVarPath = "/v2.0/flavors/{flavor_id}/next_providers"
                                .replace("{".concat("flavor_id", "}"), encodeURIComponent(String(flavorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(flavorsNextProvidersCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsFlavorIdServiceProfilesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/flavors/{flavor_id}/service_profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdDelete: function (flavorId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorId_1, id_1], args_1, true), void 0, function (flavorId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'flavorId' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdServiceProfilesIdDelete', 'flavorId', flavorId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdServiceProfilesIdDelete', 'id', id);
                            localVarPath = "/v2.0/flavors/{flavor_id}/service_profiles/{id}"
                                .replace("{".concat("flavor_id", "}"), encodeURIComponent(String(flavorId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdGet: function (flavorId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorId_1, id_1], args_1, true), void 0, function (flavorId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'flavorId' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdServiceProfilesIdGet', 'flavorId', flavorId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdServiceProfilesIdGet', 'id', id);
                            localVarPath = "/v2.0/flavors/{flavor_id}/service_profiles/{id}"
                                .replace("{".concat("flavor_id", "}"), encodeURIComponent(String(flavorId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {FlavorsServiceProfileUpdateRequest} [flavorsServiceProfileUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdPut: function (flavorId_1, id_1, flavorsServiceProfileUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorId_1, id_1, flavorsServiceProfileUpdateRequest_1], args_1, true), void 0, function (flavorId, id, flavorsServiceProfileUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'flavorId' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdServiceProfilesIdPut', 'flavorId', flavorId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdServiceProfilesIdPut', 'id', id);
                            localVarPath = "/v2.0/flavors/{flavor_id}/service_profiles/{id}"
                                .replace("{".concat("flavor_id", "}"), encodeURIComponent(String(flavorId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(flavorsServiceProfileUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {FlavorsServiceProfilesCreateRequest} [flavorsServiceProfilesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesPost: function (flavorId_1, flavorsServiceProfilesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorId_1, flavorsServiceProfilesCreateRequest_1], args_1, true), void 0, function (flavorId, flavorsServiceProfilesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'flavorId' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsFlavorIdServiceProfilesPost', 'flavorId', flavorId);
                            localVarPath = "/v2.0/flavors/{flavor_id}/service_profiles"
                                .replace("{".concat("flavor_id", "}"), encodeURIComponent(String(flavorId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(flavorsServiceProfilesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/flavors API
         * @param {string} [name] name query parameter for /v2.0/flavors API
         * @param {string | null} [description] description query parameter for /v2.0/flavors API
         * @param {string} [serviceType] service_type query parameter for /v2.0/flavors API
         * @param {string | boolean | null} [enabled] enabled query parameter for /v2.0/flavors API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsGet: function (id_1, name_1, description_1, serviceType_1, enabled_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 10; _i < arguments.length; _i++) {
                args_1[_i - 10] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, description_1, serviceType_1, enabled_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, description, serviceType, enabled, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/flavors";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (serviceType !== undefined) {
                                localVarQueryParameter['service_type'] = serviceType;
                            }
                            if (enabled !== undefined) {
                                for (_a = 0, _b = Object.entries(enabled); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsIdDelete', 'id', id);
                            localVarPath = "/v2.0/flavors/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsIdGet', 'id', id);
                            localVarPath = "/v2.0/flavors/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {FlavorUpdateRequest} [flavorUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdPut: function (id_1, flavorUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, flavorUpdateRequest_1], args_1, true), void 0, function (id, flavorUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('flavorsIdPut', 'id', id);
                            localVarPath = "/v2.0/flavors/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(flavorUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {FlavorsCreateRequest} [flavorsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsPost: function (flavorsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([flavorsCreateRequest_1], args_1, true), void 0, function (flavorsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/flavors";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(flavorsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.FlavorsApiAxiosParamCreator = FlavorsApiAxiosParamCreator;
/**
 * FlavorsApi - functional programming interface
 * @export
 */
var FlavorsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.FlavorsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsFlavorIdNextProvidersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdNextProvidersGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdNextProvidersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdDelete: function (flavorId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdNextProvidersIdDelete(flavorId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdNextProvidersIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdGet: function (flavorId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdNextProvidersIdGet(flavorId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdNextProvidersIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {FlavorsNextProviderUpdateRequest} [flavorsNextProviderUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdPut: function (flavorId, id, flavorsNextProviderUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdNextProvidersIdPut(flavorId, id, flavorsNextProviderUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdNextProvidersIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {FlavorsNextProvidersCreateRequest} [flavorsNextProvidersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersPost: function (flavorId, flavorsNextProvidersCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdNextProvidersPost(flavorId, flavorsNextProvidersCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdNextProvidersPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsFlavorIdServiceProfilesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdServiceProfilesGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdServiceProfilesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdDelete: function (flavorId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdServiceProfilesIdDelete(flavorId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdServiceProfilesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdGet: function (flavorId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdServiceProfilesIdGet(flavorId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdServiceProfilesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {FlavorsServiceProfileUpdateRequest} [flavorsServiceProfileUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdPut: function (flavorId, id, flavorsServiceProfileUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdServiceProfilesIdPut(flavorId, id, flavorsServiceProfileUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdServiceProfilesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {FlavorsServiceProfilesCreateRequest} [flavorsServiceProfilesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesPost: function (flavorId, flavorsServiceProfilesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsFlavorIdServiceProfilesPost(flavorId, flavorsServiceProfilesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsFlavorIdServiceProfilesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/flavors API
         * @param {string} [name] name query parameter for /v2.0/flavors API
         * @param {string | null} [description] description query parameter for /v2.0/flavors API
         * @param {string} [serviceType] service_type query parameter for /v2.0/flavors API
         * @param {string | boolean | null} [enabled] enabled query parameter for /v2.0/flavors API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsGet: function (id, name, description, serviceType, enabled, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsGet(id, name, description, serviceType, enabled, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {FlavorUpdateRequest} [flavorUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdPut: function (id, flavorUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsIdPut(id, flavorUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {FlavorsCreateRequest} [flavorsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsPost: function (flavorsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.flavorsPost(flavorsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FlavorsApi.flavorsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.FlavorsApiFp = FlavorsApiFp;
/**
 * FlavorsApi - factory interface
 * @export
 */
var FlavorsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.FlavorsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsFlavorIdNextProvidersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.flavorsFlavorIdNextProvidersGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdDelete: function (flavorId, id, options) {
            return localVarFp.flavorsFlavorIdNextProvidersIdDelete(flavorId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdGet: function (flavorId, id, options) {
            return localVarFp.flavorsFlavorIdNextProvidersIdGet(flavorId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {FlavorsNextProviderUpdateRequest} [flavorsNextProviderUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersIdPut: function (flavorId, id, flavorsNextProviderUpdateRequest, options) {
            return localVarFp.flavorsFlavorIdNextProvidersIdPut(flavorId, id, flavorsNextProviderUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
         * @param {FlavorsNextProvidersCreateRequest} [flavorsNextProvidersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdNextProvidersPost: function (flavorId, flavorsNextProvidersCreateRequest, options) {
            return localVarFp.flavorsFlavorIdNextProvidersPost(flavorId, flavorsNextProvidersCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsFlavorIdServiceProfilesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.flavorsFlavorIdServiceProfilesGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdDelete: function (flavorId, id, options) {
            return localVarFp.flavorsFlavorIdServiceProfilesIdDelete(flavorId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdGet: function (flavorId, id, options) {
            return localVarFp.flavorsFlavorIdServiceProfilesIdGet(flavorId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {FlavorsServiceProfileUpdateRequest} [flavorsServiceProfileUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesIdPut: function (flavorId, id, flavorsServiceProfileUpdateRequest, options) {
            return localVarFp.flavorsFlavorIdServiceProfilesIdPut(flavorId, id, flavorsServiceProfileUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {FlavorsServiceProfilesCreateRequest} [flavorsServiceProfilesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsFlavorIdServiceProfilesPost: function (flavorId, flavorsServiceProfilesCreateRequest, options) {
            return localVarFp.flavorsFlavorIdServiceProfilesPost(flavorId, flavorsServiceProfilesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/flavors API
         * @param {string} [name] name query parameter for /v2.0/flavors API
         * @param {string | null} [description] description query parameter for /v2.0/flavors API
         * @param {string} [serviceType] service_type query parameter for /v2.0/flavors API
         * @param {string | boolean | null} [enabled] enabled query parameter for /v2.0/flavors API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FlavorsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsGet: function (id, name, description, serviceType, enabled, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.flavorsGet(id, name, description, serviceType, enabled, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdDelete: function (id, options) {
            return localVarFp.flavorsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdGet: function (id, options) {
            return localVarFp.flavorsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{id} API
         * @param {FlavorUpdateRequest} [flavorUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsIdPut: function (id, flavorUpdateRequest, options) {
            return localVarFp.flavorsIdPut(id, flavorUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {FlavorsCreateRequest} [flavorsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        flavorsPost: function (flavorsCreateRequest, options) {
            return localVarFp.flavorsPost(flavorsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FlavorsApiFactory = FlavorsApiFactory;
/**
 * FlavorsApi - object-oriented interface
 * @export
 * @class FlavorsApi
 * @extends {BaseAPI}
 */
var FlavorsApi = /** @class */ (function (_super) {
    __extends(FlavorsApi, _super);
    function FlavorsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {FlavorsFlavorIdNextProvidersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdNextProvidersGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdNextProvidersGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdNextProvidersIdDelete = function (flavorId, id, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdNextProvidersIdDelete(flavorId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdNextProvidersIdGet = function (flavorId, id, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdNextProvidersIdGet(flavorId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
     * @param {FlavorsNextProviderUpdateRequest} [flavorsNextProviderUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdNextProvidersIdPut = function (flavorId, id, flavorsNextProviderUpdateRequest, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdNextProvidersIdPut(flavorId, id, flavorsNextProviderUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/next_providers/{id} API
     * @param {FlavorsNextProvidersCreateRequest} [flavorsNextProvidersCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdNextProvidersPost = function (flavorId, flavorsNextProvidersCreateRequest, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdNextProvidersPost(flavorId, flavorsNextProvidersCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {FlavorsFlavorIdServiceProfilesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdServiceProfilesGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdServiceProfilesGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdServiceProfilesIdDelete = function (flavorId, id, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdServiceProfilesIdDelete(flavorId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdServiceProfilesIdGet = function (flavorId, id, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdServiceProfilesIdGet(flavorId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {FlavorsServiceProfileUpdateRequest} [flavorsServiceProfileUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdServiceProfilesIdPut = function (flavorId, id, flavorsServiceProfileUpdateRequest, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdServiceProfilesIdPut(flavorId, id, flavorsServiceProfileUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} flavorId flavor_id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {FlavorsServiceProfilesCreateRequest} [flavorsServiceProfilesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsFlavorIdServiceProfilesPost = function (flavorId, flavorsServiceProfilesCreateRequest, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsFlavorIdServiceProfilesPost(flavorId, flavorsServiceProfilesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/flavors API
     * @param {string} [name] name query parameter for /v2.0/flavors API
     * @param {string | null} [description] description query parameter for /v2.0/flavors API
     * @param {string} [serviceType] service_type query parameter for /v2.0/flavors API
     * @param {string | boolean | null} [enabled] enabled query parameter for /v2.0/flavors API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {FlavorsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsGet = function (id, name, description, serviceType, enabled, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsGet(id, name, description, serviceType, enabled, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/flavors/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/flavors/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/flavors/{id} API
     * @param {FlavorUpdateRequest} [flavorUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsIdPut = function (id, flavorUpdateRequest, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsIdPut(id, flavorUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {FlavorsCreateRequest} [flavorsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlavorsApi
     */
    FlavorsApi.prototype.flavorsPost = function (flavorsCreateRequest, options) {
        var _this = this;
        return (0, exports.FlavorsApiFp)(this.configuration).flavorsPost(flavorsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FlavorsApi;
}(base_1.BaseAPI));
exports.FlavorsApi = FlavorsApi;
/**
 * @export
 */
exports.FlavorsFlavorIdNextProvidersGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.FlavorsFlavorIdServiceProfilesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.FlavorsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * FloatingipPoolsApi - axios parameter creator
 * @export
 */
var FloatingipPoolsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipPoolsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/floatingip-pools";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipPoolsIdDelete', 'id', id);
                            localVarPath = "/v2.0/floatingip-pools/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipPoolsIdGet', 'id', id);
                            localVarPath = "/v2.0/floatingip-pools/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {FloatingipPoolUpdateRequest} [floatingipPoolUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdPut: function (id_1, floatingipPoolUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, floatingipPoolUpdateRequest_1], args_1, true), void 0, function (id, floatingipPoolUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipPoolsIdPut', 'id', id);
                            localVarPath = "/v2.0/floatingip-pools/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(floatingipPoolUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {FloatingipPoolsCreateRequest} [floatingipPoolsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsPost: function (floatingipPoolsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipPoolsCreateRequest_1], args_1, true), void 0, function (floatingipPoolsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/floatingip-pools";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(floatingipPoolsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.FloatingipPoolsApiAxiosParamCreator = FloatingipPoolsApiAxiosParamCreator;
/**
 * FloatingipPoolsApi - functional programming interface
 * @export
 */
var FloatingipPoolsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.FloatingipPoolsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipPoolsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipPoolsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipPoolsApi.floatingipPoolsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipPoolsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipPoolsApi.floatingipPoolsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipPoolsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipPoolsApi.floatingipPoolsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {FloatingipPoolUpdateRequest} [floatingipPoolUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdPut: function (id, floatingipPoolUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipPoolsIdPut(id, floatingipPoolUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipPoolsApi.floatingipPoolsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {FloatingipPoolsCreateRequest} [floatingipPoolsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsPost: function (floatingipPoolsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipPoolsPost(floatingipPoolsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipPoolsApi.floatingipPoolsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.FloatingipPoolsApiFp = FloatingipPoolsApiFp;
/**
 * FloatingipPoolsApi - factory interface
 * @export
 */
var FloatingipPoolsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.FloatingipPoolsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipPoolsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.floatingipPoolsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdDelete: function (id, options) {
            return localVarFp.floatingipPoolsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdGet: function (id, options) {
            return localVarFp.floatingipPoolsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
         * @param {FloatingipPoolUpdateRequest} [floatingipPoolUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsIdPut: function (id, floatingipPoolUpdateRequest, options) {
            return localVarFp.floatingipPoolsIdPut(id, floatingipPoolUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {FloatingipPoolsCreateRequest} [floatingipPoolsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipPoolsPost: function (floatingipPoolsCreateRequest, options) {
            return localVarFp.floatingipPoolsPost(floatingipPoolsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FloatingipPoolsApiFactory = FloatingipPoolsApiFactory;
/**
 * FloatingipPoolsApi - object-oriented interface
 * @export
 * @class FloatingipPoolsApi
 * @extends {BaseAPI}
 */
var FloatingipPoolsApi = /** @class */ (function (_super) {
    __extends(FloatingipPoolsApi, _super);
    function FloatingipPoolsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {FloatingipPoolsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipPoolsApi
     */
    FloatingipPoolsApi.prototype.floatingipPoolsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.FloatingipPoolsApiFp)(this.configuration).floatingipPoolsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipPoolsApi
     */
    FloatingipPoolsApi.prototype.floatingipPoolsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.FloatingipPoolsApiFp)(this.configuration).floatingipPoolsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipPoolsApi
     */
    FloatingipPoolsApi.prototype.floatingipPoolsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.FloatingipPoolsApiFp)(this.configuration).floatingipPoolsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/floatingip-pools/{id} API
     * @param {FloatingipPoolUpdateRequest} [floatingipPoolUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipPoolsApi
     */
    FloatingipPoolsApi.prototype.floatingipPoolsIdPut = function (id, floatingipPoolUpdateRequest, options) {
        var _this = this;
        return (0, exports.FloatingipPoolsApiFp)(this.configuration).floatingipPoolsIdPut(id, floatingipPoolUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {FloatingipPoolsCreateRequest} [floatingipPoolsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipPoolsApi
     */
    FloatingipPoolsApi.prototype.floatingipPoolsPost = function (floatingipPoolsCreateRequest, options) {
        var _this = this;
        return (0, exports.FloatingipPoolsApiFp)(this.configuration).floatingipPoolsPost(floatingipPoolsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FloatingipPoolsApi;
}(base_1.BaseAPI));
exports.FloatingipPoolsApi = FloatingipPoolsApi;
/**
 * @export
 */
exports.FloatingipPoolsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * FloatingipsApi - axios parameter creator
 * @export
 */
var FloatingipsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {number | null} [externalPort] external_port query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {FloatingipsFloatingipIdPortForwardingsGetProtocolEnum} [protocol] protocol query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [internalPortId] internal_port_id query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [description] description query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {number} [externalPortRange] external_port_range query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsFloatingipIdPortForwardingsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsGet: function (id_1, externalPort_1, protocol_1, internalPortId_1, description_1, externalPortRange_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 11; _i < arguments.length; _i++) {
                args_1[_i - 11] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, externalPort_1, protocol_1, internalPortId_1, description_1, externalPortRange_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, externalPort, protocol, internalPortId, description, externalPortRange, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/port_forwardings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (externalPort !== undefined) {
                                localVarQueryParameter['external_port'] = externalPort;
                            }
                            if (protocol !== undefined) {
                                localVarQueryParameter['protocol'] = protocol;
                            }
                            if (internalPortId !== undefined) {
                                localVarQueryParameter['internal_port_id'] = internalPortId;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (externalPortRange !== undefined) {
                                localVarQueryParameter['external_port_range'] = externalPortRange;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {FloatingipsPortForwardingsCreateRequest} [floatingipsPortForwardingsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsPost: function (floatingipId_1, floatingipsPortForwardingsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1, floatingipsPortForwardingsCreateRequest_1], args_1, true), void 0, function (floatingipId, floatingipsPortForwardingsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdPortForwardingsPost', 'floatingipId', floatingipId);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/port_forwardings"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(floatingipsPortForwardingsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsDelete: function (floatingipId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1], args_1, true), void 0, function (floatingipId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdTagsDelete', 'floatingipId', floatingipId);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/tags"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsFloatingipIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdDelete: function (floatingipId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1, id_1], args_1, true), void 0, function (floatingipId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdTagsIdDelete', 'floatingipId', floatingipId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/tags/{id}"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdGet: function (floatingipId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1, id_1], args_1, true), void 0, function (floatingipId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdTagsIdGet', 'floatingipId', floatingipId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/tags/{id}"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdPut: function (floatingipId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1, id_1], args_1, true), void 0, function (floatingipId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdTagsIdPut', 'floatingipId', floatingipId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/tags/{id}"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {FloatingipsTagsUpdateAllRequest} [floatingipsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsPut: function (floatingipId_1, floatingipsTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1, floatingipsTagsUpdateAllRequest_1], args_1, true), void 0, function (floatingipId, floatingipsTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdTagsPut', 'floatingipId', floatingipId);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/tags"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(floatingipsTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/floatingips API
         * @param {string} [floatingIpAddress] floating_ip_address query parameter for /v2.0/floatingips API
         * @param {string} [floatingNetworkId] floating_network_id query parameter for /v2.0/floatingips API
         * @param {string | null} [routerId] router_id query parameter for /v2.0/floatingips API
         * @param {string | null} [portId] port_id query parameter for /v2.0/floatingips API
         * @param {string} [fixedIpAddress] fixed_ip_address query parameter for /v2.0/floatingips API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/floatingips API
         * @param {string} [status] status query parameter for /v2.0/floatingips API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/floatingips API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/floatingips API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/floatingips API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/floatingips API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/floatingips API
         * @param {string} [description] description query parameter for /v2.0/floatingips API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsGet: function (id_1, floatingIpAddress_1, floatingNetworkId_1, routerId_1, portId_1, fixedIpAddress_1, tenantId_1, status_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 19; _i < arguments.length; _i++) {
                args_1[_i - 19] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, floatingIpAddress_1, floatingNetworkId_1, routerId_1, portId_1, fixedIpAddress_1, tenantId_1, status_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, floatingIpAddress, floatingNetworkId, routerId, portId, fixedIpAddress, tenantId, status, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/floatingips";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (floatingIpAddress !== undefined) {
                                localVarQueryParameter['floating_ip_address'] = floatingIpAddress;
                            }
                            if (floatingNetworkId !== undefined) {
                                localVarQueryParameter['floating_network_id'] = floatingNetworkId;
                            }
                            if (routerId !== undefined) {
                                localVarQueryParameter['router_id'] = routerId;
                            }
                            if (portId !== undefined) {
                                localVarQueryParameter['port_id'] = portId;
                            }
                            if (fixedIpAddress !== undefined) {
                                localVarQueryParameter['fixed_ip_address'] = fixedIpAddress;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsIdDelete', 'id', id);
                            localVarPath = "/v2.0/floatingips/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsIdGet', 'id', id);
                            localVarPath = "/v2.0/floatingips/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {FloatingipUpdateRequest} [floatingipUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdPut: function (id_1, floatingipUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, floatingipUpdateRequest_1], args_1, true), void 0, function (id, floatingipUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsIdPut', 'id', id);
                            localVarPath = "/v2.0/floatingips/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(floatingipUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {FloatingipsCreateRequest} [floatingipsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsPost: function (floatingipsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipsCreateRequest_1], args_1, true), void 0, function (floatingipsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/floatingips";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(floatingipsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.FloatingipsApiAxiosParamCreator = FloatingipsApiAxiosParamCreator;
/**
 * FloatingipsApi - functional programming interface
 * @export
 */
var FloatingipsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.FloatingipsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {number | null} [externalPort] external_port query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {FloatingipsFloatingipIdPortForwardingsGetProtocolEnum} [protocol] protocol query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [internalPortId] internal_port_id query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [description] description query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {number} [externalPortRange] external_port_range query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsFloatingipIdPortForwardingsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsGet: function (id, externalPort, protocol, internalPortId, description, externalPortRange, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdPortForwardingsGet(id, externalPort, protocol, internalPortId, description, externalPortRange, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsFloatingipIdPortForwardingsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {FloatingipsPortForwardingsCreateRequest} [floatingipsPortForwardingsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsPost: function (floatingipId, floatingipsPortForwardingsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdPortForwardingsPost(floatingipId, floatingipsPortForwardingsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsFloatingipIdPortForwardingsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsDelete: function (floatingipId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdTagsDelete(floatingipId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsFloatingipIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsFloatingipIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsFloatingipIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdDelete: function (floatingipId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdTagsIdDelete(floatingipId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsFloatingipIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdGet: function (floatingipId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdTagsIdGet(floatingipId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsFloatingipIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdPut: function (floatingipId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdTagsIdPut(floatingipId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsFloatingipIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {FloatingipsTagsUpdateAllRequest} [floatingipsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsPut: function (floatingipId, floatingipsTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdTagsPut(floatingipId, floatingipsTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsFloatingipIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/floatingips API
         * @param {string} [floatingIpAddress] floating_ip_address query parameter for /v2.0/floatingips API
         * @param {string} [floatingNetworkId] floating_network_id query parameter for /v2.0/floatingips API
         * @param {string | null} [routerId] router_id query parameter for /v2.0/floatingips API
         * @param {string | null} [portId] port_id query parameter for /v2.0/floatingips API
         * @param {string} [fixedIpAddress] fixed_ip_address query parameter for /v2.0/floatingips API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/floatingips API
         * @param {string} [status] status query parameter for /v2.0/floatingips API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/floatingips API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/floatingips API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/floatingips API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/floatingips API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/floatingips API
         * @param {string} [description] description query parameter for /v2.0/floatingips API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsGet: function (id, floatingIpAddress, floatingNetworkId, routerId, portId, fixedIpAddress, tenantId, status, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsGet(id, floatingIpAddress, floatingNetworkId, routerId, portId, fixedIpAddress, tenantId, status, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {FloatingipUpdateRequest} [floatingipUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdPut: function (id, floatingipUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsIdPut(id, floatingipUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {FloatingipsCreateRequest} [floatingipsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsPost: function (floatingipsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsPost(floatingipsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsApi.floatingipsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.FloatingipsApiFp = FloatingipsApiFp;
/**
 * FloatingipsApi - factory interface
 * @export
 */
var FloatingipsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.FloatingipsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {number | null} [externalPort] external_port query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {FloatingipsFloatingipIdPortForwardingsGetProtocolEnum} [protocol] protocol query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [internalPortId] internal_port_id query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [description] description query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {number} [externalPortRange] external_port_range query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsFloatingipIdPortForwardingsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsGet: function (id, externalPort, protocol, internalPortId, description, externalPortRange, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.floatingipsFloatingipIdPortForwardingsGet(id, externalPort, protocol, internalPortId, description, externalPortRange, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {FloatingipsPortForwardingsCreateRequest} [floatingipsPortForwardingsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsPost: function (floatingipId, floatingipsPortForwardingsCreateRequest, options) {
            return localVarFp.floatingipsFloatingipIdPortForwardingsPost(floatingipId, floatingipsPortForwardingsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsDelete: function (floatingipId, options) {
            return localVarFp.floatingipsFloatingipIdTagsDelete(floatingipId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsFloatingipIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.floatingipsFloatingipIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdDelete: function (floatingipId, id, options) {
            return localVarFp.floatingipsFloatingipIdTagsIdDelete(floatingipId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdGet: function (floatingipId, id, options) {
            return localVarFp.floatingipsFloatingipIdTagsIdGet(floatingipId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsIdPut: function (floatingipId, id, options) {
            return localVarFp.floatingipsFloatingipIdTagsIdPut(floatingipId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
         * @param {FloatingipsTagsUpdateAllRequest} [floatingipsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdTagsPut: function (floatingipId, floatingipsTagsUpdateAllRequest, options) {
            return localVarFp.floatingipsFloatingipIdTagsPut(floatingipId, floatingipsTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/floatingips API
         * @param {string} [floatingIpAddress] floating_ip_address query parameter for /v2.0/floatingips API
         * @param {string} [floatingNetworkId] floating_network_id query parameter for /v2.0/floatingips API
         * @param {string | null} [routerId] router_id query parameter for /v2.0/floatingips API
         * @param {string | null} [portId] port_id query parameter for /v2.0/floatingips API
         * @param {string} [fixedIpAddress] fixed_ip_address query parameter for /v2.0/floatingips API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/floatingips API
         * @param {string} [status] status query parameter for /v2.0/floatingips API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/floatingips API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/floatingips API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/floatingips API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/floatingips API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/floatingips API
         * @param {string} [description] description query parameter for /v2.0/floatingips API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {FloatingipsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsGet: function (id, floatingIpAddress, floatingNetworkId, routerId, portId, fixedIpAddress, tenantId, status, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.floatingipsGet(id, floatingIpAddress, floatingNetworkId, routerId, portId, fixedIpAddress, tenantId, status, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdDelete: function (id, options) {
            return localVarFp.floatingipsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdGet: function (id, options) {
            return localVarFp.floatingipsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/floatingips/{id} API
         * @param {FloatingipUpdateRequest} [floatingipUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsIdPut: function (id, floatingipUpdateRequest, options) {
            return localVarFp.floatingipsIdPut(id, floatingipUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {FloatingipsCreateRequest} [floatingipsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsPost: function (floatingipsCreateRequest, options) {
            return localVarFp.floatingipsPost(floatingipsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FloatingipsApiFactory = FloatingipsApiFactory;
/**
 * FloatingipsApi - object-oriented interface
 * @export
 * @class FloatingipsApi
 * @extends {BaseAPI}
 */
var FloatingipsApi = /** @class */ (function (_super) {
    __extends(FloatingipsApi, _super);
    function FloatingipsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
     * @param {number | null} [externalPort] external_port query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
     * @param {FloatingipsFloatingipIdPortForwardingsGetProtocolEnum} [protocol] protocol query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
     * @param {string} [internalPortId] internal_port_id query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
     * @param {string} [description] description query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
     * @param {number} [externalPortRange] external_port_range query parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {FloatingipsFloatingipIdPortForwardingsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsFloatingipIdPortForwardingsGet = function (id, externalPort, protocol, internalPortId, description, externalPortRange, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsFloatingipIdPortForwardingsGet(id, externalPort, protocol, internalPortId, description, externalPortRange, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
     * @param {FloatingipsPortForwardingsCreateRequest} [floatingipsPortForwardingsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsFloatingipIdPortForwardingsPost = function (floatingipId, floatingipsPortForwardingsCreateRequest, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsFloatingipIdPortForwardingsPost(floatingipId, floatingipsPortForwardingsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsFloatingipIdTagsDelete = function (floatingipId, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsFloatingipIdTagsDelete(floatingipId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {FloatingipsFloatingipIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsFloatingipIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsFloatingipIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsFloatingipIdTagsIdDelete = function (floatingipId, id, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsFloatingipIdTagsIdDelete(floatingipId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsFloatingipIdTagsIdGet = function (floatingipId, id, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsFloatingipIdTagsIdGet(floatingipId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsFloatingipIdTagsIdPut = function (floatingipId, id, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsFloatingipIdTagsIdPut(floatingipId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/tags/{id} API
     * @param {FloatingipsTagsUpdateAllRequest} [floatingipsTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsFloatingipIdTagsPut = function (floatingipId, floatingipsTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsFloatingipIdTagsPut(floatingipId, floatingipsTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/floatingips API
     * @param {string} [floatingIpAddress] floating_ip_address query parameter for /v2.0/floatingips API
     * @param {string} [floatingNetworkId] floating_network_id query parameter for /v2.0/floatingips API
     * @param {string | null} [routerId] router_id query parameter for /v2.0/floatingips API
     * @param {string | null} [portId] port_id query parameter for /v2.0/floatingips API
     * @param {string} [fixedIpAddress] fixed_ip_address query parameter for /v2.0/floatingips API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/floatingips API
     * @param {string} [status] status query parameter for /v2.0/floatingips API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/floatingips API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/floatingips API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/floatingips API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/floatingips API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/floatingips API
     * @param {string} [description] description query parameter for /v2.0/floatingips API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {FloatingipsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsGet = function (id, floatingIpAddress, floatingNetworkId, routerId, portId, fixedIpAddress, tenantId, status, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsGet(id, floatingIpAddress, floatingNetworkId, routerId, portId, fixedIpAddress, tenantId, status, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/floatingips/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/floatingips/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/floatingips/{id} API
     * @param {FloatingipUpdateRequest} [floatingipUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsIdPut = function (id, floatingipUpdateRequest, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsIdPut(id, floatingipUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {FloatingipsCreateRequest} [floatingipsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsApi
     */
    FloatingipsApi.prototype.floatingipsPost = function (floatingipsCreateRequest, options) {
        var _this = this;
        return (0, exports.FloatingipsApiFp)(this.configuration).floatingipsPost(floatingipsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FloatingipsApi;
}(base_1.BaseAPI));
exports.FloatingipsApi = FloatingipsApi;
/**
 * @export
 */
exports.FloatingipsFloatingipIdPortForwardingsGetProtocolEnum = {
    Dccp: 'dccp',
    Icmp: 'icmp',
    Ipv6Icmp: 'ipv6-icmp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp'
};
/**
 * @export
 */
exports.FloatingipsFloatingipIdPortForwardingsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.FloatingipsFloatingipIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.FloatingipsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * FloatingipsPortForwardingsApi - axios parameter creator
 * @export
 */
var FloatingipsPortForwardingsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdDelete: function (floatingipId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1, id_1], args_1, true), void 0, function (floatingipId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdPortForwardingsIdDelete', 'floatingipId', floatingipId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdPortForwardingsIdDelete', 'id', id);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/port_forwardings/{id}"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdGet: function (floatingipId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1, id_1], args_1, true), void 0, function (floatingipId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdPortForwardingsIdGet', 'floatingipId', floatingipId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdPortForwardingsIdGet', 'id', id);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/port_forwardings/{id}"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {FloatingipsPortForwardingUpdateRequest} [floatingipsPortForwardingUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdPut: function (floatingipId_1, id_1, floatingipsPortForwardingUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([floatingipId_1, id_1, floatingipsPortForwardingUpdateRequest_1], args_1, true), void 0, function (floatingipId, id, floatingipsPortForwardingUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'floatingipId' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdPortForwardingsIdPut', 'floatingipId', floatingipId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('floatingipsFloatingipIdPortForwardingsIdPut', 'id', id);
                            localVarPath = "/v2.0/floatingips/{floatingip_id}/port_forwardings/{id}"
                                .replace("{".concat("floatingip_id", "}"), encodeURIComponent(String(floatingipId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(floatingipsPortForwardingUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.FloatingipsPortForwardingsApiAxiosParamCreator = FloatingipsPortForwardingsApiAxiosParamCreator;
/**
 * FloatingipsPortForwardingsApi - functional programming interface
 * @export
 */
var FloatingipsPortForwardingsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.FloatingipsPortForwardingsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdDelete: function (floatingipId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdPortForwardingsIdDelete(floatingipId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsPortForwardingsApi.floatingipsFloatingipIdPortForwardingsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdGet: function (floatingipId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdPortForwardingsIdGet(floatingipId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsPortForwardingsApi.floatingipsFloatingipIdPortForwardingsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {FloatingipsPortForwardingUpdateRequest} [floatingipsPortForwardingUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdPut: function (floatingipId, id, floatingipsPortForwardingUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.floatingipsFloatingipIdPortForwardingsIdPut(floatingipId, id, floatingipsPortForwardingUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['FloatingipsPortForwardingsApi.floatingipsFloatingipIdPortForwardingsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.FloatingipsPortForwardingsApiFp = FloatingipsPortForwardingsApiFp;
/**
 * FloatingipsPortForwardingsApi - factory interface
 * @export
 */
var FloatingipsPortForwardingsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.FloatingipsPortForwardingsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdDelete: function (floatingipId, id, options) {
            return localVarFp.floatingipsFloatingipIdPortForwardingsIdDelete(floatingipId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdGet: function (floatingipId, id, options) {
            return localVarFp.floatingipsFloatingipIdPortForwardingsIdGet(floatingipId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
         * @param {FloatingipsPortForwardingUpdateRequest} [floatingipsPortForwardingUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        floatingipsFloatingipIdPortForwardingsIdPut: function (floatingipId, id, floatingipsPortForwardingUpdateRequest, options) {
            return localVarFp.floatingipsFloatingipIdPortForwardingsIdPut(floatingipId, id, floatingipsPortForwardingUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.FloatingipsPortForwardingsApiFactory = FloatingipsPortForwardingsApiFactory;
/**
 * FloatingipsPortForwardingsApi - object-oriented interface
 * @export
 * @class FloatingipsPortForwardingsApi
 * @extends {BaseAPI}
 */
var FloatingipsPortForwardingsApi = /** @class */ (function (_super) {
    __extends(FloatingipsPortForwardingsApi, _super);
    function FloatingipsPortForwardingsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
     * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsPortForwardingsApi
     */
    FloatingipsPortForwardingsApi.prototype.floatingipsFloatingipIdPortForwardingsIdDelete = function (floatingipId, id, options) {
        var _this = this;
        return (0, exports.FloatingipsPortForwardingsApiFp)(this.configuration).floatingipsFloatingipIdPortForwardingsIdDelete(floatingipId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
     * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsPortForwardingsApi
     */
    FloatingipsPortForwardingsApi.prototype.floatingipsFloatingipIdPortForwardingsIdGet = function (floatingipId, id, options) {
        var _this = this;
        return (0, exports.FloatingipsPortForwardingsApiFp)(this.configuration).floatingipsFloatingipIdPortForwardingsIdGet(floatingipId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} floatingipId floatingip_id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
     * @param {string} id id parameter for /v2.0/floatingips/{floatingip_id}/port_forwardings/{id} API
     * @param {FloatingipsPortForwardingUpdateRequest} [floatingipsPortForwardingUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FloatingipsPortForwardingsApi
     */
    FloatingipsPortForwardingsApi.prototype.floatingipsFloatingipIdPortForwardingsIdPut = function (floatingipId, id, floatingipsPortForwardingUpdateRequest, options) {
        var _this = this;
        return (0, exports.FloatingipsPortForwardingsApiFp)(this.configuration).floatingipsFloatingipIdPortForwardingsIdPut(floatingipId, id, floatingipsPortForwardingUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FloatingipsPortForwardingsApi;
}(base_1.BaseAPI));
exports.FloatingipsPortForwardingsApi = FloatingipsPortForwardingsApi;
/**
 * L3AgentSchedulerApi - axios parameter creator
 * @export
 */
var L3AgentSchedulerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsAgentIdL3RoutersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/agents/{agent_id}/l3-routers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdDelete: function (agentId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentId_1, id_1], args_1, true), void 0, function (agentId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'agentId' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdL3RoutersIdDelete', 'agentId', agentId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdL3RoutersIdDelete', 'id', id);
                            localVarPath = "/v2.0/agents/{agent_id}/l3-routers/{id}"
                                .replace("{".concat("agent_id", "}"), encodeURIComponent(String(agentId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdGet: function (agentId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentId_1, id_1], args_1, true), void 0, function (agentId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'agentId' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdL3RoutersIdGet', 'agentId', agentId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdL3RoutersIdGet', 'id', id);
                            localVarPath = "/v2.0/agents/{agent_id}/l3-routers/{id}"
                                .replace("{".concat("agent_id", "}"), encodeURIComponent(String(agentId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdPut: function (agentId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentId_1, id_1], args_1, true), void 0, function (agentId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'agentId' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdL3RoutersIdPut', 'agentId', agentId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdL3RoutersIdPut', 'id', id);
                            localVarPath = "/v2.0/agents/{agent_id}/l3-routers/{id}"
                                .replace("{".concat("agent_id", "}"), encodeURIComponent(String(agentId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {AgentsL3RoutersCreateRequest} [agentsL3RoutersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersPost: function (agentId_1, agentsL3RoutersCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentId_1, agentsL3RoutersCreateRequest_1], args_1, true), void 0, function (agentId, agentsL3RoutersCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'agentId' is not null or undefined
                            (0, common_1.assertParamExists)('agentsAgentIdL3RoutersPost', 'agentId', agentId);
                            localVarPath = "/v2.0/agents/{agent_id}/l3-routers"
                                .replace("{".concat("agent_id", "}"), encodeURIComponent(String(agentId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(agentsL3RoutersCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.L3AgentSchedulerApiAxiosParamCreator = L3AgentSchedulerApiAxiosParamCreator;
/**
 * L3AgentSchedulerApi - functional programming interface
 * @export
 */
var L3AgentSchedulerApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.L3AgentSchedulerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsAgentIdL3RoutersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdL3RoutersGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['L3AgentSchedulerApi.agentsAgentIdL3RoutersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdDelete: function (agentId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdL3RoutersIdDelete(agentId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['L3AgentSchedulerApi.agentsAgentIdL3RoutersIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdGet: function (agentId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdL3RoutersIdGet(agentId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['L3AgentSchedulerApi.agentsAgentIdL3RoutersIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdPut: function (agentId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdL3RoutersIdPut(agentId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['L3AgentSchedulerApi.agentsAgentIdL3RoutersIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {AgentsL3RoutersCreateRequest} [agentsL3RoutersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersPost: function (agentId, agentsL3RoutersCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsAgentIdL3RoutersPost(agentId, agentsL3RoutersCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['L3AgentSchedulerApi.agentsAgentIdL3RoutersPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.L3AgentSchedulerApiFp = L3AgentSchedulerApiFp;
/**
 * L3AgentSchedulerApi - factory interface
 * @export
 */
var L3AgentSchedulerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.L3AgentSchedulerApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsAgentIdL3RoutersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.agentsAgentIdL3RoutersGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdDelete: function (agentId, id, options) {
            return localVarFp.agentsAgentIdL3RoutersIdDelete(agentId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdGet: function (agentId, id, options) {
            return localVarFp.agentsAgentIdL3RoutersIdGet(agentId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersIdPut: function (agentId, id, options) {
            return localVarFp.agentsAgentIdL3RoutersIdPut(agentId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
         * @param {AgentsL3RoutersCreateRequest} [agentsL3RoutersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsAgentIdL3RoutersPost: function (agentId, agentsL3RoutersCreateRequest, options) {
            return localVarFp.agentsAgentIdL3RoutersPost(agentId, agentsL3RoutersCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.L3AgentSchedulerApiFactory = L3AgentSchedulerApiFactory;
/**
 * L3AgentSchedulerApi - object-oriented interface
 * @export
 * @class L3AgentSchedulerApi
 * @extends {BaseAPI}
 */
var L3AgentSchedulerApi = /** @class */ (function (_super) {
    __extends(L3AgentSchedulerApi, _super);
    function L3AgentSchedulerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {AgentsAgentIdL3RoutersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof L3AgentSchedulerApi
     */
    L3AgentSchedulerApi.prototype.agentsAgentIdL3RoutersGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.L3AgentSchedulerApiFp)(this.configuration).agentsAgentIdL3RoutersGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
     * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof L3AgentSchedulerApi
     */
    L3AgentSchedulerApi.prototype.agentsAgentIdL3RoutersIdDelete = function (agentId, id, options) {
        var _this = this;
        return (0, exports.L3AgentSchedulerApiFp)(this.configuration).agentsAgentIdL3RoutersIdDelete(agentId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
     * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof L3AgentSchedulerApi
     */
    L3AgentSchedulerApi.prototype.agentsAgentIdL3RoutersIdGet = function (agentId, id, options) {
        var _this = this;
        return (0, exports.L3AgentSchedulerApiFp)(this.configuration).agentsAgentIdL3RoutersIdGet(agentId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
     * @param {string} id id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof L3AgentSchedulerApi
     */
    L3AgentSchedulerApi.prototype.agentsAgentIdL3RoutersIdPut = function (agentId, id, options) {
        var _this = this;
        return (0, exports.L3AgentSchedulerApiFp)(this.configuration).agentsAgentIdL3RoutersIdPut(agentId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} agentId agent_id parameter for /v2.0/agents/{agent_id}/l3-routers/{id} API
     * @param {AgentsL3RoutersCreateRequest} [agentsL3RoutersCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof L3AgentSchedulerApi
     */
    L3AgentSchedulerApi.prototype.agentsAgentIdL3RoutersPost = function (agentId, agentsL3RoutersCreateRequest, options) {
        var _this = this;
        return (0, exports.L3AgentSchedulerApiFp)(this.configuration).agentsAgentIdL3RoutersPost(agentId, agentsL3RoutersCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return L3AgentSchedulerApi;
}(base_1.BaseAPI));
exports.L3AgentSchedulerApi = L3AgentSchedulerApi;
/**
 * @export
 */
exports.AgentsAgentIdL3RoutersGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * LocalIpsApi - axios parameter creator
 * @export
 */
var LocalIpsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/local-ips API
         * @param {string} [name] name query parameter for /v2.0/local-ips API
         * @param {string} [description] description query parameter for /v2.0/local-ips API
         * @param {string} [projectId] project_id query parameter for /v2.0/local-ips API
         * @param {string} [localPortId] local_port_id query parameter for /v2.0/local-ips API
         * @param {string} [networkId] network_id query parameter for /v2.0/local-ips API
         * @param {string} [localIpAddress] local_ip_address query parameter for /v2.0/local-ips API
         * @param {LocalIpsGetIpModeEnum} [ipMode] ip_mode query parameter for /v2.0/local-ips API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/local-ips API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LocalIpsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsGet: function (id_1, name_1, description_1, projectId_1, localPortId_1, networkId_1, localIpAddress_1, ipMode_1, revisionNumber_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 14; _i < arguments.length; _i++) {
                args_1[_i - 14] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, description_1, projectId_1, localPortId_1, networkId_1, localIpAddress_1, ipMode_1, revisionNumber_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, description, projectId, localPortId, networkId, localIpAddress, ipMode, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/local-ips";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (projectId !== undefined) {
                                localVarQueryParameter['project_id'] = projectId;
                            }
                            if (localPortId !== undefined) {
                                localVarQueryParameter['local_port_id'] = localPortId;
                            }
                            if (networkId !== undefined) {
                                localVarQueryParameter['network_id'] = networkId;
                            }
                            if (localIpAddress !== undefined) {
                                localVarQueryParameter['local_ip_address'] = localIpAddress;
                            }
                            if (ipMode !== undefined) {
                                localVarQueryParameter['ip_mode'] = ipMode;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsIdDelete', 'id', id);
                            localVarPath = "/v2.0/local-ips/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsIdGet', 'id', id);
                            localVarPath = "/v2.0/local-ips/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {LocalIpUpdateRequest} [localIpUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdPut: function (id_1, localIpUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, localIpUpdateRequest_1], args_1, true), void 0, function (id, localIpUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsIdPut', 'id', id);
                            localVarPath = "/v2.0/local-ips/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(localIpUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [localIpAddress] local_ip_address query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [fixedPortId] fixed_port_id query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [fixedIp] fixed_ip query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [host] host query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LocalIpsLocalIpIdPortAssociationsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsGet: function (localIpAddress_1, fixedPortId_1, fixedIp_1, host_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([localIpAddress_1, fixedPortId_1, fixedIp_1, host_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (localIpAddress, fixedPortId, fixedIp, host, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/local_ips/{local_ip_id}/port_associations";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (localIpAddress !== undefined) {
                                localVarQueryParameter['local_ip_address'] = localIpAddress;
                            }
                            if (fixedPortId !== undefined) {
                                localVarQueryParameter['fixed_port_id'] = fixedPortId;
                            }
                            if (fixedIp !== undefined) {
                                localVarQueryParameter['fixed_ip'] = fixedIp;
                            }
                            if (host !== undefined) {
                                localVarQueryParameter['host'] = host;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdDelete: function (localIpId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([localIpId_1, id_1], args_1, true), void 0, function (localIpId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'localIpId' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsLocalIpIdPortAssociationsIdDelete', 'localIpId', localIpId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsLocalIpIdPortAssociationsIdDelete', 'id', id);
                            localVarPath = "/v2.0/local_ips/{local_ip_id}/port_associations/{id}"
                                .replace("{".concat("local_ip_id", "}"), encodeURIComponent(String(localIpId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdGet: function (localIpId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([localIpId_1, id_1], args_1, true), void 0, function (localIpId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'localIpId' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsLocalIpIdPortAssociationsIdGet', 'localIpId', localIpId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsLocalIpIdPortAssociationsIdGet', 'id', id);
                            localVarPath = "/v2.0/local_ips/{local_ip_id}/port_associations/{id}"
                                .replace("{".concat("local_ip_id", "}"), encodeURIComponent(String(localIpId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {LocalIpsPortAssociationUpdateRequest} [localIpsPortAssociationUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdPut: function (localIpId_1, id_1, localIpsPortAssociationUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([localIpId_1, id_1, localIpsPortAssociationUpdateRequest_1], args_1, true), void 0, function (localIpId, id, localIpsPortAssociationUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'localIpId' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsLocalIpIdPortAssociationsIdPut', 'localIpId', localIpId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsLocalIpIdPortAssociationsIdPut', 'id', id);
                            localVarPath = "/v2.0/local_ips/{local_ip_id}/port_associations/{id}"
                                .replace("{".concat("local_ip_id", "}"), encodeURIComponent(String(localIpId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(localIpsPortAssociationUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {LocalIpsPortAssociationsCreateRequest} [localIpsPortAssociationsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsPost: function (localIpId_1, localIpsPortAssociationsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([localIpId_1, localIpsPortAssociationsCreateRequest_1], args_1, true), void 0, function (localIpId, localIpsPortAssociationsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'localIpId' is not null or undefined
                            (0, common_1.assertParamExists)('localIpsLocalIpIdPortAssociationsPost', 'localIpId', localIpId);
                            localVarPath = "/v2.0/local_ips/{local_ip_id}/port_associations"
                                .replace("{".concat("local_ip_id", "}"), encodeURIComponent(String(localIpId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(localIpsPortAssociationsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {LocalIpsCreateRequest} [localIpsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsPost: function (localIpsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([localIpsCreateRequest_1], args_1, true), void 0, function (localIpsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/local-ips";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(localIpsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LocalIpsApiAxiosParamCreator = LocalIpsApiAxiosParamCreator;
/**
 * LocalIpsApi - functional programming interface
 * @export
 */
var LocalIpsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LocalIpsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/local-ips API
         * @param {string} [name] name query parameter for /v2.0/local-ips API
         * @param {string} [description] description query parameter for /v2.0/local-ips API
         * @param {string} [projectId] project_id query parameter for /v2.0/local-ips API
         * @param {string} [localPortId] local_port_id query parameter for /v2.0/local-ips API
         * @param {string} [networkId] network_id query parameter for /v2.0/local-ips API
         * @param {string} [localIpAddress] local_ip_address query parameter for /v2.0/local-ips API
         * @param {LocalIpsGetIpModeEnum} [ipMode] ip_mode query parameter for /v2.0/local-ips API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/local-ips API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LocalIpsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsGet: function (id, name, description, projectId, localPortId, networkId, localIpAddress, ipMode, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsGet(id, name, description, projectId, localPortId, networkId, localIpAddress, ipMode, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {LocalIpUpdateRequest} [localIpUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdPut: function (id, localIpUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsIdPut(id, localIpUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [localIpAddress] local_ip_address query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [fixedPortId] fixed_port_id query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [fixedIp] fixed_ip query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [host] host query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LocalIpsLocalIpIdPortAssociationsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsGet: function (localIpAddress, fixedPortId, fixedIp, host, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsLocalIpIdPortAssociationsGet(localIpAddress, fixedPortId, fixedIp, host, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsLocalIpIdPortAssociationsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdDelete: function (localIpId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsLocalIpIdPortAssociationsIdDelete(localIpId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsLocalIpIdPortAssociationsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdGet: function (localIpId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsLocalIpIdPortAssociationsIdGet(localIpId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsLocalIpIdPortAssociationsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {LocalIpsPortAssociationUpdateRequest} [localIpsPortAssociationUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdPut: function (localIpId, id, localIpsPortAssociationUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsLocalIpIdPortAssociationsIdPut(localIpId, id, localIpsPortAssociationUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsLocalIpIdPortAssociationsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {LocalIpsPortAssociationsCreateRequest} [localIpsPortAssociationsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsPost: function (localIpId, localIpsPortAssociationsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsLocalIpIdPortAssociationsPost(localIpId, localIpsPortAssociationsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsLocalIpIdPortAssociationsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {LocalIpsCreateRequest} [localIpsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsPost: function (localIpsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.localIpsPost(localIpsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LocalIpsApi.localIpsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.LocalIpsApiFp = LocalIpsApiFp;
/**
 * LocalIpsApi - factory interface
 * @export
 */
var LocalIpsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LocalIpsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/local-ips API
         * @param {string} [name] name query parameter for /v2.0/local-ips API
         * @param {string} [description] description query parameter for /v2.0/local-ips API
         * @param {string} [projectId] project_id query parameter for /v2.0/local-ips API
         * @param {string} [localPortId] local_port_id query parameter for /v2.0/local-ips API
         * @param {string} [networkId] network_id query parameter for /v2.0/local-ips API
         * @param {string} [localIpAddress] local_ip_address query parameter for /v2.0/local-ips API
         * @param {LocalIpsGetIpModeEnum} [ipMode] ip_mode query parameter for /v2.0/local-ips API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/local-ips API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LocalIpsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsGet: function (id, name, description, projectId, localPortId, networkId, localIpAddress, ipMode, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.localIpsGet(id, name, description, projectId, localPortId, networkId, localIpAddress, ipMode, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdDelete: function (id, options) {
            return localVarFp.localIpsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdGet: function (id, options) {
            return localVarFp.localIpsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/local-ips/{id} API
         * @param {LocalIpUpdateRequest} [localIpUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsIdPut: function (id, localIpUpdateRequest, options) {
            return localVarFp.localIpsIdPut(id, localIpUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [localIpAddress] local_ip_address query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [fixedPortId] fixed_port_id query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [fixedIp] fixed_ip query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [host] host query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LocalIpsLocalIpIdPortAssociationsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsGet: function (localIpAddress, fixedPortId, fixedIp, host, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.localIpsLocalIpIdPortAssociationsGet(localIpAddress, fixedPortId, fixedIp, host, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdDelete: function (localIpId, id, options) {
            return localVarFp.localIpsLocalIpIdPortAssociationsIdDelete(localIpId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdGet: function (localIpId, id, options) {
            return localVarFp.localIpsLocalIpIdPortAssociationsIdGet(localIpId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {LocalIpsPortAssociationUpdateRequest} [localIpsPortAssociationUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsIdPut: function (localIpId, id, localIpsPortAssociationUpdateRequest, options) {
            return localVarFp.localIpsLocalIpIdPortAssociationsIdPut(localIpId, id, localIpsPortAssociationUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
         * @param {LocalIpsPortAssociationsCreateRequest} [localIpsPortAssociationsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsLocalIpIdPortAssociationsPost: function (localIpId, localIpsPortAssociationsCreateRequest, options) {
            return localVarFp.localIpsLocalIpIdPortAssociationsPost(localIpId, localIpsPortAssociationsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {LocalIpsCreateRequest} [localIpsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        localIpsPost: function (localIpsCreateRequest, options) {
            return localVarFp.localIpsPost(localIpsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LocalIpsApiFactory = LocalIpsApiFactory;
/**
 * LocalIpsApi - object-oriented interface
 * @export
 * @class LocalIpsApi
 * @extends {BaseAPI}
 */
var LocalIpsApi = /** @class */ (function (_super) {
    __extends(LocalIpsApi, _super);
    function LocalIpsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/local-ips API
     * @param {string} [name] name query parameter for /v2.0/local-ips API
     * @param {string} [description] description query parameter for /v2.0/local-ips API
     * @param {string} [projectId] project_id query parameter for /v2.0/local-ips API
     * @param {string} [localPortId] local_port_id query parameter for /v2.0/local-ips API
     * @param {string} [networkId] network_id query parameter for /v2.0/local-ips API
     * @param {string} [localIpAddress] local_ip_address query parameter for /v2.0/local-ips API
     * @param {LocalIpsGetIpModeEnum} [ipMode] ip_mode query parameter for /v2.0/local-ips API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/local-ips API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {LocalIpsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsGet = function (id, name, description, projectId, localPortId, networkId, localIpAddress, ipMode, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsGet(id, name, description, projectId, localPortId, networkId, localIpAddress, ipMode, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/local-ips/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/local-ips/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/local-ips/{id} API
     * @param {LocalIpUpdateRequest} [localIpUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsIdPut = function (id, localIpUpdateRequest, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsIdPut(id, localIpUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [localIpAddress] local_ip_address query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
     * @param {string} [fixedPortId] fixed_port_id query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
     * @param {string} [fixedIp] fixed_ip query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
     * @param {string} [host] host query parameter for /v2.0/local_ips/{local_ip_id}/port_associations API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {LocalIpsLocalIpIdPortAssociationsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsLocalIpIdPortAssociationsGet = function (localIpAddress, fixedPortId, fixedIp, host, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsLocalIpIdPortAssociationsGet(localIpAddress, fixedPortId, fixedIp, host, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
     * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsLocalIpIdPortAssociationsIdDelete = function (localIpId, id, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsLocalIpIdPortAssociationsIdDelete(localIpId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
     * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsLocalIpIdPortAssociationsIdGet = function (localIpId, id, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsLocalIpIdPortAssociationsIdGet(localIpId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
     * @param {string} id id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
     * @param {LocalIpsPortAssociationUpdateRequest} [localIpsPortAssociationUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsLocalIpIdPortAssociationsIdPut = function (localIpId, id, localIpsPortAssociationUpdateRequest, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsLocalIpIdPortAssociationsIdPut(localIpId, id, localIpsPortAssociationUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} localIpId local_ip_id parameter for /v2.0/local_ips/{local_ip_id}/port_associations/{id} API
     * @param {LocalIpsPortAssociationsCreateRequest} [localIpsPortAssociationsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsLocalIpIdPortAssociationsPost = function (localIpId, localIpsPortAssociationsCreateRequest, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsLocalIpIdPortAssociationsPost(localIpId, localIpsPortAssociationsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {LocalIpsCreateRequest} [localIpsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocalIpsApi
     */
    LocalIpsApi.prototype.localIpsPost = function (localIpsCreateRequest, options) {
        var _this = this;
        return (0, exports.LocalIpsApiFp)(this.configuration).localIpsPost(localIpsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LocalIpsApi;
}(base_1.BaseAPI));
exports.LocalIpsApi = LocalIpsApi;
/**
 * @export
 */
exports.LocalIpsGetIpModeEnum = {
    Translate: 'translate',
    Passthrough: 'passthrough'
};
/**
 * @export
 */
exports.LocalIpsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.LocalIpsLocalIpIdPortAssociationsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * LogApi - axios parameter creator
 * @export
 */
var LogApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LogLoggableResourcesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/log/loggable-resources";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('logLoggableResourcesIdDelete', 'id', id);
                            localVarPath = "/v2.0/log/loggable-resources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('logLoggableResourcesIdGet', 'id', id);
                            localVarPath = "/v2.0/log/loggable-resources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {LogLoggableResourceUpdateRequest} [logLoggableResourceUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdPut: function (id_1, logLoggableResourceUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, logLoggableResourceUpdateRequest_1], args_1, true), void 0, function (id, logLoggableResourceUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('logLoggableResourcesIdPut', 'id', id);
                            localVarPath = "/v2.0/log/loggable-resources/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logLoggableResourceUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {LogLoggableResourcesCreateRequest} [logLoggableResourcesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesPost: function (logLoggableResourcesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([logLoggableResourcesCreateRequest_1], args_1, true), void 0, function (logLoggableResourcesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/log/loggable-resources";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logLoggableResourcesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/log/logs API
         * @param {string} [projectId] project_id query parameter for /v2.0/log/logs API
         * @param {string} [name] name query parameter for /v2.0/log/logs API
         * @param {string} [resourceType] resource_type query parameter for /v2.0/log/logs API
         * @param {string | null} [resourceId] resource_id query parameter for /v2.0/log/logs API
         * @param {LogLogsGetEventEnum} [event] event query parameter for /v2.0/log/logs API
         * @param {string | null} [targetId] target_id query parameter for /v2.0/log/logs API
         * @param {string | boolean} [enabled] enabled query parameter for /v2.0/log/logs API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/log/logs API
         * @param {string} [description] description query parameter for /v2.0/log/logs API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LogLogsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsGet: function (id_1, projectId_1, name_1, resourceType_1, resourceId_1, event_1, targetId_1, enabled_1, revisionNumber_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 15; _i < arguments.length; _i++) {
                args_1[_i - 15] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, projectId_1, name_1, resourceType_1, resourceId_1, event_1, targetId_1, enabled_1, revisionNumber_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, projectId, name, resourceType, resourceId, event, targetId, enabled, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/log/logs";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (projectId !== undefined) {
                                localVarQueryParameter['project_id'] = projectId;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (resourceType !== undefined) {
                                localVarQueryParameter['resource_type'] = resourceType;
                            }
                            if (resourceId !== undefined) {
                                localVarQueryParameter['resource_id'] = resourceId;
                            }
                            if (event !== undefined) {
                                localVarQueryParameter['event'] = event;
                            }
                            if (targetId !== undefined) {
                                localVarQueryParameter['target_id'] = targetId;
                            }
                            if (enabled !== undefined) {
                                for (_a = 0, _b = Object.entries(enabled); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('logLogsIdDelete', 'id', id);
                            localVarPath = "/v2.0/log/logs/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('logLogsIdGet', 'id', id);
                            localVarPath = "/v2.0/log/logs/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {LogLogUpdateRequest} [logLogUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdPut: function (id_1, logLogUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, logLogUpdateRequest_1], args_1, true), void 0, function (id, logLogUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('logLogsIdPut', 'id', id);
                            localVarPath = "/v2.0/log/logs/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logLogUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {LogLogsCreateRequest} [logLogsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsPost: function (logLogsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([logLogsCreateRequest_1], args_1, true), void 0, function (logLogsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/log/logs";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(logLogsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LogApiAxiosParamCreator = LogApiAxiosParamCreator;
/**
 * LogApi - functional programming interface
 * @export
 */
var LogApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LogApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LogLoggableResourcesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLoggableResourcesGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLoggableResourcesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLoggableResourcesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLoggableResourcesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLoggableResourcesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLoggableResourcesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {LogLoggableResourceUpdateRequest} [logLoggableResourceUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdPut: function (id, logLoggableResourceUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLoggableResourcesIdPut(id, logLoggableResourceUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLoggableResourcesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {LogLoggableResourcesCreateRequest} [logLoggableResourcesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesPost: function (logLoggableResourcesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLoggableResourcesPost(logLoggableResourcesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLoggableResourcesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/log/logs API
         * @param {string} [projectId] project_id query parameter for /v2.0/log/logs API
         * @param {string} [name] name query parameter for /v2.0/log/logs API
         * @param {string} [resourceType] resource_type query parameter for /v2.0/log/logs API
         * @param {string | null} [resourceId] resource_id query parameter for /v2.0/log/logs API
         * @param {LogLogsGetEventEnum} [event] event query parameter for /v2.0/log/logs API
         * @param {string | null} [targetId] target_id query parameter for /v2.0/log/logs API
         * @param {string | boolean} [enabled] enabled query parameter for /v2.0/log/logs API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/log/logs API
         * @param {string} [description] description query parameter for /v2.0/log/logs API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LogLogsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsGet: function (id, projectId, name, resourceType, resourceId, event, targetId, enabled, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLogsGet(id, projectId, name, resourceType, resourceId, event, targetId, enabled, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLogsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLogsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLogsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLogsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLogsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {LogLogUpdateRequest} [logLogUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdPut: function (id, logLogUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLogsIdPut(id, logLogUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLogsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {LogLogsCreateRequest} [logLogsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsPost: function (logLogsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.logLogsPost(logLogsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LogApi.logLogsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.LogApiFp = LogApiFp;
/**
 * LogApi - factory interface
 * @export
 */
var LogApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LogApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LogLoggableResourcesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.logLoggableResourcesGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdDelete: function (id, options) {
            return localVarFp.logLoggableResourcesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdGet: function (id, options) {
            return localVarFp.logLoggableResourcesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
         * @param {LogLoggableResourceUpdateRequest} [logLoggableResourceUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesIdPut: function (id, logLoggableResourceUpdateRequest, options) {
            return localVarFp.logLoggableResourcesIdPut(id, logLoggableResourceUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {LogLoggableResourcesCreateRequest} [logLoggableResourcesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLoggableResourcesPost: function (logLoggableResourcesCreateRequest, options) {
            return localVarFp.logLoggableResourcesPost(logLoggableResourcesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/log/logs API
         * @param {string} [projectId] project_id query parameter for /v2.0/log/logs API
         * @param {string} [name] name query parameter for /v2.0/log/logs API
         * @param {string} [resourceType] resource_type query parameter for /v2.0/log/logs API
         * @param {string | null} [resourceId] resource_id query parameter for /v2.0/log/logs API
         * @param {LogLogsGetEventEnum} [event] event query parameter for /v2.0/log/logs API
         * @param {string | null} [targetId] target_id query parameter for /v2.0/log/logs API
         * @param {string | boolean} [enabled] enabled query parameter for /v2.0/log/logs API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/log/logs API
         * @param {string} [description] description query parameter for /v2.0/log/logs API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {LogLogsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsGet: function (id, projectId, name, resourceType, resourceId, event, targetId, enabled, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.logLogsGet(id, projectId, name, resourceType, resourceId, event, targetId, enabled, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdDelete: function (id, options) {
            return localVarFp.logLogsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdGet: function (id, options) {
            return localVarFp.logLogsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/log/logs/{id} API
         * @param {LogLogUpdateRequest} [logLogUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsIdPut: function (id, logLogUpdateRequest, options) {
            return localVarFp.logLogsIdPut(id, logLogUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {LogLogsCreateRequest} [logLogsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logLogsPost: function (logLogsCreateRequest, options) {
            return localVarFp.logLogsPost(logLogsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LogApiFactory = LogApiFactory;
/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
var LogApi = /** @class */ (function (_super) {
    __extends(LogApi, _super);
    function LogApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {LogLoggableResourcesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLoggableResourcesGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLoggableResourcesGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLoggableResourcesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLoggableResourcesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLoggableResourcesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLoggableResourcesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/log/loggable-resources/{id} API
     * @param {LogLoggableResourceUpdateRequest} [logLoggableResourceUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLoggableResourcesIdPut = function (id, logLoggableResourceUpdateRequest, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLoggableResourcesIdPut(id, logLoggableResourceUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {LogLoggableResourcesCreateRequest} [logLoggableResourcesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLoggableResourcesPost = function (logLoggableResourcesCreateRequest, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLoggableResourcesPost(logLoggableResourcesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/log/logs API
     * @param {string} [projectId] project_id query parameter for /v2.0/log/logs API
     * @param {string} [name] name query parameter for /v2.0/log/logs API
     * @param {string} [resourceType] resource_type query parameter for /v2.0/log/logs API
     * @param {string | null} [resourceId] resource_id query parameter for /v2.0/log/logs API
     * @param {LogLogsGetEventEnum} [event] event query parameter for /v2.0/log/logs API
     * @param {string | null} [targetId] target_id query parameter for /v2.0/log/logs API
     * @param {string | boolean} [enabled] enabled query parameter for /v2.0/log/logs API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/log/logs API
     * @param {string} [description] description query parameter for /v2.0/log/logs API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {LogLogsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLogsGet = function (id, projectId, name, resourceType, resourceId, event, targetId, enabled, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLogsGet(id, projectId, name, resourceType, resourceId, event, targetId, enabled, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/log/logs/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLogsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLogsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/log/logs/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLogsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLogsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/log/logs/{id} API
     * @param {LogLogUpdateRequest} [logLogUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLogsIdPut = function (id, logLogUpdateRequest, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLogsIdPut(id, logLogUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {LogLogsCreateRequest} [logLogsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    LogApi.prototype.logLogsPost = function (logLogsCreateRequest, options) {
        var _this = this;
        return (0, exports.LogApiFp)(this.configuration).logLogsPost(logLogsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LogApi;
}(base_1.BaseAPI));
exports.LogApi = LogApi;
/**
 * @export
 */
exports.LogLoggableResourcesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.LogLogsGetEventEnum = {
    Accept: 'ACCEPT',
    Drop: 'DROP',
    All: 'ALL'
};
/**
 * @export
 */
exports.LogLogsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * MeteringApi - axios parameter creator
 * @export
 */
var MeteringApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [meteringLabelId] metering_label_id query parameter for /v2.0/metering/metering-label-rules API
         * @param {MeteringMeteringLabelRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/metering/metering-label-rules API
         * @param {string | boolean} [excluded] excluded query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [sourceIpPrefix] source_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [destinationIpPrefix] destination_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {MeteringMeteringLabelRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesGet: function (id_1, meteringLabelId_1, direction_1, excluded_1, remoteIpPrefix_1, sourceIpPrefix_1, destinationIpPrefix_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 12; _i < arguments.length; _i++) {
                args_1[_i - 12] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, meteringLabelId_1, direction_1, excluded_1, remoteIpPrefix_1, sourceIpPrefix_1, destinationIpPrefix_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, meteringLabelId, direction, excluded, remoteIpPrefix, sourceIpPrefix, destinationIpPrefix, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/metering/metering-label-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (meteringLabelId !== undefined) {
                                localVarQueryParameter['metering_label_id'] = meteringLabelId;
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (excluded !== undefined) {
                                for (_a = 0, _b = Object.entries(excluded); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (remoteIpPrefix !== undefined) {
                                localVarQueryParameter['remote_ip_prefix'] = remoteIpPrefix;
                            }
                            if (sourceIpPrefix !== undefined) {
                                localVarQueryParameter['source_ip_prefix'] = sourceIpPrefix;
                            }
                            if (destinationIpPrefix !== undefined) {
                                localVarQueryParameter['destination_ip_prefix'] = destinationIpPrefix;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('meteringMeteringLabelRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/metering/metering-label-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('meteringMeteringLabelRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/metering/metering-label-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {MeteringMeteringLabelRuleUpdateRequest} [meteringMeteringLabelRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdPut: function (id_1, meteringMeteringLabelRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, meteringMeteringLabelRuleUpdateRequest_1], args_1, true), void 0, function (id, meteringMeteringLabelRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('meteringMeteringLabelRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/metering/metering-label-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(meteringMeteringLabelRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {MeteringMeteringLabelRulesCreateRequest} [meteringMeteringLabelRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesPost: function (meteringMeteringLabelRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([meteringMeteringLabelRulesCreateRequest_1], args_1, true), void 0, function (meteringMeteringLabelRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/metering/metering-label-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(meteringMeteringLabelRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/metering/metering-labels API
         * @param {string} [name] name query parameter for /v2.0/metering/metering-labels API
         * @param {string} [description] description query parameter for /v2.0/metering/metering-labels API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/metering/metering-labels API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/metering/metering-labels API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {MeteringMeteringLabelsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsGet: function (id_1, name_1, description_1, tenantId_1, shared_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 10; _i < arguments.length; _i++) {
                args_1[_i - 10] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, description_1, tenantId_1, shared_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, description, tenantId, shared, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/metering/metering-labels";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (shared !== undefined) {
                                for (_a = 0, _b = Object.entries(shared); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('meteringMeteringLabelsIdDelete', 'id', id);
                            localVarPath = "/v2.0/metering/metering-labels/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('meteringMeteringLabelsIdGet', 'id', id);
                            localVarPath = "/v2.0/metering/metering-labels/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {MeteringMeteringLabelUpdateRequest} [meteringMeteringLabelUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdPut: function (id_1, meteringMeteringLabelUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, meteringMeteringLabelUpdateRequest_1], args_1, true), void 0, function (id, meteringMeteringLabelUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('meteringMeteringLabelsIdPut', 'id', id);
                            localVarPath = "/v2.0/metering/metering-labels/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(meteringMeteringLabelUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {MeteringMeteringLabelsCreateRequest} [meteringMeteringLabelsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsPost: function (meteringMeteringLabelsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([meteringMeteringLabelsCreateRequest_1], args_1, true), void 0, function (meteringMeteringLabelsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/metering/metering-labels";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(meteringMeteringLabelsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.MeteringApiAxiosParamCreator = MeteringApiAxiosParamCreator;
/**
 * MeteringApi - functional programming interface
 * @export
 */
var MeteringApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MeteringApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [meteringLabelId] metering_label_id query parameter for /v2.0/metering/metering-label-rules API
         * @param {MeteringMeteringLabelRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/metering/metering-label-rules API
         * @param {string | boolean} [excluded] excluded query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [sourceIpPrefix] source_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [destinationIpPrefix] destination_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {MeteringMeteringLabelRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesGet: function (id, meteringLabelId, direction, excluded, remoteIpPrefix, sourceIpPrefix, destinationIpPrefix, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelRulesGet(id, meteringLabelId, direction, excluded, remoteIpPrefix, sourceIpPrefix, destinationIpPrefix, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelRulesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelRulesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {MeteringMeteringLabelRuleUpdateRequest} [meteringMeteringLabelRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdPut: function (id, meteringMeteringLabelRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelRulesIdPut(id, meteringMeteringLabelRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {MeteringMeteringLabelRulesCreateRequest} [meteringMeteringLabelRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesPost: function (meteringMeteringLabelRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelRulesPost(meteringMeteringLabelRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/metering/metering-labels API
         * @param {string} [name] name query parameter for /v2.0/metering/metering-labels API
         * @param {string} [description] description query parameter for /v2.0/metering/metering-labels API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/metering/metering-labels API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/metering/metering-labels API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {MeteringMeteringLabelsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsGet: function (id, name, description, tenantId, shared, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelsGet(id, name, description, tenantId, shared, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {MeteringMeteringLabelUpdateRequest} [meteringMeteringLabelUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdPut: function (id, meteringMeteringLabelUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelsIdPut(id, meteringMeteringLabelUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {MeteringMeteringLabelsCreateRequest} [meteringMeteringLabelsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsPost: function (meteringMeteringLabelsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.meteringMeteringLabelsPost(meteringMeteringLabelsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['MeteringApi.meteringMeteringLabelsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.MeteringApiFp = MeteringApiFp;
/**
 * MeteringApi - factory interface
 * @export
 */
var MeteringApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MeteringApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [meteringLabelId] metering_label_id query parameter for /v2.0/metering/metering-label-rules API
         * @param {MeteringMeteringLabelRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/metering/metering-label-rules API
         * @param {string | boolean} [excluded] excluded query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [sourceIpPrefix] source_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [destinationIpPrefix] destination_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {MeteringMeteringLabelRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesGet: function (id, meteringLabelId, direction, excluded, remoteIpPrefix, sourceIpPrefix, destinationIpPrefix, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.meteringMeteringLabelRulesGet(id, meteringLabelId, direction, excluded, remoteIpPrefix, sourceIpPrefix, destinationIpPrefix, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdDelete: function (id, options) {
            return localVarFp.meteringMeteringLabelRulesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdGet: function (id, options) {
            return localVarFp.meteringMeteringLabelRulesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
         * @param {MeteringMeteringLabelRuleUpdateRequest} [meteringMeteringLabelRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesIdPut: function (id, meteringMeteringLabelRuleUpdateRequest, options) {
            return localVarFp.meteringMeteringLabelRulesIdPut(id, meteringMeteringLabelRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {MeteringMeteringLabelRulesCreateRequest} [meteringMeteringLabelRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelRulesPost: function (meteringMeteringLabelRulesCreateRequest, options) {
            return localVarFp.meteringMeteringLabelRulesPost(meteringMeteringLabelRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/metering/metering-labels API
         * @param {string} [name] name query parameter for /v2.0/metering/metering-labels API
         * @param {string} [description] description query parameter for /v2.0/metering/metering-labels API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/metering/metering-labels API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/metering/metering-labels API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {MeteringMeteringLabelsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsGet: function (id, name, description, tenantId, shared, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.meteringMeteringLabelsGet(id, name, description, tenantId, shared, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdDelete: function (id, options) {
            return localVarFp.meteringMeteringLabelsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdGet: function (id, options) {
            return localVarFp.meteringMeteringLabelsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
         * @param {MeteringMeteringLabelUpdateRequest} [meteringMeteringLabelUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsIdPut: function (id, meteringMeteringLabelUpdateRequest, options) {
            return localVarFp.meteringMeteringLabelsIdPut(id, meteringMeteringLabelUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {MeteringMeteringLabelsCreateRequest} [meteringMeteringLabelsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meteringMeteringLabelsPost: function (meteringMeteringLabelsCreateRequest, options) {
            return localVarFp.meteringMeteringLabelsPost(meteringMeteringLabelsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MeteringApiFactory = MeteringApiFactory;
/**
 * MeteringApi - object-oriented interface
 * @export
 * @class MeteringApi
 * @extends {BaseAPI}
 */
var MeteringApi = /** @class */ (function (_super) {
    __extends(MeteringApi, _super);
    function MeteringApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/metering/metering-label-rules API
     * @param {string} [meteringLabelId] metering_label_id query parameter for /v2.0/metering/metering-label-rules API
     * @param {MeteringMeteringLabelRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/metering/metering-label-rules API
     * @param {string | boolean} [excluded] excluded query parameter for /v2.0/metering/metering-label-rules API
     * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
     * @param {string} [sourceIpPrefix] source_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
     * @param {string} [destinationIpPrefix] destination_ip_prefix query parameter for /v2.0/metering/metering-label-rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {MeteringMeteringLabelRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelRulesGet = function (id, meteringLabelId, direction, excluded, remoteIpPrefix, sourceIpPrefix, destinationIpPrefix, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelRulesGet(id, meteringLabelId, direction, excluded, remoteIpPrefix, sourceIpPrefix, destinationIpPrefix, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelRulesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelRulesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelRulesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelRulesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/metering/metering-label-rules/{id} API
     * @param {MeteringMeteringLabelRuleUpdateRequest} [meteringMeteringLabelRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelRulesIdPut = function (id, meteringMeteringLabelRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelRulesIdPut(id, meteringMeteringLabelRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {MeteringMeteringLabelRulesCreateRequest} [meteringMeteringLabelRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelRulesPost = function (meteringMeteringLabelRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelRulesPost(meteringMeteringLabelRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/metering/metering-labels API
     * @param {string} [name] name query parameter for /v2.0/metering/metering-labels API
     * @param {string} [description] description query parameter for /v2.0/metering/metering-labels API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/metering/metering-labels API
     * @param {string | boolean} [shared] shared query parameter for /v2.0/metering/metering-labels API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {MeteringMeteringLabelsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelsGet = function (id, name, description, tenantId, shared, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelsGet(id, name, description, tenantId, shared, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/metering/metering-labels/{id} API
     * @param {MeteringMeteringLabelUpdateRequest} [meteringMeteringLabelUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelsIdPut = function (id, meteringMeteringLabelUpdateRequest, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelsIdPut(id, meteringMeteringLabelUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {MeteringMeteringLabelsCreateRequest} [meteringMeteringLabelsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MeteringApi
     */
    MeteringApi.prototype.meteringMeteringLabelsPost = function (meteringMeteringLabelsCreateRequest, options) {
        var _this = this;
        return (0, exports.MeteringApiFp)(this.configuration).meteringMeteringLabelsPost(meteringMeteringLabelsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MeteringApi;
}(base_1.BaseAPI));
exports.MeteringApi = MeteringApi;
/**
 * @export
 */
exports.MeteringMeteringLabelRulesGetDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.MeteringMeteringLabelRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.MeteringMeteringLabelsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * NdpProxiesApi - axios parameter creator
 * @export
 */
var NdpProxiesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [name] name query parameter for /v2.0/ndp-proxies API
         * @param {string} [description] description query parameter for /v2.0/ndp-proxies API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/ndp-proxies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NdpProxiesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesGet: function (name_1, description_1, revisionNumber_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([name_1, description_1, revisionNumber_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (name, description, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/ndp-proxies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('ndpProxiesIdDelete', 'id', id);
                            localVarPath = "/v2.0/ndp-proxies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('ndpProxiesIdGet', 'id', id);
                            localVarPath = "/v2.0/ndp-proxies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {NdpProxyUpdateRequest} [ndpProxyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdPut: function (id_1, ndpProxyUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, ndpProxyUpdateRequest_1], args_1, true), void 0, function (id, ndpProxyUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('ndpProxiesIdPut', 'id', id);
                            localVarPath = "/v2.0/ndp-proxies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ndpProxyUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {NdpProxiesCreateRequest} [ndpProxiesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesPost: function (ndpProxiesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([ndpProxiesCreateRequest_1], args_1, true), void 0, function (ndpProxiesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/ndp-proxies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(ndpProxiesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.NdpProxiesApiAxiosParamCreator = NdpProxiesApiAxiosParamCreator;
/**
 * NdpProxiesApi - functional programming interface
 * @export
 */
var NdpProxiesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NdpProxiesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [name] name query parameter for /v2.0/ndp-proxies API
         * @param {string} [description] description query parameter for /v2.0/ndp-proxies API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/ndp-proxies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NdpProxiesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesGet: function (name, description, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ndpProxiesGet(name, description, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NdpProxiesApi.ndpProxiesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ndpProxiesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NdpProxiesApi.ndpProxiesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ndpProxiesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NdpProxiesApi.ndpProxiesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {NdpProxyUpdateRequest} [ndpProxyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdPut: function (id, ndpProxyUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ndpProxiesIdPut(id, ndpProxyUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NdpProxiesApi.ndpProxiesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {NdpProxiesCreateRequest} [ndpProxiesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesPost: function (ndpProxiesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ndpProxiesPost(ndpProxiesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NdpProxiesApi.ndpProxiesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.NdpProxiesApiFp = NdpProxiesApiFp;
/**
 * NdpProxiesApi - factory interface
 * @export
 */
var NdpProxiesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NdpProxiesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [name] name query parameter for /v2.0/ndp-proxies API
         * @param {string} [description] description query parameter for /v2.0/ndp-proxies API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/ndp-proxies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NdpProxiesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesGet: function (name, description, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.ndpProxiesGet(name, description, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdDelete: function (id, options) {
            return localVarFp.ndpProxiesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdGet: function (id, options) {
            return localVarFp.ndpProxiesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
         * @param {NdpProxyUpdateRequest} [ndpProxyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesIdPut: function (id, ndpProxyUpdateRequest, options) {
            return localVarFp.ndpProxiesIdPut(id, ndpProxyUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {NdpProxiesCreateRequest} [ndpProxiesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ndpProxiesPost: function (ndpProxiesCreateRequest, options) {
            return localVarFp.ndpProxiesPost(ndpProxiesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NdpProxiesApiFactory = NdpProxiesApiFactory;
/**
 * NdpProxiesApi - object-oriented interface
 * @export
 * @class NdpProxiesApi
 * @extends {BaseAPI}
 */
var NdpProxiesApi = /** @class */ (function (_super) {
    __extends(NdpProxiesApi, _super);
    function NdpProxiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [name] name query parameter for /v2.0/ndp-proxies API
     * @param {string} [description] description query parameter for /v2.0/ndp-proxies API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/ndp-proxies API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {NdpProxiesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdpProxiesApi
     */
    NdpProxiesApi.prototype.ndpProxiesGet = function (name, description, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.NdpProxiesApiFp)(this.configuration).ndpProxiesGet(name, description, revisionNumber, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdpProxiesApi
     */
    NdpProxiesApi.prototype.ndpProxiesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.NdpProxiesApiFp)(this.configuration).ndpProxiesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdpProxiesApi
     */
    NdpProxiesApi.prototype.ndpProxiesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.NdpProxiesApiFp)(this.configuration).ndpProxiesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/ndp-proxies/{id} API
     * @param {NdpProxyUpdateRequest} [ndpProxyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdpProxiesApi
     */
    NdpProxiesApi.prototype.ndpProxiesIdPut = function (id, ndpProxyUpdateRequest, options) {
        var _this = this;
        return (0, exports.NdpProxiesApiFp)(this.configuration).ndpProxiesIdPut(id, ndpProxyUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {NdpProxiesCreateRequest} [ndpProxiesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NdpProxiesApi
     */
    NdpProxiesApi.prototype.ndpProxiesPost = function (ndpProxiesCreateRequest, options) {
        var _this = this;
        return (0, exports.NdpProxiesApiFp)(this.configuration).ndpProxiesPost(ndpProxiesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NdpProxiesApi;
}(base_1.BaseAPI));
exports.NdpProxiesApi = NdpProxiesApi;
/**
 * @export
 */
exports.NdpProxiesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * NetworkIpAvailabilitiesApi - axios parameter creator
 * @export
 */
var NetworkIpAvailabilitiesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [networkId] network_id query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [networkName] network_name query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [ipVersion] ip_version query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkIpAvailabilitiesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesGet: function (networkId_1, networkName_1, tenantId_1, ipVersion_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, networkName_1, tenantId_1, ipVersion_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (networkId, networkName, tenantId, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/network-ip-availabilities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (networkId !== undefined) {
                                localVarQueryParameter['network_id'] = networkId;
                            }
                            if (networkName !== undefined) {
                                localVarQueryParameter['network_name'] = networkName;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (ipVersion !== undefined) {
                                localVarQueryParameter['ip_version'] = ipVersion;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkIpAvailabilitiesIdDelete', 'id', id);
                            localVarPath = "/v2.0/network-ip-availabilities/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkIpAvailabilitiesIdGet', 'id', id);
                            localVarPath = "/v2.0/network-ip-availabilities/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {NetworkIpAvailabilityUpdateRequest} [networkIpAvailabilityUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdPut: function (id_1, networkIpAvailabilityUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, networkIpAvailabilityUpdateRequest_1], args_1, true), void 0, function (id, networkIpAvailabilityUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkIpAvailabilitiesIdPut', 'id', id);
                            localVarPath = "/v2.0/network-ip-availabilities/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(networkIpAvailabilityUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {NetworkIpAvailabilitiesCreateRequest} [networkIpAvailabilitiesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesPost: function (networkIpAvailabilitiesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkIpAvailabilitiesCreateRequest_1], args_1, true), void 0, function (networkIpAvailabilitiesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/network-ip-availabilities";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(networkIpAvailabilitiesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.NetworkIpAvailabilitiesApiAxiosParamCreator = NetworkIpAvailabilitiesApiAxiosParamCreator;
/**
 * NetworkIpAvailabilitiesApi - functional programming interface
 * @export
 */
var NetworkIpAvailabilitiesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NetworkIpAvailabilitiesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [networkId] network_id query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [networkName] network_name query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [ipVersion] ip_version query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkIpAvailabilitiesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesGet: function (networkId, networkName, tenantId, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkIpAvailabilitiesGet(networkId, networkName, tenantId, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkIpAvailabilitiesApi.networkIpAvailabilitiesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkIpAvailabilitiesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkIpAvailabilitiesApi.networkIpAvailabilitiesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkIpAvailabilitiesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkIpAvailabilitiesApi.networkIpAvailabilitiesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {NetworkIpAvailabilityUpdateRequest} [networkIpAvailabilityUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdPut: function (id, networkIpAvailabilityUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkIpAvailabilitiesIdPut(id, networkIpAvailabilityUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkIpAvailabilitiesApi.networkIpAvailabilitiesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {NetworkIpAvailabilitiesCreateRequest} [networkIpAvailabilitiesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesPost: function (networkIpAvailabilitiesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkIpAvailabilitiesPost(networkIpAvailabilitiesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkIpAvailabilitiesApi.networkIpAvailabilitiesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.NetworkIpAvailabilitiesApiFp = NetworkIpAvailabilitiesApiFp;
/**
 * NetworkIpAvailabilitiesApi - factory interface
 * @export
 */
var NetworkIpAvailabilitiesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NetworkIpAvailabilitiesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [networkId] network_id query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [networkName] network_name query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [ipVersion] ip_version query parameter for /v2.0/network-ip-availabilities API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkIpAvailabilitiesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesGet: function (networkId, networkName, tenantId, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.networkIpAvailabilitiesGet(networkId, networkName, tenantId, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdDelete: function (id, options) {
            return localVarFp.networkIpAvailabilitiesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdGet: function (id, options) {
            return localVarFp.networkIpAvailabilitiesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
         * @param {NetworkIpAvailabilityUpdateRequest} [networkIpAvailabilityUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesIdPut: function (id, networkIpAvailabilityUpdateRequest, options) {
            return localVarFp.networkIpAvailabilitiesIdPut(id, networkIpAvailabilityUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {NetworkIpAvailabilitiesCreateRequest} [networkIpAvailabilitiesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkIpAvailabilitiesPost: function (networkIpAvailabilitiesCreateRequest, options) {
            return localVarFp.networkIpAvailabilitiesPost(networkIpAvailabilitiesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NetworkIpAvailabilitiesApiFactory = NetworkIpAvailabilitiesApiFactory;
/**
 * NetworkIpAvailabilitiesApi - object-oriented interface
 * @export
 * @class NetworkIpAvailabilitiesApi
 * @extends {BaseAPI}
 */
var NetworkIpAvailabilitiesApi = /** @class */ (function (_super) {
    __extends(NetworkIpAvailabilitiesApi, _super);
    function NetworkIpAvailabilitiesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [networkId] network_id query parameter for /v2.0/network-ip-availabilities API
     * @param {string} [networkName] network_name query parameter for /v2.0/network-ip-availabilities API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/network-ip-availabilities API
     * @param {string} [ipVersion] ip_version query parameter for /v2.0/network-ip-availabilities API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {NetworkIpAvailabilitiesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkIpAvailabilitiesApi
     */
    NetworkIpAvailabilitiesApi.prototype.networkIpAvailabilitiesGet = function (networkId, networkName, tenantId, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.NetworkIpAvailabilitiesApiFp)(this.configuration).networkIpAvailabilitiesGet(networkId, networkName, tenantId, ipVersion, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkIpAvailabilitiesApi
     */
    NetworkIpAvailabilitiesApi.prototype.networkIpAvailabilitiesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.NetworkIpAvailabilitiesApiFp)(this.configuration).networkIpAvailabilitiesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkIpAvailabilitiesApi
     */
    NetworkIpAvailabilitiesApi.prototype.networkIpAvailabilitiesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.NetworkIpAvailabilitiesApiFp)(this.configuration).networkIpAvailabilitiesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/network-ip-availabilities/{id} API
     * @param {NetworkIpAvailabilityUpdateRequest} [networkIpAvailabilityUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkIpAvailabilitiesApi
     */
    NetworkIpAvailabilitiesApi.prototype.networkIpAvailabilitiesIdPut = function (id, networkIpAvailabilityUpdateRequest, options) {
        var _this = this;
        return (0, exports.NetworkIpAvailabilitiesApiFp)(this.configuration).networkIpAvailabilitiesIdPut(id, networkIpAvailabilityUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {NetworkIpAvailabilitiesCreateRequest} [networkIpAvailabilitiesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkIpAvailabilitiesApi
     */
    NetworkIpAvailabilitiesApi.prototype.networkIpAvailabilitiesPost = function (networkIpAvailabilitiesCreateRequest, options) {
        var _this = this;
        return (0, exports.NetworkIpAvailabilitiesApiFp)(this.configuration).networkIpAvailabilitiesPost(networkIpAvailabilitiesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NetworkIpAvailabilitiesApi;
}(base_1.BaseAPI));
exports.NetworkIpAvailabilitiesApi = NetworkIpAvailabilitiesApi;
/**
 * @export
 */
exports.NetworkIpAvailabilitiesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * NetworkSegmentRangesApi - axios parameter creator
 * @export
 */
var NetworkSegmentRangesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/network-segment-ranges API
         * @param {string} [name] name query parameter for /v2.0/network-segment-ranges API
         * @param {string} [projectId] project_id query parameter for /v2.0/network-segment-ranges API
         * @param {NetworkSegmentRangesGetNetworkTypeEnum} [networkType] network_type query parameter for /v2.0/network-segment-ranges API
         * @param {string} [physicalNetwork] physical_network query parameter for /v2.0/network-segment-ranges API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/network-segment-ranges API
         * @param {string} [description] description query parameter for /v2.0/network-segment-ranges API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkSegmentRangesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesGet: function (id_1, name_1, projectId_1, networkType_1, physicalNetwork_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 16; _i < arguments.length; _i++) {
                args_1[_i - 16] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, projectId_1, networkType_1, physicalNetwork_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, projectId, networkType, physicalNetwork, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/network-segment-ranges";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (projectId !== undefined) {
                                localVarQueryParameter['project_id'] = projectId;
                            }
                            if (networkType !== undefined) {
                                localVarQueryParameter['network_type'] = networkType;
                            }
                            if (physicalNetwork !== undefined) {
                                localVarQueryParameter['physical_network'] = physicalNetwork;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesIdDelete', 'id', id);
                            localVarPath = "/v2.0/network-segment-ranges/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesIdGet', 'id', id);
                            localVarPath = "/v2.0/network-segment-ranges/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {NetworkSegmentRangeUpdateRequest} [networkSegmentRangeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdPut: function (id_1, networkSegmentRangeUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, networkSegmentRangeUpdateRequest_1], args_1, true), void 0, function (id, networkSegmentRangeUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesIdPut', 'id', id);
                            localVarPath = "/v2.0/network-segment-ranges/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(networkSegmentRangeUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsDelete: function (networkSegmentRangeId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkSegmentRangeId_1], args_1, true), void 0, function (networkSegmentRangeId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkSegmentRangeId' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesNetworkSegmentRangeIdTagsDelete', 'networkSegmentRangeId', networkSegmentRangeId);
                            localVarPath = "/v2.0/network_segment_ranges/{network_segment_range_id}/tags"
                                .replace("{".concat("network_segment_range_id", "}"), encodeURIComponent(String(networkSegmentRangeId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkSegmentRangesNetworkSegmentRangeIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/network_segment_ranges/{network_segment_range_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete: function (networkSegmentRangeId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkSegmentRangeId_1, id_1], args_1, true), void 0, function (networkSegmentRangeId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkSegmentRangeId' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete', 'networkSegmentRangeId', networkSegmentRangeId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id}"
                                .replace("{".concat("network_segment_range_id", "}"), encodeURIComponent(String(networkSegmentRangeId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdGet: function (networkSegmentRangeId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkSegmentRangeId_1, id_1], args_1, true), void 0, function (networkSegmentRangeId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkSegmentRangeId' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesNetworkSegmentRangeIdTagsIdGet', 'networkSegmentRangeId', networkSegmentRangeId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesNetworkSegmentRangeIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id}"
                                .replace("{".concat("network_segment_range_id", "}"), encodeURIComponent(String(networkSegmentRangeId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdPut: function (networkSegmentRangeId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkSegmentRangeId_1, id_1], args_1, true), void 0, function (networkSegmentRangeId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkSegmentRangeId' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesNetworkSegmentRangeIdTagsIdPut', 'networkSegmentRangeId', networkSegmentRangeId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesNetworkSegmentRangeIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id}"
                                .replace("{".concat("network_segment_range_id", "}"), encodeURIComponent(String(networkSegmentRangeId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {NetworkSegmentRangesTagsUpdateAllRequest} [networkSegmentRangesTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsPut: function (networkSegmentRangeId_1, networkSegmentRangesTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkSegmentRangeId_1, networkSegmentRangesTagsUpdateAllRequest_1], args_1, true), void 0, function (networkSegmentRangeId, networkSegmentRangesTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkSegmentRangeId' is not null or undefined
                            (0, common_1.assertParamExists)('networkSegmentRangesNetworkSegmentRangeIdTagsPut', 'networkSegmentRangeId', networkSegmentRangeId);
                            localVarPath = "/v2.0/network_segment_ranges/{network_segment_range_id}/tags"
                                .replace("{".concat("network_segment_range_id", "}"), encodeURIComponent(String(networkSegmentRangeId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(networkSegmentRangesTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {NetworkSegmentRangesCreateRequest} [networkSegmentRangesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesPost: function (networkSegmentRangesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkSegmentRangesCreateRequest_1], args_1, true), void 0, function (networkSegmentRangesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/network-segment-ranges";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(networkSegmentRangesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.NetworkSegmentRangesApiAxiosParamCreator = NetworkSegmentRangesApiAxiosParamCreator;
/**
 * NetworkSegmentRangesApi - functional programming interface
 * @export
 */
var NetworkSegmentRangesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NetworkSegmentRangesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/network-segment-ranges API
         * @param {string} [name] name query parameter for /v2.0/network-segment-ranges API
         * @param {string} [projectId] project_id query parameter for /v2.0/network-segment-ranges API
         * @param {NetworkSegmentRangesGetNetworkTypeEnum} [networkType] network_type query parameter for /v2.0/network-segment-ranges API
         * @param {string} [physicalNetwork] physical_network query parameter for /v2.0/network-segment-ranges API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/network-segment-ranges API
         * @param {string} [description] description query parameter for /v2.0/network-segment-ranges API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkSegmentRangesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesGet: function (id, name, projectId, networkType, physicalNetwork, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesGet(id, name, projectId, networkType, physicalNetwork, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {NetworkSegmentRangeUpdateRequest} [networkSegmentRangeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdPut: function (id, networkSegmentRangeUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesIdPut(id, networkSegmentRangeUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsDelete: function (networkSegmentRangeId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesNetworkSegmentRangeIdTagsDelete(networkSegmentRangeId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesNetworkSegmentRangeIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkSegmentRangesNetworkSegmentRangeIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesNetworkSegmentRangeIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesNetworkSegmentRangeIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete: function (networkSegmentRangeId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete(networkSegmentRangeId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdGet: function (networkSegmentRangeId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesNetworkSegmentRangeIdTagsIdGet(networkSegmentRangeId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesNetworkSegmentRangeIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdPut: function (networkSegmentRangeId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesNetworkSegmentRangeIdTagsIdPut(networkSegmentRangeId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesNetworkSegmentRangeIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {NetworkSegmentRangesTagsUpdateAllRequest} [networkSegmentRangesTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsPut: function (networkSegmentRangeId, networkSegmentRangesTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesNetworkSegmentRangeIdTagsPut(networkSegmentRangeId, networkSegmentRangesTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesNetworkSegmentRangeIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {NetworkSegmentRangesCreateRequest} [networkSegmentRangesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesPost: function (networkSegmentRangesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networkSegmentRangesPost(networkSegmentRangesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkSegmentRangesApi.networkSegmentRangesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.NetworkSegmentRangesApiFp = NetworkSegmentRangesApiFp;
/**
 * NetworkSegmentRangesApi - factory interface
 * @export
 */
var NetworkSegmentRangesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NetworkSegmentRangesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/network-segment-ranges API
         * @param {string} [name] name query parameter for /v2.0/network-segment-ranges API
         * @param {string} [projectId] project_id query parameter for /v2.0/network-segment-ranges API
         * @param {NetworkSegmentRangesGetNetworkTypeEnum} [networkType] network_type query parameter for /v2.0/network-segment-ranges API
         * @param {string} [physicalNetwork] physical_network query parameter for /v2.0/network-segment-ranges API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/network-segment-ranges API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/network-segment-ranges API
         * @param {string} [description] description query parameter for /v2.0/network-segment-ranges API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkSegmentRangesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesGet: function (id, name, projectId, networkType, physicalNetwork, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.networkSegmentRangesGet(id, name, projectId, networkType, physicalNetwork, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdDelete: function (id, options) {
            return localVarFp.networkSegmentRangesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdGet: function (id, options) {
            return localVarFp.networkSegmentRangesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
         * @param {NetworkSegmentRangeUpdateRequest} [networkSegmentRangeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesIdPut: function (id, networkSegmentRangeUpdateRequest, options) {
            return localVarFp.networkSegmentRangesIdPut(id, networkSegmentRangeUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsDelete: function (networkSegmentRangeId, options) {
            return localVarFp.networkSegmentRangesNetworkSegmentRangeIdTagsDelete(networkSegmentRangeId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworkSegmentRangesNetworkSegmentRangeIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.networkSegmentRangesNetworkSegmentRangeIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete: function (networkSegmentRangeId, id, options) {
            return localVarFp.networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete(networkSegmentRangeId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdGet: function (networkSegmentRangeId, id, options) {
            return localVarFp.networkSegmentRangesNetworkSegmentRangeIdTagsIdGet(networkSegmentRangeId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsIdPut: function (networkSegmentRangeId, id, options) {
            return localVarFp.networkSegmentRangesNetworkSegmentRangeIdTagsIdPut(networkSegmentRangeId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
         * @param {NetworkSegmentRangesTagsUpdateAllRequest} [networkSegmentRangesTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesNetworkSegmentRangeIdTagsPut: function (networkSegmentRangeId, networkSegmentRangesTagsUpdateAllRequest, options) {
            return localVarFp.networkSegmentRangesNetworkSegmentRangeIdTagsPut(networkSegmentRangeId, networkSegmentRangesTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {NetworkSegmentRangesCreateRequest} [networkSegmentRangesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkSegmentRangesPost: function (networkSegmentRangesCreateRequest, options) {
            return localVarFp.networkSegmentRangesPost(networkSegmentRangesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NetworkSegmentRangesApiFactory = NetworkSegmentRangesApiFactory;
/**
 * NetworkSegmentRangesApi - object-oriented interface
 * @export
 * @class NetworkSegmentRangesApi
 * @extends {BaseAPI}
 */
var NetworkSegmentRangesApi = /** @class */ (function (_super) {
    __extends(NetworkSegmentRangesApi, _super);
    function NetworkSegmentRangesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/network-segment-ranges API
     * @param {string} [name] name query parameter for /v2.0/network-segment-ranges API
     * @param {string} [projectId] project_id query parameter for /v2.0/network-segment-ranges API
     * @param {NetworkSegmentRangesGetNetworkTypeEnum} [networkType] network_type query parameter for /v2.0/network-segment-ranges API
     * @param {string} [physicalNetwork] physical_network query parameter for /v2.0/network-segment-ranges API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/network-segment-ranges API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/network-segment-ranges API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/network-segment-ranges API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/network-segment-ranges API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/network-segment-ranges API
     * @param {string} [description] description query parameter for /v2.0/network-segment-ranges API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {NetworkSegmentRangesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesGet = function (id, name, projectId, networkType, physicalNetwork, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesGet(id, name, projectId, networkType, physicalNetwork, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/network-segment-ranges/{id} API
     * @param {NetworkSegmentRangeUpdateRequest} [networkSegmentRangeUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesIdPut = function (id, networkSegmentRangeUpdateRequest, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesIdPut(id, networkSegmentRangeUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesNetworkSegmentRangeIdTagsDelete = function (networkSegmentRangeId, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesNetworkSegmentRangeIdTagsDelete(networkSegmentRangeId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {NetworkSegmentRangesNetworkSegmentRangeIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesNetworkSegmentRangeIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesNetworkSegmentRangeIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete = function (networkSegmentRangeId, id, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesNetworkSegmentRangeIdTagsIdDelete(networkSegmentRangeId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesNetworkSegmentRangeIdTagsIdGet = function (networkSegmentRangeId, id, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesNetworkSegmentRangeIdTagsIdGet(networkSegmentRangeId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesNetworkSegmentRangeIdTagsIdPut = function (networkSegmentRangeId, id, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesNetworkSegmentRangeIdTagsIdPut(networkSegmentRangeId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkSegmentRangeId network_segment_range_id parameter for /v2.0/network_segment_ranges/{network_segment_range_id}/tags/{id} API
     * @param {NetworkSegmentRangesTagsUpdateAllRequest} [networkSegmentRangesTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesNetworkSegmentRangeIdTagsPut = function (networkSegmentRangeId, networkSegmentRangesTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesNetworkSegmentRangeIdTagsPut(networkSegmentRangeId, networkSegmentRangesTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {NetworkSegmentRangesCreateRequest} [networkSegmentRangesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkSegmentRangesApi
     */
    NetworkSegmentRangesApi.prototype.networkSegmentRangesPost = function (networkSegmentRangesCreateRequest, options) {
        var _this = this;
        return (0, exports.NetworkSegmentRangesApiFp)(this.configuration).networkSegmentRangesPost(networkSegmentRangesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NetworkSegmentRangesApi;
}(base_1.BaseAPI));
exports.NetworkSegmentRangesApi = NetworkSegmentRangesApi;
/**
 * @export
 */
exports.NetworkSegmentRangesGetNetworkTypeEnum = {
    Vlan: 'vlan',
    Vxlan: 'vxlan',
    Gre: 'gre',
    Geneve: 'geneve'
};
/**
 * @export
 */
exports.NetworkSegmentRangesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.NetworkSegmentRangesNetworkSegmentRangeIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * NetworkingAgentsApi - axios parameter creator
 * @export
 */
var NetworkingAgentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/agents API
         * @param {string} [agentType] agent_type query parameter for /v2.0/agents API
         * @param {string} [binary] binary query parameter for /v2.0/agents API
         * @param {string} [topic] topic query parameter for /v2.0/agents API
         * @param {string} [host] host query parameter for /v2.0/agents API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/agents API
         * @param {string} [alive] alive query parameter for /v2.0/agents API
         * @param {string | null} [description] description query parameter for /v2.0/agents API
         * @param {string} [availabilityZone] availability_zone query parameter for /v2.0/agents API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGet: function (id_1, agentType_1, binary_1, topic_1, host_1, adminStateUp_1, alive_1, description_1, availabilityZone_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 14; _i < arguments.length; _i++) {
                args_1[_i - 14] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, agentType_1, binary_1, topic_1, host_1, adminStateUp_1, alive_1, description_1, availabilityZone_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, agentType, binary, topic, host, adminStateUp, alive, description, availabilityZone, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/agents";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (agentType !== undefined) {
                                localVarQueryParameter['agent_type'] = agentType;
                            }
                            if (binary !== undefined) {
                                localVarQueryParameter['binary'] = binary;
                            }
                            if (topic !== undefined) {
                                localVarQueryParameter['topic'] = topic;
                            }
                            if (host !== undefined) {
                                localVarQueryParameter['host'] = host;
                            }
                            if (adminStateUp !== undefined) {
                                for (_a = 0, _b = Object.entries(adminStateUp); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (alive !== undefined) {
                                localVarQueryParameter['alive'] = alive;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (availabilityZone !== undefined) {
                                localVarQueryParameter['availability_zone'] = availabilityZone;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsIdDelete', 'id', id);
                            localVarPath = "/v2.0/agents/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsIdGet', 'id', id);
                            localVarPath = "/v2.0/agents/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {AgentUpdateRequest} [agentUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdPut: function (id_1, agentUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, agentUpdateRequest_1], args_1, true), void 0, function (id, agentUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('agentsIdPut', 'id', id);
                            localVarPath = "/v2.0/agents/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(agentUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {AgentsCreateRequest} [agentsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsPost: function (agentsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([agentsCreateRequest_1], args_1, true), void 0, function (agentsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/agents";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(agentsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.NetworkingAgentsApiAxiosParamCreator = NetworkingAgentsApiAxiosParamCreator;
/**
 * NetworkingAgentsApi - functional programming interface
 * @export
 */
var NetworkingAgentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NetworkingAgentsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/agents API
         * @param {string} [agentType] agent_type query parameter for /v2.0/agents API
         * @param {string} [binary] binary query parameter for /v2.0/agents API
         * @param {string} [topic] topic query parameter for /v2.0/agents API
         * @param {string} [host] host query parameter for /v2.0/agents API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/agents API
         * @param {string} [alive] alive query parameter for /v2.0/agents API
         * @param {string | null} [description] description query parameter for /v2.0/agents API
         * @param {string} [availabilityZone] availability_zone query parameter for /v2.0/agents API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGet: function (id, agentType, binary, topic, host, adminStateUp, alive, description, availabilityZone, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsGet(id, agentType, binary, topic, host, adminStateUp, alive, description, availabilityZone, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkingAgentsApi.agentsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkingAgentsApi.agentsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkingAgentsApi.agentsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {AgentUpdateRequest} [agentUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdPut: function (id, agentUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsIdPut(id, agentUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkingAgentsApi.agentsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {AgentsCreateRequest} [agentsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsPost: function (agentsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.agentsPost(agentsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworkingAgentsApi.agentsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.NetworkingAgentsApiFp = NetworkingAgentsApiFp;
/**
 * NetworkingAgentsApi - factory interface
 * @export
 */
var NetworkingAgentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NetworkingAgentsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/agents API
         * @param {string} [agentType] agent_type query parameter for /v2.0/agents API
         * @param {string} [binary] binary query parameter for /v2.0/agents API
         * @param {string} [topic] topic query parameter for /v2.0/agents API
         * @param {string} [host] host query parameter for /v2.0/agents API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/agents API
         * @param {string} [alive] alive query parameter for /v2.0/agents API
         * @param {string | null} [description] description query parameter for /v2.0/agents API
         * @param {string} [availabilityZone] availability_zone query parameter for /v2.0/agents API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {AgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsGet: function (id, agentType, binary, topic, host, adminStateUp, alive, description, availabilityZone, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.agentsGet(id, agentType, binary, topic, host, adminStateUp, alive, description, availabilityZone, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdDelete: function (id, options) {
            return localVarFp.agentsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdGet: function (id, options) {
            return localVarFp.agentsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/agents/{id} API
         * @param {AgentUpdateRequest} [agentUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsIdPut: function (id, agentUpdateRequest, options) {
            return localVarFp.agentsIdPut(id, agentUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {AgentsCreateRequest} [agentsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        agentsPost: function (agentsCreateRequest, options) {
            return localVarFp.agentsPost(agentsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NetworkingAgentsApiFactory = NetworkingAgentsApiFactory;
/**
 * NetworkingAgentsApi - object-oriented interface
 * @export
 * @class NetworkingAgentsApi
 * @extends {BaseAPI}
 */
var NetworkingAgentsApi = /** @class */ (function (_super) {
    __extends(NetworkingAgentsApi, _super);
    function NetworkingAgentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/agents API
     * @param {string} [agentType] agent_type query parameter for /v2.0/agents API
     * @param {string} [binary] binary query parameter for /v2.0/agents API
     * @param {string} [topic] topic query parameter for /v2.0/agents API
     * @param {string} [host] host query parameter for /v2.0/agents API
     * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/agents API
     * @param {string} [alive] alive query parameter for /v2.0/agents API
     * @param {string | null} [description] description query parameter for /v2.0/agents API
     * @param {string} [availabilityZone] availability_zone query parameter for /v2.0/agents API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {AgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkingAgentsApi
     */
    NetworkingAgentsApi.prototype.agentsGet = function (id, agentType, binary, topic, host, adminStateUp, alive, description, availabilityZone, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.NetworkingAgentsApiFp)(this.configuration).agentsGet(id, agentType, binary, topic, host, adminStateUp, alive, description, availabilityZone, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/agents/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkingAgentsApi
     */
    NetworkingAgentsApi.prototype.agentsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.NetworkingAgentsApiFp)(this.configuration).agentsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/agents/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkingAgentsApi
     */
    NetworkingAgentsApi.prototype.agentsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.NetworkingAgentsApiFp)(this.configuration).agentsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/agents/{id} API
     * @param {AgentUpdateRequest} [agentUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkingAgentsApi
     */
    NetworkingAgentsApi.prototype.agentsIdPut = function (id, agentUpdateRequest, options) {
        var _this = this;
        return (0, exports.NetworkingAgentsApiFp)(this.configuration).agentsIdPut(id, agentUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {AgentsCreateRequest} [agentsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkingAgentsApi
     */
    NetworkingAgentsApi.prototype.agentsPost = function (agentsCreateRequest, options) {
        var _this = this;
        return (0, exports.NetworkingAgentsApiFp)(this.configuration).agentsPost(agentsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NetworkingAgentsApi;
}(base_1.BaseAPI));
exports.NetworkingAgentsApi = NetworkingAgentsApi;
/**
 * @export
 */
exports.AgentsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * NetworksApi - axios parameter creator
 * @export
 */
var NetworksApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/networks API
         * @param {string} [name] name query parameter for /v2.0/networks API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/networks API
         * @param {string} [status] status query parameter for /v2.0/networks API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/networks API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/networks API
         * @param {string | boolean} [routerexternal] router:external query parameter for /v2.0/networks API
         * @param {string | number} [mtu] mtu query parameter for /v2.0/networks API
         * @param {string} [providernetworkType] provider:network_type query parameter for /v2.0/networks API
         * @param {string} [providerphysicalNetwork] provider:physical_network query parameter for /v2.0/networks API
         * @param {string | number} [providersegmentationId] provider:segmentation_id query parameter for /v2.0/networks API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/networks API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/networks API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/networks API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/networks API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/networks API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/networks API
         * @param {string} [description] description query parameter for /v2.0/networks API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksGet: function (id_1, name_1, adminStateUp_1, status_1, tenantId_1, shared_1, routerexternal_1, mtu_1, providernetworkType_1, providerphysicalNetwork_1, providersegmentationId_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, isDefault_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 23; _i < arguments.length; _i++) {
                args_1[_i - 23] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, adminStateUp_1, status_1, tenantId_1, shared_1, routerexternal_1, mtu_1, providernetworkType_1, providerphysicalNetwork_1, providersegmentationId_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, isDefault_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, adminStateUp, status, tenantId, shared, routerexternal, mtu, providernetworkType, providerphysicalNetwork, providersegmentationId, revisionNumber, tags, tagsAny, notTags, notTagsAny, isDefault, description, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, _g, _h, _j, key, value, _k, _l, _m, key, value, _o, _p, _q, key, value, _r, _s, _t, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_u) {
                    switch (_u.label) {
                        case 0:
                            localVarPath = "/v2.0/networks";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _u.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (adminStateUp !== undefined) {
                                for (_a = 0, _b = Object.entries(adminStateUp); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (shared !== undefined) {
                                for (_d = 0, _e = Object.entries(shared); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (routerexternal !== undefined) {
                                for (_g = 0, _h = Object.entries(routerexternal); _g < _h.length; _g++) {
                                    _j = _h[_g], key = _j[0], value = _j[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (mtu !== undefined) {
                                for (_k = 0, _l = Object.entries(mtu); _k < _l.length; _k++) {
                                    _m = _l[_k], key = _m[0], value = _m[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (providernetworkType !== undefined) {
                                localVarQueryParameter['provider:network_type'] = providernetworkType;
                            }
                            if (providerphysicalNetwork !== undefined) {
                                localVarQueryParameter['provider:physical_network'] = providerphysicalNetwork;
                            }
                            if (providersegmentationId !== undefined) {
                                for (_o = 0, _p = Object.entries(providersegmentationId); _o < _p.length; _o++) {
                                    _q = _p[_o], key = _q[0], value = _q[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (isDefault !== undefined) {
                                for (_r = 0, _s = Object.entries(isDefault); _r < _s.length; _r++) {
                                    _t = _s[_r], key = _t[0], value = _t[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDelete: function (networkId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1], args_1, true), void 0, function (networkId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdDelete', 'networkId', networkId);
                            localVarPath = "/v2.0/networks/{network_id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksNetworkIdDhcpAgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/networks/{network_id}/dhcp-agents";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdDelete: function (networkId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, id_1], args_1, true), void 0, function (networkId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdDhcpAgentsIdDelete', 'networkId', networkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdDhcpAgentsIdDelete', 'id', id);
                            localVarPath = "/v2.0/networks/{network_id}/dhcp-agents/{id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdGet: function (networkId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, id_1], args_1, true), void 0, function (networkId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdDhcpAgentsIdGet', 'networkId', networkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdDhcpAgentsIdGet', 'id', id);
                            localVarPath = "/v2.0/networks/{network_id}/dhcp-agents/{id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdPut: function (networkId_1, id_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, id_1, body_1], args_1, true), void 0, function (networkId, id, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdDhcpAgentsIdPut', 'networkId', networkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdDhcpAgentsIdPut', 'id', id);
                            localVarPath = "/v2.0/networks/{network_id}/dhcp-agents/{id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsPost: function (networkId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, body_1], args_1, true), void 0, function (networkId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdDhcpAgentsPost', 'networkId', networkId);
                            localVarPath = "/v2.0/networks/{network_id}/dhcp-agents"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdGet: function (networkId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1], args_1, true), void 0, function (networkId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdGet', 'networkId', networkId);
                            localVarPath = "/v2.0/networks/{network_id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {NetworkUpdateRequest} [networkUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdPut: function (networkId_1, networkUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, networkUpdateRequest_1], args_1, true), void 0, function (networkId, networkUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdPut', 'networkId', networkId);
                            localVarPath = "/v2.0/networks/{network_id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(networkUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsDelete: function (networkId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1], args_1, true), void 0, function (networkId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdTagsDelete', 'networkId', networkId);
                            localVarPath = "/v2.0/networks/{network_id}/tags"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksNetworkIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/networks/{network_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdDelete: function (networkId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, id_1], args_1, true), void 0, function (networkId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdTagsIdDelete', 'networkId', networkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/networks/{network_id}/tags/{id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdGet: function (networkId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, id_1], args_1, true), void 0, function (networkId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdTagsIdGet', 'networkId', networkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/networks/{network_id}/tags/{id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdPut: function (networkId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, id_1], args_1, true), void 0, function (networkId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdTagsIdPut', 'networkId', networkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/networks/{network_id}/tags/{id}"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {NetworksTagsUpdateAllRequest} [networksTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsPut: function (networkId_1, networksTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networkId_1, networksTagsUpdateAllRequest_1], args_1, true), void 0, function (networkId, networksTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkId' is not null or undefined
                            (0, common_1.assertParamExists)('networksNetworkIdTagsPut', 'networkId', networkId);
                            localVarPath = "/v2.0/networks/{network_id}/tags"
                                .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(networksTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {NetworksCreateRequest} [networksCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksPost: function (networksCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([networksCreateRequest_1], args_1, true), void 0, function (networksCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/networks";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(networksCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.NetworksApiAxiosParamCreator = NetworksApiAxiosParamCreator;
/**
 * NetworksApi - functional programming interface
 * @export
 */
var NetworksApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NetworksApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/networks API
         * @param {string} [name] name query parameter for /v2.0/networks API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/networks API
         * @param {string} [status] status query parameter for /v2.0/networks API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/networks API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/networks API
         * @param {string | boolean} [routerexternal] router:external query parameter for /v2.0/networks API
         * @param {string | number} [mtu] mtu query parameter for /v2.0/networks API
         * @param {string} [providernetworkType] provider:network_type query parameter for /v2.0/networks API
         * @param {string} [providerphysicalNetwork] provider:physical_network query parameter for /v2.0/networks API
         * @param {string | number} [providersegmentationId] provider:segmentation_id query parameter for /v2.0/networks API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/networks API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/networks API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/networks API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/networks API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/networks API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/networks API
         * @param {string} [description] description query parameter for /v2.0/networks API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksGet: function (id, name, adminStateUp, status, tenantId, shared, routerexternal, mtu, providernetworkType, providerphysicalNetwork, providersegmentationId, revisionNumber, tags, tagsAny, notTags, notTagsAny, isDefault, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksGet(id, name, adminStateUp, status, tenantId, shared, routerexternal, mtu, providernetworkType, providerphysicalNetwork, providersegmentationId, revisionNumber, tags, tagsAny, notTags, notTagsAny, isDefault, description, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDelete: function (networkId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdDelete(networkId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksNetworkIdDhcpAgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdDhcpAgentsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdDhcpAgentsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdDelete: function (networkId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdDhcpAgentsIdDelete(networkId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdDhcpAgentsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdGet: function (networkId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdDhcpAgentsIdGet(networkId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdDhcpAgentsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdPut: function (networkId, id, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdDhcpAgentsIdPut(networkId, id, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdDhcpAgentsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsPost: function (networkId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdDhcpAgentsPost(networkId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdDhcpAgentsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdGet: function (networkId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdGet(networkId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {NetworkUpdateRequest} [networkUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdPut: function (networkId, networkUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdPut(networkId, networkUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsDelete: function (networkId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdTagsDelete(networkId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksNetworkIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdDelete: function (networkId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdTagsIdDelete(networkId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdGet: function (networkId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdTagsIdGet(networkId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdPut: function (networkId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdTagsIdPut(networkId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {NetworksTagsUpdateAllRequest} [networksTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsPut: function (networkId, networksTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksNetworkIdTagsPut(networkId, networksTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksNetworkIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {NetworksCreateRequest} [networksCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksPost: function (networksCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.networksPost(networksCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['NetworksApi.networksPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.NetworksApiFp = NetworksApiFp;
/**
 * NetworksApi - factory interface
 * @export
 */
var NetworksApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NetworksApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/networks API
         * @param {string} [name] name query parameter for /v2.0/networks API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/networks API
         * @param {string} [status] status query parameter for /v2.0/networks API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/networks API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/networks API
         * @param {string | boolean} [routerexternal] router:external query parameter for /v2.0/networks API
         * @param {string | number} [mtu] mtu query parameter for /v2.0/networks API
         * @param {string} [providernetworkType] provider:network_type query parameter for /v2.0/networks API
         * @param {string} [providerphysicalNetwork] provider:physical_network query parameter for /v2.0/networks API
         * @param {string | number} [providersegmentationId] provider:segmentation_id query parameter for /v2.0/networks API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/networks API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/networks API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/networks API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/networks API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/networks API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/networks API
         * @param {string} [description] description query parameter for /v2.0/networks API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksGet: function (id, name, adminStateUp, status, tenantId, shared, routerexternal, mtu, providernetworkType, providerphysicalNetwork, providersegmentationId, revisionNumber, tags, tagsAny, notTags, notTagsAny, isDefault, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.networksGet(id, name, adminStateUp, status, tenantId, shared, routerexternal, mtu, providernetworkType, providerphysicalNetwork, providersegmentationId, revisionNumber, tags, tagsAny, notTags, notTagsAny, isDefault, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDelete: function (networkId, options) {
            return localVarFp.networksNetworkIdDelete(networkId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksNetworkIdDhcpAgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.networksNetworkIdDhcpAgentsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdDelete: function (networkId, id, options) {
            return localVarFp.networksNetworkIdDhcpAgentsIdDelete(networkId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdGet: function (networkId, id, options) {
            return localVarFp.networksNetworkIdDhcpAgentsIdGet(networkId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsIdPut: function (networkId, id, body, options) {
            return localVarFp.networksNetworkIdDhcpAgentsIdPut(networkId, id, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdDhcpAgentsPost: function (networkId, body, options) {
            return localVarFp.networksNetworkIdDhcpAgentsPost(networkId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdGet: function (networkId, options) {
            return localVarFp.networksNetworkIdGet(networkId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
         * @param {NetworkUpdateRequest} [networkUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdPut: function (networkId, networkUpdateRequest, options) {
            return localVarFp.networksNetworkIdPut(networkId, networkUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsDelete: function (networkId, options) {
            return localVarFp.networksNetworkIdTagsDelete(networkId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {NetworksNetworkIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.networksNetworkIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdDelete: function (networkId, id, options) {
            return localVarFp.networksNetworkIdTagsIdDelete(networkId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdGet: function (networkId, id, options) {
            return localVarFp.networksNetworkIdTagsIdGet(networkId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsIdPut: function (networkId, id, options) {
            return localVarFp.networksNetworkIdTagsIdPut(networkId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
         * @param {NetworksTagsUpdateAllRequest} [networksTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksNetworkIdTagsPut: function (networkId, networksTagsUpdateAllRequest, options) {
            return localVarFp.networksNetworkIdTagsPut(networkId, networksTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {NetworksCreateRequest} [networksCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networksPost: function (networksCreateRequest, options) {
            return localVarFp.networksPost(networksCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.NetworksApiFactory = NetworksApiFactory;
/**
 * NetworksApi - object-oriented interface
 * @export
 * @class NetworksApi
 * @extends {BaseAPI}
 */
var NetworksApi = /** @class */ (function (_super) {
    __extends(NetworksApi, _super);
    function NetworksApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/networks API
     * @param {string} [name] name query parameter for /v2.0/networks API
     * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/networks API
     * @param {string} [status] status query parameter for /v2.0/networks API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/networks API
     * @param {string | boolean} [shared] shared query parameter for /v2.0/networks API
     * @param {string | boolean} [routerexternal] router:external query parameter for /v2.0/networks API
     * @param {string | number} [mtu] mtu query parameter for /v2.0/networks API
     * @param {string} [providernetworkType] provider:network_type query parameter for /v2.0/networks API
     * @param {string} [providerphysicalNetwork] provider:physical_network query parameter for /v2.0/networks API
     * @param {string | number} [providersegmentationId] provider:segmentation_id query parameter for /v2.0/networks API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/networks API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/networks API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/networks API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/networks API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/networks API
     * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/networks API
     * @param {string} [description] description query parameter for /v2.0/networks API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {NetworksGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksGet = function (id, name, adminStateUp, status, tenantId, shared, routerexternal, mtu, providernetworkType, providerphysicalNetwork, providersegmentationId, revisionNumber, tags, tagsAny, notTags, notTagsAny, isDefault, description, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksGet(id, name, adminStateUp, status, tenantId, shared, routerexternal, mtu, providernetworkType, providerphysicalNetwork, providersegmentationId, revisionNumber, tags, tagsAny, notTags, notTagsAny, isDefault, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdDelete = function (networkId, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdDelete(networkId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {NetworksNetworkIdDhcpAgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdDhcpAgentsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdDhcpAgentsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
     * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdDhcpAgentsIdDelete = function (networkId, id, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdDhcpAgentsIdDelete(networkId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
     * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdDhcpAgentsIdGet = function (networkId, id, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdDhcpAgentsIdGet(networkId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
     * @param {string} id id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdDhcpAgentsIdPut = function (networkId, id, body, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdDhcpAgentsIdPut(networkId, id, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/dhcp-agents/{id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdDhcpAgentsPost = function (networkId, body, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdDhcpAgentsPost(networkId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdGet = function (networkId, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdGet(networkId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id} API
     * @param {NetworkUpdateRequest} [networkUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdPut = function (networkId, networkUpdateRequest, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdPut(networkId, networkUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdTagsDelete = function (networkId, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdTagsDelete(networkId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {NetworksNetworkIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdTagsIdDelete = function (networkId, id, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdTagsIdDelete(networkId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdTagsIdGet = function (networkId, id, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdTagsIdGet(networkId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/networks/{network_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdTagsIdPut = function (networkId, id, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdTagsIdPut(networkId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} networkId network_id parameter for /v2.0/networks/{network_id}/tags/{id} API
     * @param {NetworksTagsUpdateAllRequest} [networksTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksNetworkIdTagsPut = function (networkId, networksTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksNetworkIdTagsPut(networkId, networksTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {NetworksCreateRequest} [networksCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworksApi
     */
    NetworksApi.prototype.networksPost = function (networksCreateRequest, options) {
        var _this = this;
        return (0, exports.NetworksApiFp)(this.configuration).networksPost(networksCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NetworksApi;
}(base_1.BaseAPI));
exports.NetworksApi = NetworksApi;
/**
 * @export
 */
exports.NetworksGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.NetworksNetworkIdDhcpAgentsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.NetworksNetworkIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * PoliciesApi - axios parameter creator
 * @export
 */
var PoliciesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string | number} [maxKpps] max_kpps query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string | number} [maxBurstKpps] max_burst_kpps query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {PoliciesPolicyIdPacketRateLimitRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PoliciesPolicyIdPacketRateLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesGet: function (id_1, maxKpps_1, maxBurstKpps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, maxKpps_1, maxBurstKpps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, maxKpps, maxBurstKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            localVarPath = "/v2.0/policies/{policy_id}/packet_rate_limit_rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _g.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (maxKpps !== undefined) {
                                for (_a = 0, _b = Object.entries(maxKpps); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (maxBurstKpps !== undefined) {
                                for (_d = 0, _e = Object.entries(maxBurstKpps); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdDelete: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdPacketRateLimitRulesIdDelete', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdPacketRateLimitRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/policies/{policy_id}/packet_rate_limit_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdGet: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdPacketRateLimitRulesIdGet', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdPacketRateLimitRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/policies/{policy_id}/packet_rate_limit_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {PoliciesPacketRateLimitRuleUpdateRequest} [policiesPacketRateLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdPut: function (policyId_1, id_1, policiesPacketRateLimitRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1, policiesPacketRateLimitRuleUpdateRequest_1], args_1, true), void 0, function (policyId, id, policiesPacketRateLimitRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdPacketRateLimitRulesIdPut', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdPacketRateLimitRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/policies/{policy_id}/packet_rate_limit_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(policiesPacketRateLimitRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {PoliciesPacketRateLimitRulesCreateRequest} [policiesPacketRateLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesPost: function (policyId_1, policiesPacketRateLimitRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, policiesPacketRateLimitRulesCreateRequest_1], args_1, true), void 0, function (policyId, policiesPacketRateLimitRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdPacketRateLimitRulesPost', 'policyId', policyId);
                            localVarPath = "/v2.0/policies/{policy_id}/packet_rate_limit_rules"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(policiesPacketRateLimitRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsDelete: function (policyId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1], args_1, true), void 0, function (policyId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdTagsDelete', 'policyId', policyId);
                            localVarPath = "/v2.0/policies/{policy_id}/tags"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PoliciesPolicyIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/policies/{policy_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdDelete: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdTagsIdDelete', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/policies/{policy_id}/tags/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdGet: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdTagsIdGet', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/policies/{policy_id}/tags/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdPut: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdTagsIdPut', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/policies/{policy_id}/tags/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {PoliciesTagsUpdateAllRequest} [policiesTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsPut: function (policyId_1, policiesTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, policiesTagsUpdateAllRequest_1], args_1, true), void 0, function (policyId, policiesTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdTagsPut', 'policyId', policyId);
                            localVarPath = "/v2.0/policies/{policy_id}/tags"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(policiesTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PoliciesApiAxiosParamCreator = PoliciesApiAxiosParamCreator;
/**
 * PoliciesApi - functional programming interface
 * @export
 */
var PoliciesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PoliciesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string | number} [maxKpps] max_kpps query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string | number} [maxBurstKpps] max_burst_kpps query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {PoliciesPolicyIdPacketRateLimitRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PoliciesPolicyIdPacketRateLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesGet: function (id, maxKpps, maxBurstKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdPacketRateLimitRulesGet(id, maxKpps, maxBurstKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdPacketRateLimitRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdDelete: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdPacketRateLimitRulesIdDelete(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdPacketRateLimitRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdGet: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdPacketRateLimitRulesIdGet(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdPacketRateLimitRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {PoliciesPacketRateLimitRuleUpdateRequest} [policiesPacketRateLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdPut: function (policyId, id, policiesPacketRateLimitRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdPacketRateLimitRulesIdPut(policyId, id, policiesPacketRateLimitRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdPacketRateLimitRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {PoliciesPacketRateLimitRulesCreateRequest} [policiesPacketRateLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesPost: function (policyId, policiesPacketRateLimitRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdPacketRateLimitRulesPost(policyId, policiesPacketRateLimitRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdPacketRateLimitRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsDelete: function (policyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdTagsDelete(policyId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PoliciesPolicyIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdDelete: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdTagsIdDelete(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdGet: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdTagsIdGet(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdPut: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdTagsIdPut(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {PoliciesTagsUpdateAllRequest} [policiesTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsPut: function (policyId, policiesTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdTagsPut(policyId, policiesTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PoliciesApiFp = PoliciesApiFp;
/**
 * PoliciesApi - factory interface
 * @export
 */
var PoliciesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PoliciesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string | number} [maxKpps] max_kpps query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string | number} [maxBurstKpps] max_burst_kpps query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {PoliciesPolicyIdPacketRateLimitRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PoliciesPolicyIdPacketRateLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesGet: function (id, maxKpps, maxBurstKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.policiesPolicyIdPacketRateLimitRulesGet(id, maxKpps, maxBurstKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdDelete: function (policyId, id, options) {
            return localVarFp.policiesPolicyIdPacketRateLimitRulesIdDelete(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdGet: function (policyId, id, options) {
            return localVarFp.policiesPolicyIdPacketRateLimitRulesIdGet(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {PoliciesPacketRateLimitRuleUpdateRequest} [policiesPacketRateLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesIdPut: function (policyId, id, policiesPacketRateLimitRuleUpdateRequest, options) {
            return localVarFp.policiesPolicyIdPacketRateLimitRulesIdPut(policyId, id, policiesPacketRateLimitRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
         * @param {PoliciesPacketRateLimitRulesCreateRequest} [policiesPacketRateLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPacketRateLimitRulesPost: function (policyId, policiesPacketRateLimitRulesCreateRequest, options) {
            return localVarFp.policiesPolicyIdPacketRateLimitRulesPost(policyId, policiesPacketRateLimitRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsDelete: function (policyId, options) {
            return localVarFp.policiesPolicyIdTagsDelete(policyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PoliciesPolicyIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.policiesPolicyIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdDelete: function (policyId, id, options) {
            return localVarFp.policiesPolicyIdTagsIdDelete(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdGet: function (policyId, id, options) {
            return localVarFp.policiesPolicyIdTagsIdGet(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsIdPut: function (policyId, id, options) {
            return localVarFp.policiesPolicyIdTagsIdPut(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
         * @param {PoliciesTagsUpdateAllRequest} [policiesTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdTagsPut: function (policyId, policiesTagsUpdateAllRequest, options) {
            return localVarFp.policiesPolicyIdTagsPut(policyId, policiesTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PoliciesApiFactory = PoliciesApiFactory;
/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
var PoliciesApi = /** @class */ (function (_super) {
    __extends(PoliciesApi, _super);
    function PoliciesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
     * @param {string | number} [maxKpps] max_kpps query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
     * @param {string | number} [maxBurstKpps] max_burst_kpps query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
     * @param {PoliciesPolicyIdPacketRateLimitRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {PoliciesPolicyIdPacketRateLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdPacketRateLimitRulesGet = function (id, maxKpps, maxBurstKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdPacketRateLimitRulesGet(id, maxKpps, maxBurstKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
     * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdPacketRateLimitRulesIdDelete = function (policyId, id, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdPacketRateLimitRulesIdDelete(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
     * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdPacketRateLimitRulesIdGet = function (policyId, id, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdPacketRateLimitRulesIdGet(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
     * @param {string} id id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
     * @param {PoliciesPacketRateLimitRuleUpdateRequest} [policiesPacketRateLimitRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdPacketRateLimitRulesIdPut = function (policyId, id, policiesPacketRateLimitRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdPacketRateLimitRulesIdPut(policyId, id, policiesPacketRateLimitRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/packet_rate_limit_rules/{id} API
     * @param {PoliciesPacketRateLimitRulesCreateRequest} [policiesPacketRateLimitRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdPacketRateLimitRulesPost = function (policyId, policiesPacketRateLimitRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdPacketRateLimitRulesPost(policyId, policiesPacketRateLimitRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdTagsDelete = function (policyId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdTagsDelete(policyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {PoliciesPolicyIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdTagsIdDelete = function (policyId, id, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdTagsIdDelete(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdTagsIdGet = function (policyId, id, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdTagsIdGet(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/policies/{policy_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdTagsIdPut = function (policyId, id, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdTagsIdPut(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/policies/{policy_id}/tags/{id} API
     * @param {PoliciesTagsUpdateAllRequest} [policiesTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdTagsPut = function (policyId, policiesTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdTagsPut(policyId, policiesTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PoliciesApi;
}(base_1.BaseAPI));
exports.PoliciesApi = PoliciesApi;
/**
 * @export
 */
exports.PoliciesPolicyIdPacketRateLimitRulesGetDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.PoliciesPolicyIdPacketRateLimitRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.PoliciesPolicyIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * PortBindingsApi - axios parameter creator
 * @export
 */
var PortBindingsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [host] host query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [vifType] vif_type query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {PortsPortIdBindingsGetVnicTypeEnum} [vnicType] vnic_type query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [status] status query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsPortIdBindingsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsGet: function (host_1, vifType_1, vnicType_1, status_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([host_1, vifType_1, vnicType_1, status_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (host, vifType, vnicType, status, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/ports/{port_id}/bindings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (host !== undefined) {
                                localVarQueryParameter['host'] = host;
                            }
                            if (vifType !== undefined) {
                                localVarQueryParameter['vif_type'] = vifType;
                            }
                            if (vnicType !== undefined) {
                                localVarQueryParameter['vnic_type'] = vnicType;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingsActivateActivateRequest} [portsBindingsActivateActivateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdActivatePut: function (portId_1, id_1, portsBindingsActivateActivateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, id_1, portsBindingsActivateActivateRequest_1], args_1, true), void 0, function (portId, id, portsBindingsActivateActivateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsIdActivatePut', 'portId', portId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsIdActivatePut', 'id', id);
                            localVarPath = "/v2.0/ports/{port_id}/bindings/{id}/activate"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(portsBindingsActivateActivateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdDelete: function (portId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, id_1], args_1, true), void 0, function (portId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsIdDelete', 'portId', portId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsIdDelete', 'id', id);
                            localVarPath = "/v2.0/ports/{port_id}/bindings/{id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdGet: function (portId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, id_1], args_1, true), void 0, function (portId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsIdGet', 'portId', portId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsIdGet', 'id', id);
                            localVarPath = "/v2.0/ports/{port_id}/bindings/{id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingUpdateRequest} [portsBindingUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdPut: function (portId_1, id_1, portsBindingUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, id_1, portsBindingUpdateRequest_1], args_1, true), void 0, function (portId, id, portsBindingUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsIdPut', 'portId', portId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsIdPut', 'id', id);
                            localVarPath = "/v2.0/ports/{port_id}/bindings/{id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(portsBindingUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingsCreateRequest} [portsBindingsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsPost: function (portId_1, portsBindingsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, portsBindingsCreateRequest_1], args_1, true), void 0, function (portId, portsBindingsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdBindingsPost', 'portId', portId);
                            localVarPath = "/v2.0/ports/{port_id}/bindings"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(portsBindingsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PortBindingsApiAxiosParamCreator = PortBindingsApiAxiosParamCreator;
/**
 * PortBindingsApi - functional programming interface
 * @export
 */
var PortBindingsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PortBindingsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [host] host query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [vifType] vif_type query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {PortsPortIdBindingsGetVnicTypeEnum} [vnicType] vnic_type query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [status] status query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsPortIdBindingsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsGet: function (host, vifType, vnicType, status, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdBindingsGet(host, vifType, vnicType, status, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortBindingsApi.portsPortIdBindingsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingsActivateActivateRequest} [portsBindingsActivateActivateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdActivatePut: function (portId, id, portsBindingsActivateActivateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdBindingsIdActivatePut(portId, id, portsBindingsActivateActivateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortBindingsApi.portsPortIdBindingsIdActivatePut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdDelete: function (portId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdBindingsIdDelete(portId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortBindingsApi.portsPortIdBindingsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdGet: function (portId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdBindingsIdGet(portId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortBindingsApi.portsPortIdBindingsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingUpdateRequest} [portsBindingUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdPut: function (portId, id, portsBindingUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdBindingsIdPut(portId, id, portsBindingUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortBindingsApi.portsPortIdBindingsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingsCreateRequest} [portsBindingsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsPost: function (portId, portsBindingsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdBindingsPost(portId, portsBindingsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortBindingsApi.portsPortIdBindingsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PortBindingsApiFp = PortBindingsApiFp;
/**
 * PortBindingsApi - factory interface
 * @export
 */
var PortBindingsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PortBindingsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [host] host query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [vifType] vif_type query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {PortsPortIdBindingsGetVnicTypeEnum} [vnicType] vnic_type query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [status] status query parameter for /v2.0/ports/{port_id}/bindings API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsPortIdBindingsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsGet: function (host, vifType, vnicType, status, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.portsPortIdBindingsGet(host, vifType, vnicType, status, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingsActivateActivateRequest} [portsBindingsActivateActivateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdActivatePut: function (portId, id, portsBindingsActivateActivateRequest, options) {
            return localVarFp.portsPortIdBindingsIdActivatePut(portId, id, portsBindingsActivateActivateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdDelete: function (portId, id, options) {
            return localVarFp.portsPortIdBindingsIdDelete(portId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdGet: function (portId, id, options) {
            return localVarFp.portsPortIdBindingsIdGet(portId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingUpdateRequest} [portsBindingUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsIdPut: function (portId, id, portsBindingUpdateRequest, options) {
            return localVarFp.portsPortIdBindingsIdPut(portId, id, portsBindingUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
         * @param {PortsBindingsCreateRequest} [portsBindingsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdBindingsPost: function (portId, portsBindingsCreateRequest, options) {
            return localVarFp.portsPortIdBindingsPost(portId, portsBindingsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PortBindingsApiFactory = PortBindingsApiFactory;
/**
 * PortBindingsApi - object-oriented interface
 * @export
 * @class PortBindingsApi
 * @extends {BaseAPI}
 */
var PortBindingsApi = /** @class */ (function (_super) {
    __extends(PortBindingsApi, _super);
    function PortBindingsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [host] host query parameter for /v2.0/ports/{port_id}/bindings API
     * @param {string} [vifType] vif_type query parameter for /v2.0/ports/{port_id}/bindings API
     * @param {PortsPortIdBindingsGetVnicTypeEnum} [vnicType] vnic_type query parameter for /v2.0/ports/{port_id}/bindings API
     * @param {string} [status] status query parameter for /v2.0/ports/{port_id}/bindings API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {PortsPortIdBindingsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortBindingsApi
     */
    PortBindingsApi.prototype.portsPortIdBindingsGet = function (host, vifType, vnicType, status, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.PortBindingsApiFp)(this.configuration).portsPortIdBindingsGet(host, vifType, vnicType, status, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {PortsBindingsActivateActivateRequest} [portsBindingsActivateActivateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortBindingsApi
     */
    PortBindingsApi.prototype.portsPortIdBindingsIdActivatePut = function (portId, id, portsBindingsActivateActivateRequest, options) {
        var _this = this;
        return (0, exports.PortBindingsApiFp)(this.configuration).portsPortIdBindingsIdActivatePut(portId, id, portsBindingsActivateActivateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortBindingsApi
     */
    PortBindingsApi.prototype.portsPortIdBindingsIdDelete = function (portId, id, options) {
        var _this = this;
        return (0, exports.PortBindingsApiFp)(this.configuration).portsPortIdBindingsIdDelete(portId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortBindingsApi
     */
    PortBindingsApi.prototype.portsPortIdBindingsIdGet = function (portId, id, options) {
        var _this = this;
        return (0, exports.PortBindingsApiFp)(this.configuration).portsPortIdBindingsIdGet(portId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {string} id id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {PortsBindingUpdateRequest} [portsBindingUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortBindingsApi
     */
    PortBindingsApi.prototype.portsPortIdBindingsIdPut = function (portId, id, portsBindingUpdateRequest, options) {
        var _this = this;
        return (0, exports.PortBindingsApiFp)(this.configuration).portsPortIdBindingsIdPut(portId, id, portsBindingUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/bindings/{id} API
     * @param {PortsBindingsCreateRequest} [portsBindingsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortBindingsApi
     */
    PortBindingsApi.prototype.portsPortIdBindingsPost = function (portId, portsBindingsCreateRequest, options) {
        var _this = this;
        return (0, exports.PortBindingsApiFp)(this.configuration).portsPortIdBindingsPost(portId, portsBindingsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PortBindingsApi;
}(base_1.BaseAPI));
exports.PortBindingsApi = PortBindingsApi;
/**
 * @export
 */
exports.PortsPortIdBindingsGetVnicTypeEnum = {
    Normal: 'normal',
    Direct: 'direct',
    Macvtap: 'macvtap',
    Baremetal: 'baremetal',
    DirectPhysical: 'direct-physical',
    VirtioForwarder: 'virtio-forwarder',
    SmartNic: 'smart-nic',
    Vdpa: 'vdpa',
    AcceleratorDirect: 'accelerator-direct',
    AcceleratorDirectPhysical: 'accelerator-direct-physical',
    RemoteManaged: 'remote-managed'
};
/**
 * @export
 */
exports.PortsPortIdBindingsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * PortsApi - axios parameter creator
 * @export
 */
var PortsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/ports API
         * @param {string} [name] name query parameter for /v2.0/ports API
         * @param {string} [networkId] network_id query parameter for /v2.0/ports API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/ports API
         * @param {string} [macAddress] mac_address query parameter for /v2.0/ports API
         * @param {Array<string>} [fixedIps] fixed_ips query parameter for /v2.0/ports API
         * @param {string} [deviceId] device_id query parameter for /v2.0/ports API
         * @param {string} [deviceOwner] device_owner query parameter for /v2.0/ports API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/ports API
         * @param {string} [status] status query parameter for /v2.0/ports API
         * @param {string} [ipAllocation] ip_allocation query parameter for /v2.0/ports API
         * @param {string} [bindinghostId] binding:host_id query parameter for /v2.0/ports API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/ports API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/ports API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/ports API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/ports API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/ports API
         * @param {string} [description] description query parameter for /v2.0/ports API
         * @param {Array<string>} [securityGroups] security_groups query parameter for /v2.0/ports API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsGet: function (id_1, name_1, networkId_1, adminStateUp_1, macAddress_1, fixedIps_1, deviceId_1, deviceOwner_1, tenantId_1, status_1, ipAllocation_1, bindinghostId_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, securityGroups_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 24; _i < arguments.length; _i++) {
                args_1[_i - 24] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, networkId_1, adminStateUp_1, macAddress_1, fixedIps_1, deviceId_1, deviceOwner_1, tenantId_1, status_1, ipAllocation_1, bindinghostId_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, securityGroups_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, networkId, adminStateUp, macAddress, fixedIps, deviceId, deviceOwner, tenantId, status, ipAllocation, bindinghostId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, securityGroups, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/ports";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (networkId !== undefined) {
                                localVarQueryParameter['network_id'] = networkId;
                            }
                            if (adminStateUp !== undefined) {
                                for (_a = 0, _b = Object.entries(adminStateUp); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (macAddress !== undefined) {
                                localVarQueryParameter['mac_address'] = macAddress;
                            }
                            if (fixedIps) {
                                localVarQueryParameter['fixed_ips'] = fixedIps.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (deviceId !== undefined) {
                                localVarQueryParameter['device_id'] = deviceId;
                            }
                            if (deviceOwner !== undefined) {
                                localVarQueryParameter['device_owner'] = deviceOwner;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (status !== undefined) {
                                localVarQueryParameter['status'] = status;
                            }
                            if (ipAllocation !== undefined) {
                                localVarQueryParameter['ip_allocation'] = ipAllocation;
                            }
                            if (bindinghostId !== undefined) {
                                localVarQueryParameter['binding:host_id'] = bindinghostId;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (securityGroups) {
                                localVarQueryParameter['security_groups'] = securityGroups;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdAddAllowedAddressPairsPut: function (portId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, body_1], args_1, true), void 0, function (portId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdAddAllowedAddressPairsPut', 'portId', portId);
                            localVarPath = "/v2.0/ports/{port_id}/add_allowed_address_pairs"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdDelete: function (portId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1], args_1, true), void 0, function (portId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdDelete', 'portId', portId);
                            localVarPath = "/v2.0/ports/{port_id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdGet: function (portId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1], args_1, true), void 0, function (portId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdGet', 'portId', portId);
                            localVarPath = "/v2.0/ports/{port_id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {PortUpdateRequest} [portUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdPut: function (portId_1, portUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, portUpdateRequest_1], args_1, true), void 0, function (portId, portUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdPut', 'portId', portId);
                            localVarPath = "/v2.0/ports/{port_id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(portUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsDelete: function (portId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1], args_1, true), void 0, function (portId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdTagsDelete', 'portId', portId);
                            localVarPath = "/v2.0/ports/{port_id}/tags"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsPortIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/ports/{port_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdDelete: function (portId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, id_1], args_1, true), void 0, function (portId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdTagsIdDelete', 'portId', portId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/ports/{port_id}/tags/{id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdGet: function (portId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, id_1], args_1, true), void 0, function (portId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdTagsIdGet', 'portId', portId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/ports/{port_id}/tags/{id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdPut: function (portId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, id_1], args_1, true), void 0, function (portId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdTagsIdPut', 'portId', portId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/ports/{port_id}/tags/{id}"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {PortsTagsUpdateAllRequest} [portsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsPut: function (portId_1, portsTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portId_1, portsTagsUpdateAllRequest_1], args_1, true), void 0, function (portId, portsTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'portId' is not null or undefined
                            (0, common_1.assertParamExists)('portsPortIdTagsPut', 'portId', portId);
                            localVarPath = "/v2.0/ports/{port_id}/tags"
                                .replace("{".concat("port_id", "}"), encodeURIComponent(String(portId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(portsTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {PortsCreateRequest} [portsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPost: function (portsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([portsCreateRequest_1], args_1, true), void 0, function (portsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/ports";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(portsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PortsApiAxiosParamCreator = PortsApiAxiosParamCreator;
/**
 * PortsApi - functional programming interface
 * @export
 */
var PortsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PortsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/ports API
         * @param {string} [name] name query parameter for /v2.0/ports API
         * @param {string} [networkId] network_id query parameter for /v2.0/ports API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/ports API
         * @param {string} [macAddress] mac_address query parameter for /v2.0/ports API
         * @param {Array<string>} [fixedIps] fixed_ips query parameter for /v2.0/ports API
         * @param {string} [deviceId] device_id query parameter for /v2.0/ports API
         * @param {string} [deviceOwner] device_owner query parameter for /v2.0/ports API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/ports API
         * @param {string} [status] status query parameter for /v2.0/ports API
         * @param {string} [ipAllocation] ip_allocation query parameter for /v2.0/ports API
         * @param {string} [bindinghostId] binding:host_id query parameter for /v2.0/ports API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/ports API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/ports API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/ports API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/ports API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/ports API
         * @param {string} [description] description query parameter for /v2.0/ports API
         * @param {Array<string>} [securityGroups] security_groups query parameter for /v2.0/ports API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsGet: function (id, name, networkId, adminStateUp, macAddress, fixedIps, deviceId, deviceOwner, tenantId, status, ipAllocation, bindinghostId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, securityGroups, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsGet(id, name, networkId, adminStateUp, macAddress, fixedIps, deviceId, deviceOwner, tenantId, status, ipAllocation, bindinghostId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, securityGroups, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdAddAllowedAddressPairsPut: function (portId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdAddAllowedAddressPairsPut(portId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdAddAllowedAddressPairsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdDelete: function (portId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdDelete(portId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdGet: function (portId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdGet(portId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {PortUpdateRequest} [portUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdPut: function (portId, portUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdPut(portId, portUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsDelete: function (portId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdTagsDelete(portId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsPortIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdDelete: function (portId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdTagsIdDelete(portId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdGet: function (portId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdTagsIdGet(portId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdPut: function (portId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdTagsIdPut(portId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {PortsTagsUpdateAllRequest} [portsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsPut: function (portId, portsTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPortIdTagsPut(portId, portsTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPortIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {PortsCreateRequest} [portsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPost: function (portsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.portsPost(portsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PortsApi.portsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PortsApiFp = PortsApiFp;
/**
 * PortsApi - factory interface
 * @export
 */
var PortsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PortsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/ports API
         * @param {string} [name] name query parameter for /v2.0/ports API
         * @param {string} [networkId] network_id query parameter for /v2.0/ports API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/ports API
         * @param {string} [macAddress] mac_address query parameter for /v2.0/ports API
         * @param {Array<string>} [fixedIps] fixed_ips query parameter for /v2.0/ports API
         * @param {string} [deviceId] device_id query parameter for /v2.0/ports API
         * @param {string} [deviceOwner] device_owner query parameter for /v2.0/ports API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/ports API
         * @param {string} [status] status query parameter for /v2.0/ports API
         * @param {string} [ipAllocation] ip_allocation query parameter for /v2.0/ports API
         * @param {string} [bindinghostId] binding:host_id query parameter for /v2.0/ports API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/ports API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/ports API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/ports API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/ports API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/ports API
         * @param {string} [description] description query parameter for /v2.0/ports API
         * @param {Array<string>} [securityGroups] security_groups query parameter for /v2.0/ports API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsGet: function (id, name, networkId, adminStateUp, macAddress, fixedIps, deviceId, deviceOwner, tenantId, status, ipAllocation, bindinghostId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, securityGroups, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.portsGet(id, name, networkId, adminStateUp, macAddress, fixedIps, deviceId, deviceOwner, tenantId, status, ipAllocation, bindinghostId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, securityGroups, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdAddAllowedAddressPairsPut: function (portId, body, options) {
            return localVarFp.portsPortIdAddAllowedAddressPairsPut(portId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdDelete: function (portId, options) {
            return localVarFp.portsPortIdDelete(portId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdGet: function (portId, options) {
            return localVarFp.portsPortIdGet(portId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
         * @param {PortUpdateRequest} [portUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdPut: function (portId, portUpdateRequest, options) {
            return localVarFp.portsPortIdPut(portId, portUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsDelete: function (portId, options) {
            return localVarFp.portsPortIdTagsDelete(portId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {PortsPortIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.portsPortIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdDelete: function (portId, id, options) {
            return localVarFp.portsPortIdTagsIdDelete(portId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdGet: function (portId, id, options) {
            return localVarFp.portsPortIdTagsIdGet(portId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsIdPut: function (portId, id, options) {
            return localVarFp.portsPortIdTagsIdPut(portId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
         * @param {PortsTagsUpdateAllRequest} [portsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPortIdTagsPut: function (portId, portsTagsUpdateAllRequest, options) {
            return localVarFp.portsPortIdTagsPut(portId, portsTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {PortsCreateRequest} [portsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        portsPost: function (portsCreateRequest, options) {
            return localVarFp.portsPost(portsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PortsApiFactory = PortsApiFactory;
/**
 * PortsApi - object-oriented interface
 * @export
 * @class PortsApi
 * @extends {BaseAPI}
 */
var PortsApi = /** @class */ (function (_super) {
    __extends(PortsApi, _super);
    function PortsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/ports API
     * @param {string} [name] name query parameter for /v2.0/ports API
     * @param {string} [networkId] network_id query parameter for /v2.0/ports API
     * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/ports API
     * @param {string} [macAddress] mac_address query parameter for /v2.0/ports API
     * @param {Array<string>} [fixedIps] fixed_ips query parameter for /v2.0/ports API
     * @param {string} [deviceId] device_id query parameter for /v2.0/ports API
     * @param {string} [deviceOwner] device_owner query parameter for /v2.0/ports API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/ports API
     * @param {string} [status] status query parameter for /v2.0/ports API
     * @param {string} [ipAllocation] ip_allocation query parameter for /v2.0/ports API
     * @param {string} [bindinghostId] binding:host_id query parameter for /v2.0/ports API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/ports API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/ports API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/ports API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/ports API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/ports API
     * @param {string} [description] description query parameter for /v2.0/ports API
     * @param {Array<string>} [securityGroups] security_groups query parameter for /v2.0/ports API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {PortsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsGet = function (id, name, networkId, adminStateUp, macAddress, fixedIps, deviceId, deviceOwner, tenantId, status, ipAllocation, bindinghostId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, securityGroups, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsGet(id, name, networkId, adminStateUp, macAddress, fixedIps, deviceId, deviceOwner, tenantId, status, ipAllocation, bindinghostId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, securityGroups, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdAddAllowedAddressPairsPut = function (portId, body, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdAddAllowedAddressPairsPut(portId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdDelete = function (portId, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdDelete(portId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdGet = function (portId, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdGet(portId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/add_allowed_address_pairs API
     * @param {PortUpdateRequest} [portUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdPut = function (portId, portUpdateRequest, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdPut(portId, portUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdTagsDelete = function (portId, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdTagsDelete(portId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {PortsPortIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdTagsIdDelete = function (portId, id, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdTagsIdDelete(portId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdTagsIdGet = function (portId, id, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdTagsIdGet(portId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/ports/{port_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdTagsIdPut = function (portId, id, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdTagsIdPut(portId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} portId port_id parameter for /v2.0/ports/{port_id}/tags/{id} API
     * @param {PortsTagsUpdateAllRequest} [portsTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPortIdTagsPut = function (portId, portsTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPortIdTagsPut(portId, portsTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {PortsCreateRequest} [portsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortsApi
     */
    PortsApi.prototype.portsPost = function (portsCreateRequest, options) {
        var _this = this;
        return (0, exports.PortsApiFp)(this.configuration).portsPost(portsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PortsApi;
}(base_1.BaseAPI));
exports.PortsApi = PortsApi;
/**
 * @export
 */
exports.PortsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.PortsPortIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * QosApi - axios parameter creator
 * @export
 */
var QosApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string | number} [maxKbps] max_kbps query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {QosAliasBandwidthLimitRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string | number} [maxBurstKbps] max_burst_kbps query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasBandwidthLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesGet: function (id_1, maxKbps_1, direction_1, maxBurstKbps_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, maxKbps_1, direction_1, maxBurstKbps_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, maxKbps, direction, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/alias-bandwidth-limit-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _g.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (maxKbps !== undefined) {
                                for (_a = 0, _b = Object.entries(maxKbps); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (maxBurstKbps !== undefined) {
                                for (_d = 0, _e = Object.entries(maxBurstKbps); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasBandwidthLimitRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/alias-bandwidth-limit-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasBandwidthLimitRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/alias-bandwidth-limit-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {QosAliasBandwidthLimitRuleUpdateRequest} [qosAliasBandwidthLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdPut: function (id_1, qosAliasBandwidthLimitRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, qosAliasBandwidthLimitRuleUpdateRequest_1], args_1, true), void 0, function (id, qosAliasBandwidthLimitRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasBandwidthLimitRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/alias-bandwidth-limit-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosAliasBandwidthLimitRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosAliasBandwidthLimitRulesCreateRequest} [qosAliasBandwidthLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesPost: function (qosAliasBandwidthLimitRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([qosAliasBandwidthLimitRulesCreateRequest_1], args_1, true), void 0, function (qosAliasBandwidthLimitRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/alias-bandwidth-limit-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosAliasBandwidthLimitRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-dscp-marking-rules API
         * @param {QosAliasDscpMarkingRulesGetDscpMarkEnum} [dscpMark] dscp_mark query parameter for /v2.0/qos/alias-dscp-marking-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasDscpMarkingRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesGet: function (id_1, dscpMark_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 7; _i < arguments.length; _i++) {
                args_1[_i - 7] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, dscpMark_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/alias-dscp-marking-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (dscpMark !== undefined) {
                                localVarQueryParameter['dscp_mark'] = dscpMark;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasDscpMarkingRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/alias-dscp-marking-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasDscpMarkingRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/alias-dscp-marking-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {QosAliasDscpMarkingRuleUpdateRequest} [qosAliasDscpMarkingRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdPut: function (id_1, qosAliasDscpMarkingRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, qosAliasDscpMarkingRuleUpdateRequest_1], args_1, true), void 0, function (id, qosAliasDscpMarkingRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasDscpMarkingRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/alias-dscp-marking-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosAliasDscpMarkingRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosAliasDscpMarkingRulesCreateRequest} [qosAliasDscpMarkingRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesPost: function (qosAliasDscpMarkingRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([qosAliasDscpMarkingRulesCreateRequest_1], args_1, true), void 0, function (qosAliasDscpMarkingRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/alias-dscp-marking-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosAliasDscpMarkingRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {string | number} [minKbps] min_kbps query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {QosAliasMinimumBandwidthRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasMinimumBandwidthRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesGet: function (id_1, minKbps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, minKbps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/alias-minimum-bandwidth-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (minKbps !== undefined) {
                                for (_a = 0, _b = Object.entries(minKbps); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasMinimumBandwidthRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/alias-minimum-bandwidth-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasMinimumBandwidthRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/alias-minimum-bandwidth-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {QosAliasMinimumBandwidthRuleUpdateRequest} [qosAliasMinimumBandwidthRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdPut: function (id_1, qosAliasMinimumBandwidthRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, qosAliasMinimumBandwidthRuleUpdateRequest_1], args_1, true), void 0, function (id, qosAliasMinimumBandwidthRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasMinimumBandwidthRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/alias-minimum-bandwidth-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosAliasMinimumBandwidthRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosAliasMinimumBandwidthRulesCreateRequest} [qosAliasMinimumBandwidthRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesPost: function (qosAliasMinimumBandwidthRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([qosAliasMinimumBandwidthRulesCreateRequest_1], args_1, true), void 0, function (qosAliasMinimumBandwidthRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/alias-minimum-bandwidth-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosAliasMinimumBandwidthRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {string | number} [minKpps] min_kpps query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {QosAliasMinimumPacketRateRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasMinimumPacketRateRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesGet: function (id_1, minKpps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, minKpps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/alias-minimum-packet-rate-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (minKpps !== undefined) {
                                for (_a = 0, _b = Object.entries(minKpps); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasMinimumPacketRateRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/alias-minimum-packet-rate-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasMinimumPacketRateRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/alias-minimum-packet-rate-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {QosAliasMinimumPacketRateRuleUpdateRequest} [qosAliasMinimumPacketRateRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdPut: function (id_1, qosAliasMinimumPacketRateRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, qosAliasMinimumPacketRateRuleUpdateRequest_1], args_1, true), void 0, function (id, qosAliasMinimumPacketRateRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosAliasMinimumPacketRateRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/alias-minimum-packet-rate-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosAliasMinimumPacketRateRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosAliasMinimumPacketRateRulesCreateRequest} [qosAliasMinimumPacketRateRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesPost: function (qosAliasMinimumPacketRateRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([qosAliasMinimumPacketRateRulesCreateRequest_1], args_1, true), void 0, function (qosAliasMinimumPacketRateRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/alias-minimum-packet-rate-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosAliasMinimumPacketRateRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies API
         * @param {string} [name] name query parameter for /v2.0/qos/policies API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/qos/policies API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/qos/policies API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/qos/policies API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/qos/policies API
         * @param {string} [description] description query parameter for /v2.0/qos/policies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesGet: function (id_1, name_1, shared_1, tenantId_1, isDefault_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 16; _i < arguments.length; _i++) {
                args_1[_i - 16] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, shared_1, tenantId_1, isDefault_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, shared, tenantId, isDefault, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _g.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (shared !== undefined) {
                                for (_a = 0, _b = Object.entries(shared); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (isDefault !== undefined) {
                                for (_d = 0, _e = Object.entries(isDefault); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {QosPolicyUpdateRequest} [qosPolicyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdPut: function (id_1, qosPolicyUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, qosPolicyUpdateRequest_1], args_1, true), void 0, function (id, qosPolicyUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPolicyUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string | number} [maxKbps] max_kbps query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string | number} [maxBurstKbps] max_burst_kbps query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdBandwidthLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesGet: function (id_1, maxKbps_1, maxBurstKbps_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, maxKbps_1, maxBurstKbps_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, maxKbps, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/policies/{policy_id}/bandwidth_limit_rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _g.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (maxKbps !== undefined) {
                                for (_a = 0, _b = Object.entries(maxKbps); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (maxBurstKbps !== undefined) {
                                for (_d = 0, _e = Object.entries(maxBurstKbps); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdDelete: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdBandwidthLimitRulesIdDelete', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdBandwidthLimitRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdGet: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdBandwidthLimitRulesIdGet', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdBandwidthLimitRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {QosPoliciesBandwidthLimitRuleUpdateRequest} [qosPoliciesBandwidthLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdPut: function (policyId_1, id_1, qosPoliciesBandwidthLimitRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1, qosPoliciesBandwidthLimitRuleUpdateRequest_1], args_1, true), void 0, function (policyId, id, qosPoliciesBandwidthLimitRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdBandwidthLimitRulesIdPut', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdBandwidthLimitRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesBandwidthLimitRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {QosPoliciesBandwidthLimitRulesCreateRequest} [qosPoliciesBandwidthLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesPost: function (policyId_1, qosPoliciesBandwidthLimitRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, qosPoliciesBandwidthLimitRulesCreateRequest_1], args_1, true), void 0, function (policyId, qosPoliciesBandwidthLimitRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdBandwidthLimitRulesPost', 'policyId', policyId);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/bandwidth_limit_rules"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesBandwidthLimitRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules API
         * @param {QosPoliciesPolicyIdDscpMarkingRulesGetDscpMarkEnum} [dscpMark] dscp_mark query parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdDscpMarkingRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesGet: function (id_1, dscpMark_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 7; _i < arguments.length; _i++) {
                args_1[_i - 7] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, dscpMark_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/policies/{policy_id}/dscp_marking_rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (dscpMark !== undefined) {
                                localVarQueryParameter['dscp_mark'] = dscpMark;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdDelete: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdDscpMarkingRulesIdDelete', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdDscpMarkingRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdGet: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdDscpMarkingRulesIdGet', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdDscpMarkingRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {QosPoliciesDscpMarkingRuleUpdateRequest} [qosPoliciesDscpMarkingRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdPut: function (policyId_1, id_1, qosPoliciesDscpMarkingRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1, qosPoliciesDscpMarkingRuleUpdateRequest_1], args_1, true), void 0, function (policyId, id, qosPoliciesDscpMarkingRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdDscpMarkingRulesIdPut', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdDscpMarkingRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesDscpMarkingRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {QosPoliciesDscpMarkingRulesCreateRequest} [qosPoliciesDscpMarkingRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesPost: function (policyId_1, qosPoliciesDscpMarkingRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, qosPoliciesDscpMarkingRulesCreateRequest_1], args_1, true), void 0, function (policyId, qosPoliciesDscpMarkingRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdDscpMarkingRulesPost', 'policyId', policyId);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/dscp_marking_rules"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesDscpMarkingRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {string | number} [minKbps] min_kbps query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {QosPoliciesPolicyIdMinimumBandwidthRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdMinimumBandwidthRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesGet: function (id_1, minKbps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, minKbps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (minKbps !== undefined) {
                                for (_a = 0, _b = Object.entries(minKbps); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdGet: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumBandwidthRulesIdGet', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumBandwidthRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {QosPoliciesMinimumBandwidthRuleUpdateRequest} [qosPoliciesMinimumBandwidthRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdPut: function (policyId_1, id_1, qosPoliciesMinimumBandwidthRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1, qosPoliciesMinimumBandwidthRuleUpdateRequest_1], args_1, true), void 0, function (policyId, id, qosPoliciesMinimumBandwidthRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumBandwidthRulesIdPut', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumBandwidthRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesMinimumBandwidthRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {QosPoliciesMinimumBandwidthRulesCreateRequest} [qosPoliciesMinimumBandwidthRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesPost: function (policyId_1, qosPoliciesMinimumBandwidthRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, qosPoliciesMinimumBandwidthRulesCreateRequest_1], args_1, true), void 0, function (policyId, qosPoliciesMinimumBandwidthRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumBandwidthRulesPost', 'policyId', policyId);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesMinimumBandwidthRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {string | number} [minKpps] min_kpps query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {QosPoliciesPolicyIdMinimumPacketRateRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdMinimumPacketRateRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesGet: function (id_1, minKpps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 8; _i < arguments.length; _i++) {
                args_1[_i - 8] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, minKpps_1, direction_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (minKpps !== undefined) {
                                for (_a = 0, _b = Object.entries(minKpps); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdGet: function (policyId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1], args_1, true), void 0, function (policyId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumPacketRateRulesIdGet', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumPacketRateRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {QosPoliciesMinimumPacketRateRuleUpdateRequest} [qosPoliciesMinimumPacketRateRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdPut: function (policyId_1, id_1, qosPoliciesMinimumPacketRateRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, id_1, qosPoliciesMinimumPacketRateRuleUpdateRequest_1], args_1, true), void 0, function (policyId, id, qosPoliciesMinimumPacketRateRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumPacketRateRulesIdPut', 'policyId', policyId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumPacketRateRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesMinimumPacketRateRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {QosPoliciesMinimumPacketRateRulesCreateRequest} [qosPoliciesMinimumPacketRateRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesPost: function (policyId_1, qosPoliciesMinimumPacketRateRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, qosPoliciesMinimumPacketRateRulesCreateRequest_1], args_1, true), void 0, function (policyId, qosPoliciesMinimumPacketRateRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('qosPoliciesPolicyIdMinimumPacketRateRulesPost', 'policyId', policyId);
                            localVarPath = "/v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesMinimumPacketRateRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosPoliciesCreateRequest} [qosPoliciesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPost: function (qosPoliciesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([qosPoliciesCreateRequest_1], args_1, true), void 0, function (qosPoliciesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosPoliciesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string | boolean | null} [allRules] all_rules query parameter for /v2.0/qos/rule-types API
         * @param {string | boolean | null} [allSupported] all_supported query parameter for /v2.0/qos/rule-types API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosRuleTypesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesGet: function (allRules_1, allSupported_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 7; _i < arguments.length; _i++) {
                args_1[_i - 7] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([allRules_1, allSupported_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (allRules, allSupported, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/rule-types";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _g.sent();
                            if (allRules !== undefined) {
                                for (_a = 0, _b = Object.entries(allRules); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (allSupported !== undefined) {
                                for (_d = 0, _e = Object.entries(allSupported); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosRuleTypesIdDelete', 'id', id);
                            localVarPath = "/v2.0/qos/rule-types/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosRuleTypesIdGet', 'id', id);
                            localVarPath = "/v2.0/qos/rule-types/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {QosRuleTypeUpdateRequest} [qosRuleTypeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdPut: function (id_1, qosRuleTypeUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, qosRuleTypeUpdateRequest_1], args_1, true), void 0, function (id, qosRuleTypeUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('qosRuleTypesIdPut', 'id', id);
                            localVarPath = "/v2.0/qos/rule-types/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosRuleTypeUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosRuleTypesCreateRequest} [qosRuleTypesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesPost: function (qosRuleTypesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([qosRuleTypesCreateRequest_1], args_1, true), void 0, function (qosRuleTypesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/qos/rule-types";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(qosRuleTypesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.QosApiAxiosParamCreator = QosApiAxiosParamCreator;
/**
 * QosApi - functional programming interface
 * @export
 */
var QosApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.QosApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string | number} [maxKbps] max_kbps query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {QosAliasBandwidthLimitRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string | number} [maxBurstKbps] max_burst_kbps query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasBandwidthLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesGet: function (id, maxKbps, direction, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasBandwidthLimitRulesGet(id, maxKbps, direction, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasBandwidthLimitRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasBandwidthLimitRulesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasBandwidthLimitRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasBandwidthLimitRulesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasBandwidthLimitRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {QosAliasBandwidthLimitRuleUpdateRequest} [qosAliasBandwidthLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdPut: function (id, qosAliasBandwidthLimitRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasBandwidthLimitRulesIdPut(id, qosAliasBandwidthLimitRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasBandwidthLimitRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosAliasBandwidthLimitRulesCreateRequest} [qosAliasBandwidthLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesPost: function (qosAliasBandwidthLimitRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasBandwidthLimitRulesPost(qosAliasBandwidthLimitRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasBandwidthLimitRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-dscp-marking-rules API
         * @param {QosAliasDscpMarkingRulesGetDscpMarkEnum} [dscpMark] dscp_mark query parameter for /v2.0/qos/alias-dscp-marking-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasDscpMarkingRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesGet: function (id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasDscpMarkingRulesGet(id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasDscpMarkingRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasDscpMarkingRulesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasDscpMarkingRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasDscpMarkingRulesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasDscpMarkingRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {QosAliasDscpMarkingRuleUpdateRequest} [qosAliasDscpMarkingRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdPut: function (id, qosAliasDscpMarkingRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasDscpMarkingRulesIdPut(id, qosAliasDscpMarkingRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasDscpMarkingRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosAliasDscpMarkingRulesCreateRequest} [qosAliasDscpMarkingRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesPost: function (qosAliasDscpMarkingRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasDscpMarkingRulesPost(qosAliasDscpMarkingRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasDscpMarkingRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {string | number} [minKbps] min_kbps query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {QosAliasMinimumBandwidthRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasMinimumBandwidthRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesGet: function (id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumBandwidthRulesGet(id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumBandwidthRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumBandwidthRulesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumBandwidthRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumBandwidthRulesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumBandwidthRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {QosAliasMinimumBandwidthRuleUpdateRequest} [qosAliasMinimumBandwidthRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdPut: function (id, qosAliasMinimumBandwidthRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumBandwidthRulesIdPut(id, qosAliasMinimumBandwidthRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumBandwidthRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosAliasMinimumBandwidthRulesCreateRequest} [qosAliasMinimumBandwidthRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesPost: function (qosAliasMinimumBandwidthRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumBandwidthRulesPost(qosAliasMinimumBandwidthRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumBandwidthRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {string | number} [minKpps] min_kpps query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {QosAliasMinimumPacketRateRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasMinimumPacketRateRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesGet: function (id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumPacketRateRulesGet(id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumPacketRateRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumPacketRateRulesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumPacketRateRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumPacketRateRulesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumPacketRateRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {QosAliasMinimumPacketRateRuleUpdateRequest} [qosAliasMinimumPacketRateRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdPut: function (id, qosAliasMinimumPacketRateRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumPacketRateRulesIdPut(id, qosAliasMinimumPacketRateRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumPacketRateRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosAliasMinimumPacketRateRulesCreateRequest} [qosAliasMinimumPacketRateRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesPost: function (qosAliasMinimumPacketRateRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosAliasMinimumPacketRateRulesPost(qosAliasMinimumPacketRateRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosAliasMinimumPacketRateRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies API
         * @param {string} [name] name query parameter for /v2.0/qos/policies API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/qos/policies API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/qos/policies API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/qos/policies API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/qos/policies API
         * @param {string} [description] description query parameter for /v2.0/qos/policies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesGet: function (id, name, shared, tenantId, isDefault, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesGet(id, name, shared, tenantId, isDefault, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {QosPolicyUpdateRequest} [qosPolicyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdPut: function (id, qosPolicyUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesIdPut(id, qosPolicyUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string | number} [maxKbps] max_kbps query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string | number} [maxBurstKbps] max_burst_kbps query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdBandwidthLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesGet: function (id, maxKbps, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdBandwidthLimitRulesGet(id, maxKbps, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdBandwidthLimitRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdDelete: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdBandwidthLimitRulesIdDelete(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdBandwidthLimitRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdGet: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdBandwidthLimitRulesIdGet(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdBandwidthLimitRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {QosPoliciesBandwidthLimitRuleUpdateRequest} [qosPoliciesBandwidthLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdPut: function (policyId, id, qosPoliciesBandwidthLimitRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdBandwidthLimitRulesIdPut(policyId, id, qosPoliciesBandwidthLimitRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdBandwidthLimitRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {QosPoliciesBandwidthLimitRulesCreateRequest} [qosPoliciesBandwidthLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesPost: function (policyId, qosPoliciesBandwidthLimitRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdBandwidthLimitRulesPost(policyId, qosPoliciesBandwidthLimitRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdBandwidthLimitRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules API
         * @param {QosPoliciesPolicyIdDscpMarkingRulesGetDscpMarkEnum} [dscpMark] dscp_mark query parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdDscpMarkingRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesGet: function (id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdDscpMarkingRulesGet(id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdDscpMarkingRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdDelete: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdDscpMarkingRulesIdDelete(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdDscpMarkingRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdGet: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdDscpMarkingRulesIdGet(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdDscpMarkingRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {QosPoliciesDscpMarkingRuleUpdateRequest} [qosPoliciesDscpMarkingRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdPut: function (policyId, id, qosPoliciesDscpMarkingRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdDscpMarkingRulesIdPut(policyId, id, qosPoliciesDscpMarkingRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdDscpMarkingRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {QosPoliciesDscpMarkingRulesCreateRequest} [qosPoliciesDscpMarkingRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesPost: function (policyId, qosPoliciesDscpMarkingRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdDscpMarkingRulesPost(policyId, qosPoliciesDscpMarkingRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdDscpMarkingRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {string | number} [minKbps] min_kbps query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {QosPoliciesPolicyIdMinimumBandwidthRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdMinimumBandwidthRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesGet: function (id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumBandwidthRulesGet(id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumBandwidthRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdGet: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumBandwidthRulesIdGet(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumBandwidthRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {QosPoliciesMinimumBandwidthRuleUpdateRequest} [qosPoliciesMinimumBandwidthRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdPut: function (policyId, id, qosPoliciesMinimumBandwidthRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumBandwidthRulesIdPut(policyId, id, qosPoliciesMinimumBandwidthRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumBandwidthRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {QosPoliciesMinimumBandwidthRulesCreateRequest} [qosPoliciesMinimumBandwidthRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesPost: function (policyId, qosPoliciesMinimumBandwidthRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumBandwidthRulesPost(policyId, qosPoliciesMinimumBandwidthRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumBandwidthRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {string | number} [minKpps] min_kpps query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {QosPoliciesPolicyIdMinimumPacketRateRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdMinimumPacketRateRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesGet: function (id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumPacketRateRulesGet(id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumPacketRateRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdGet: function (policyId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumPacketRateRulesIdGet(policyId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumPacketRateRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {QosPoliciesMinimumPacketRateRuleUpdateRequest} [qosPoliciesMinimumPacketRateRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdPut: function (policyId, id, qosPoliciesMinimumPacketRateRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumPacketRateRulesIdPut(policyId, id, qosPoliciesMinimumPacketRateRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumPacketRateRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {QosPoliciesMinimumPacketRateRulesCreateRequest} [qosPoliciesMinimumPacketRateRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesPost: function (policyId, qosPoliciesMinimumPacketRateRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPolicyIdMinimumPacketRateRulesPost(policyId, qosPoliciesMinimumPacketRateRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPolicyIdMinimumPacketRateRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosPoliciesCreateRequest} [qosPoliciesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPost: function (qosPoliciesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosPoliciesPost(qosPoliciesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosPoliciesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string | boolean | null} [allRules] all_rules query parameter for /v2.0/qos/rule-types API
         * @param {string | boolean | null} [allSupported] all_supported query parameter for /v2.0/qos/rule-types API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosRuleTypesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesGet: function (allRules, allSupported, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosRuleTypesGet(allRules, allSupported, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosRuleTypesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosRuleTypesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosRuleTypesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosRuleTypesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosRuleTypesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {QosRuleTypeUpdateRequest} [qosRuleTypeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdPut: function (id, qosRuleTypeUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosRuleTypesIdPut(id, qosRuleTypeUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosRuleTypesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {QosRuleTypesCreateRequest} [qosRuleTypesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesPost: function (qosRuleTypesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.qosRuleTypesPost(qosRuleTypesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QosApi.qosRuleTypesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.QosApiFp = QosApiFp;
/**
 * QosApi - factory interface
 * @export
 */
var QosApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.QosApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string | number} [maxKbps] max_kbps query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {QosAliasBandwidthLimitRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string | number} [maxBurstKbps] max_burst_kbps query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasBandwidthLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesGet: function (id, maxKbps, direction, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosAliasBandwidthLimitRulesGet(id, maxKbps, direction, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdDelete: function (id, options) {
            return localVarFp.qosAliasBandwidthLimitRulesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdGet: function (id, options) {
            return localVarFp.qosAliasBandwidthLimitRulesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
         * @param {QosAliasBandwidthLimitRuleUpdateRequest} [qosAliasBandwidthLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesIdPut: function (id, qosAliasBandwidthLimitRuleUpdateRequest, options) {
            return localVarFp.qosAliasBandwidthLimitRulesIdPut(id, qosAliasBandwidthLimitRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {QosAliasBandwidthLimitRulesCreateRequest} [qosAliasBandwidthLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasBandwidthLimitRulesPost: function (qosAliasBandwidthLimitRulesCreateRequest, options) {
            return localVarFp.qosAliasBandwidthLimitRulesPost(qosAliasBandwidthLimitRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-dscp-marking-rules API
         * @param {QosAliasDscpMarkingRulesGetDscpMarkEnum} [dscpMark] dscp_mark query parameter for /v2.0/qos/alias-dscp-marking-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasDscpMarkingRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesGet: function (id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosAliasDscpMarkingRulesGet(id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdDelete: function (id, options) {
            return localVarFp.qosAliasDscpMarkingRulesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdGet: function (id, options) {
            return localVarFp.qosAliasDscpMarkingRulesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
         * @param {QosAliasDscpMarkingRuleUpdateRequest} [qosAliasDscpMarkingRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesIdPut: function (id, qosAliasDscpMarkingRuleUpdateRequest, options) {
            return localVarFp.qosAliasDscpMarkingRulesIdPut(id, qosAliasDscpMarkingRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {QosAliasDscpMarkingRulesCreateRequest} [qosAliasDscpMarkingRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasDscpMarkingRulesPost: function (qosAliasDscpMarkingRulesCreateRequest, options) {
            return localVarFp.qosAliasDscpMarkingRulesPost(qosAliasDscpMarkingRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {string | number} [minKbps] min_kbps query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {QosAliasMinimumBandwidthRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasMinimumBandwidthRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesGet: function (id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosAliasMinimumBandwidthRulesGet(id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdDelete: function (id, options) {
            return localVarFp.qosAliasMinimumBandwidthRulesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdGet: function (id, options) {
            return localVarFp.qosAliasMinimumBandwidthRulesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
         * @param {QosAliasMinimumBandwidthRuleUpdateRequest} [qosAliasMinimumBandwidthRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesIdPut: function (id, qosAliasMinimumBandwidthRuleUpdateRequest, options) {
            return localVarFp.qosAliasMinimumBandwidthRulesIdPut(id, qosAliasMinimumBandwidthRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {QosAliasMinimumBandwidthRulesCreateRequest} [qosAliasMinimumBandwidthRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumBandwidthRulesPost: function (qosAliasMinimumBandwidthRulesCreateRequest, options) {
            return localVarFp.qosAliasMinimumBandwidthRulesPost(qosAliasMinimumBandwidthRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {string | number} [minKpps] min_kpps query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {QosAliasMinimumPacketRateRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosAliasMinimumPacketRateRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesGet: function (id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosAliasMinimumPacketRateRulesGet(id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdDelete: function (id, options) {
            return localVarFp.qosAliasMinimumPacketRateRulesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdGet: function (id, options) {
            return localVarFp.qosAliasMinimumPacketRateRulesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
         * @param {QosAliasMinimumPacketRateRuleUpdateRequest} [qosAliasMinimumPacketRateRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesIdPut: function (id, qosAliasMinimumPacketRateRuleUpdateRequest, options) {
            return localVarFp.qosAliasMinimumPacketRateRulesIdPut(id, qosAliasMinimumPacketRateRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {QosAliasMinimumPacketRateRulesCreateRequest} [qosAliasMinimumPacketRateRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosAliasMinimumPacketRateRulesPost: function (qosAliasMinimumPacketRateRulesCreateRequest, options) {
            return localVarFp.qosAliasMinimumPacketRateRulesPost(qosAliasMinimumPacketRateRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies API
         * @param {string} [name] name query parameter for /v2.0/qos/policies API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/qos/policies API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/qos/policies API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/qos/policies API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/qos/policies API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/qos/policies API
         * @param {string} [description] description query parameter for /v2.0/qos/policies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesGet: function (id, name, shared, tenantId, isDefault, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosPoliciesGet(id, name, shared, tenantId, isDefault, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdDelete: function (id, options) {
            return localVarFp.qosPoliciesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdGet: function (id, options) {
            return localVarFp.qosPoliciesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/policies/{id} API
         * @param {QosPolicyUpdateRequest} [qosPolicyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesIdPut: function (id, qosPolicyUpdateRequest, options) {
            return localVarFp.qosPoliciesIdPut(id, qosPolicyUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string | number} [maxKbps] max_kbps query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string | number} [maxBurstKbps] max_burst_kbps query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdBandwidthLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesGet: function (id, maxKbps, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosPoliciesPolicyIdBandwidthLimitRulesGet(id, maxKbps, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdDelete: function (policyId, id, options) {
            return localVarFp.qosPoliciesPolicyIdBandwidthLimitRulesIdDelete(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdGet: function (policyId, id, options) {
            return localVarFp.qosPoliciesPolicyIdBandwidthLimitRulesIdGet(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {QosPoliciesBandwidthLimitRuleUpdateRequest} [qosPoliciesBandwidthLimitRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesIdPut: function (policyId, id, qosPoliciesBandwidthLimitRuleUpdateRequest, options) {
            return localVarFp.qosPoliciesPolicyIdBandwidthLimitRulesIdPut(policyId, id, qosPoliciesBandwidthLimitRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
         * @param {QosPoliciesBandwidthLimitRulesCreateRequest} [qosPoliciesBandwidthLimitRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdBandwidthLimitRulesPost: function (policyId, qosPoliciesBandwidthLimitRulesCreateRequest, options) {
            return localVarFp.qosPoliciesPolicyIdBandwidthLimitRulesPost(policyId, qosPoliciesBandwidthLimitRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules API
         * @param {QosPoliciesPolicyIdDscpMarkingRulesGetDscpMarkEnum} [dscpMark] dscp_mark query parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdDscpMarkingRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesGet: function (id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosPoliciesPolicyIdDscpMarkingRulesGet(id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdDelete: function (policyId, id, options) {
            return localVarFp.qosPoliciesPolicyIdDscpMarkingRulesIdDelete(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdGet: function (policyId, id, options) {
            return localVarFp.qosPoliciesPolicyIdDscpMarkingRulesIdGet(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {QosPoliciesDscpMarkingRuleUpdateRequest} [qosPoliciesDscpMarkingRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesIdPut: function (policyId, id, qosPoliciesDscpMarkingRuleUpdateRequest, options) {
            return localVarFp.qosPoliciesPolicyIdDscpMarkingRulesIdPut(policyId, id, qosPoliciesDscpMarkingRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
         * @param {QosPoliciesDscpMarkingRulesCreateRequest} [qosPoliciesDscpMarkingRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdDscpMarkingRulesPost: function (policyId, qosPoliciesDscpMarkingRulesCreateRequest, options) {
            return localVarFp.qosPoliciesPolicyIdDscpMarkingRulesPost(policyId, qosPoliciesDscpMarkingRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {string | number} [minKbps] min_kbps query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {QosPoliciesPolicyIdMinimumBandwidthRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdMinimumBandwidthRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesGet: function (id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumBandwidthRulesGet(id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete: function (policyId, id, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdGet: function (policyId, id, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumBandwidthRulesIdGet(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {QosPoliciesMinimumBandwidthRuleUpdateRequest} [qosPoliciesMinimumBandwidthRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesIdPut: function (policyId, id, qosPoliciesMinimumBandwidthRuleUpdateRequest, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumBandwidthRulesIdPut(policyId, id, qosPoliciesMinimumBandwidthRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
         * @param {QosPoliciesMinimumBandwidthRulesCreateRequest} [qosPoliciesMinimumBandwidthRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumBandwidthRulesPost: function (policyId, qosPoliciesMinimumBandwidthRulesCreateRequest, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumBandwidthRulesPost(policyId, qosPoliciesMinimumBandwidthRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {string | number} [minKpps] min_kpps query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {QosPoliciesPolicyIdMinimumPacketRateRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosPoliciesPolicyIdMinimumPacketRateRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesGet: function (id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumPacketRateRulesGet(id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete: function (policyId, id, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdGet: function (policyId, id, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumPacketRateRulesIdGet(policyId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {QosPoliciesMinimumPacketRateRuleUpdateRequest} [qosPoliciesMinimumPacketRateRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesIdPut: function (policyId, id, qosPoliciesMinimumPacketRateRuleUpdateRequest, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumPacketRateRulesIdPut(policyId, id, qosPoliciesMinimumPacketRateRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
         * @param {QosPoliciesMinimumPacketRateRulesCreateRequest} [qosPoliciesMinimumPacketRateRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPolicyIdMinimumPacketRateRulesPost: function (policyId, qosPoliciesMinimumPacketRateRulesCreateRequest, options) {
            return localVarFp.qosPoliciesPolicyIdMinimumPacketRateRulesPost(policyId, qosPoliciesMinimumPacketRateRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {QosPoliciesCreateRequest} [qosPoliciesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosPoliciesPost: function (qosPoliciesCreateRequest, options) {
            return localVarFp.qosPoliciesPost(qosPoliciesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string | boolean | null} [allRules] all_rules query parameter for /v2.0/qos/rule-types API
         * @param {string | boolean | null} [allSupported] all_supported query parameter for /v2.0/qos/rule-types API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QosRuleTypesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesGet: function (allRules, allSupported, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.qosRuleTypesGet(allRules, allSupported, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdDelete: function (id, options) {
            return localVarFp.qosRuleTypesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdGet: function (id, options) {
            return localVarFp.qosRuleTypesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
         * @param {QosRuleTypeUpdateRequest} [qosRuleTypeUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesIdPut: function (id, qosRuleTypeUpdateRequest, options) {
            return localVarFp.qosRuleTypesIdPut(id, qosRuleTypeUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {QosRuleTypesCreateRequest} [qosRuleTypesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        qosRuleTypesPost: function (qosRuleTypesCreateRequest, options) {
            return localVarFp.qosRuleTypesPost(qosRuleTypesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.QosApiFactory = QosApiFactory;
/**
 * QosApi - object-oriented interface
 * @export
 * @class QosApi
 * @extends {BaseAPI}
 */
var QosApi = /** @class */ (function (_super) {
    __extends(QosApi, _super);
    function QosApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
     * @param {string | number} [maxKbps] max_kbps query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
     * @param {QosAliasBandwidthLimitRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
     * @param {string | number} [maxBurstKbps] max_burst_kbps query parameter for /v2.0/qos/alias-bandwidth-limit-rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosAliasBandwidthLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasBandwidthLimitRulesGet = function (id, maxKbps, direction, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasBandwidthLimitRulesGet(id, maxKbps, direction, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasBandwidthLimitRulesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasBandwidthLimitRulesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasBandwidthLimitRulesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasBandwidthLimitRulesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-bandwidth-limit-rules/{id} API
     * @param {QosAliasBandwidthLimitRuleUpdateRequest} [qosAliasBandwidthLimitRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasBandwidthLimitRulesIdPut = function (id, qosAliasBandwidthLimitRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasBandwidthLimitRulesIdPut(id, qosAliasBandwidthLimitRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {QosAliasBandwidthLimitRulesCreateRequest} [qosAliasBandwidthLimitRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasBandwidthLimitRulesPost = function (qosAliasBandwidthLimitRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasBandwidthLimitRulesPost(qosAliasBandwidthLimitRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/alias-dscp-marking-rules API
     * @param {QosAliasDscpMarkingRulesGetDscpMarkEnum} [dscpMark] dscp_mark query parameter for /v2.0/qos/alias-dscp-marking-rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosAliasDscpMarkingRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasDscpMarkingRulesGet = function (id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasDscpMarkingRulesGet(id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasDscpMarkingRulesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasDscpMarkingRulesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasDscpMarkingRulesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasDscpMarkingRulesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-dscp-marking-rules/{id} API
     * @param {QosAliasDscpMarkingRuleUpdateRequest} [qosAliasDscpMarkingRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasDscpMarkingRulesIdPut = function (id, qosAliasDscpMarkingRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasDscpMarkingRulesIdPut(id, qosAliasDscpMarkingRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {QosAliasDscpMarkingRulesCreateRequest} [qosAliasDscpMarkingRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasDscpMarkingRulesPost = function (qosAliasDscpMarkingRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasDscpMarkingRulesPost(qosAliasDscpMarkingRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
     * @param {string | number} [minKbps] min_kbps query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
     * @param {QosAliasMinimumBandwidthRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-minimum-bandwidth-rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosAliasMinimumBandwidthRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumBandwidthRulesGet = function (id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumBandwidthRulesGet(id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumBandwidthRulesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumBandwidthRulesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumBandwidthRulesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumBandwidthRulesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-minimum-bandwidth-rules/{id} API
     * @param {QosAliasMinimumBandwidthRuleUpdateRequest} [qosAliasMinimumBandwidthRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumBandwidthRulesIdPut = function (id, qosAliasMinimumBandwidthRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumBandwidthRulesIdPut(id, qosAliasMinimumBandwidthRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {QosAliasMinimumBandwidthRulesCreateRequest} [qosAliasMinimumBandwidthRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumBandwidthRulesPost = function (qosAliasMinimumBandwidthRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumBandwidthRulesPost(qosAliasMinimumBandwidthRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
     * @param {string | number} [minKpps] min_kpps query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
     * @param {QosAliasMinimumPacketRateRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/alias-minimum-packet-rate-rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosAliasMinimumPacketRateRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumPacketRateRulesGet = function (id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumPacketRateRulesGet(id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumPacketRateRulesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumPacketRateRulesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumPacketRateRulesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumPacketRateRulesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/alias-minimum-packet-rate-rules/{id} API
     * @param {QosAliasMinimumPacketRateRuleUpdateRequest} [qosAliasMinimumPacketRateRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumPacketRateRulesIdPut = function (id, qosAliasMinimumPacketRateRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumPacketRateRulesIdPut(id, qosAliasMinimumPacketRateRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {QosAliasMinimumPacketRateRulesCreateRequest} [qosAliasMinimumPacketRateRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosAliasMinimumPacketRateRulesPost = function (qosAliasMinimumPacketRateRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosAliasMinimumPacketRateRulesPost(qosAliasMinimumPacketRateRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/policies API
     * @param {string} [name] name query parameter for /v2.0/qos/policies API
     * @param {string | boolean} [shared] shared query parameter for /v2.0/qos/policies API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/qos/policies API
     * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/qos/policies API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/qos/policies API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/qos/policies API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/qos/policies API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/qos/policies API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/qos/policies API
     * @param {string} [description] description query parameter for /v2.0/qos/policies API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosPoliciesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesGet = function (id, name, shared, tenantId, isDefault, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesGet(id, name, shared, tenantId, isDefault, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/policies/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/policies/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/policies/{id} API
     * @param {QosPolicyUpdateRequest} [qosPolicyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesIdPut = function (id, qosPolicyUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesIdPut(id, qosPolicyUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
     * @param {string | number} [maxKbps] max_kbps query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
     * @param {string | number} [maxBurstKbps] max_burst_kbps query parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosPoliciesPolicyIdBandwidthLimitRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdBandwidthLimitRulesGet = function (id, maxKbps, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdBandwidthLimitRulesGet(id, maxKbps, maxBurstKbps, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdBandwidthLimitRulesIdDelete = function (policyId, id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdBandwidthLimitRulesIdDelete(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdBandwidthLimitRulesIdGet = function (policyId, id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdBandwidthLimitRulesIdGet(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
     * @param {QosPoliciesBandwidthLimitRuleUpdateRequest} [qosPoliciesBandwidthLimitRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdBandwidthLimitRulesIdPut = function (policyId, id, qosPoliciesBandwidthLimitRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdBandwidthLimitRulesIdPut(policyId, id, qosPoliciesBandwidthLimitRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/bandwidth_limit_rules/{id} API
     * @param {QosPoliciesBandwidthLimitRulesCreateRequest} [qosPoliciesBandwidthLimitRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdBandwidthLimitRulesPost = function (policyId, qosPoliciesBandwidthLimitRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdBandwidthLimitRulesPost(policyId, qosPoliciesBandwidthLimitRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules API
     * @param {QosPoliciesPolicyIdDscpMarkingRulesGetDscpMarkEnum} [dscpMark] dscp_mark query parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosPoliciesPolicyIdDscpMarkingRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdDscpMarkingRulesGet = function (id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdDscpMarkingRulesGet(id, dscpMark, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdDscpMarkingRulesIdDelete = function (policyId, id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdDscpMarkingRulesIdDelete(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdDscpMarkingRulesIdGet = function (policyId, id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdDscpMarkingRulesIdGet(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
     * @param {QosPoliciesDscpMarkingRuleUpdateRequest} [qosPoliciesDscpMarkingRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdDscpMarkingRulesIdPut = function (policyId, id, qosPoliciesDscpMarkingRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdDscpMarkingRulesIdPut(policyId, id, qosPoliciesDscpMarkingRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/dscp_marking_rules/{id} API
     * @param {QosPoliciesDscpMarkingRulesCreateRequest} [qosPoliciesDscpMarkingRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdDscpMarkingRulesPost = function (policyId, qosPoliciesDscpMarkingRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdDscpMarkingRulesPost(policyId, qosPoliciesDscpMarkingRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
     * @param {string | number} [minKbps] min_kbps query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
     * @param {QosPoliciesPolicyIdMinimumBandwidthRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosPoliciesPolicyIdMinimumBandwidthRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumBandwidthRulesGet = function (id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumBandwidthRulesGet(id, minKbps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete = function (policyId, id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumBandwidthRulesIdDelete(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumBandwidthRulesIdGet = function (policyId, id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumBandwidthRulesIdGet(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
     * @param {QosPoliciesMinimumBandwidthRuleUpdateRequest} [qosPoliciesMinimumBandwidthRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumBandwidthRulesIdPut = function (policyId, id, qosPoliciesMinimumBandwidthRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumBandwidthRulesIdPut(policyId, id, qosPoliciesMinimumBandwidthRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum_bandwidth_rules/{id} API
     * @param {QosPoliciesMinimumBandwidthRulesCreateRequest} [qosPoliciesMinimumBandwidthRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumBandwidthRulesPost = function (policyId, qosPoliciesMinimumBandwidthRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumBandwidthRulesPost(policyId, qosPoliciesMinimumBandwidthRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
     * @param {string | number} [minKpps] min_kpps query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
     * @param {QosPoliciesPolicyIdMinimumPacketRateRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosPoliciesPolicyIdMinimumPacketRateRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumPacketRateRulesGet = function (id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumPacketRateRulesGet(id, minKpps, direction, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete = function (policyId, id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumPacketRateRulesIdDelete(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumPacketRateRulesIdGet = function (policyId, id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumPacketRateRulesIdGet(policyId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
     * @param {string} id id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
     * @param {QosPoliciesMinimumPacketRateRuleUpdateRequest} [qosPoliciesMinimumPacketRateRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumPacketRateRulesIdPut = function (policyId, id, qosPoliciesMinimumPacketRateRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumPacketRateRulesIdPut(policyId, id, qosPoliciesMinimumPacketRateRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} policyId policy_id parameter for /v2.0/qos/policies/{policy_id}/minimum-packet-rate-rules/{id} API
     * @param {QosPoliciesMinimumPacketRateRulesCreateRequest} [qosPoliciesMinimumPacketRateRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPolicyIdMinimumPacketRateRulesPost = function (policyId, qosPoliciesMinimumPacketRateRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPolicyIdMinimumPacketRateRulesPost(policyId, qosPoliciesMinimumPacketRateRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {QosPoliciesCreateRequest} [qosPoliciesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosPoliciesPost = function (qosPoliciesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosPoliciesPost(qosPoliciesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string | boolean | null} [allRules] all_rules query parameter for /v2.0/qos/rule-types API
     * @param {string | boolean | null} [allSupported] all_supported query parameter for /v2.0/qos/rule-types API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QosRuleTypesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosRuleTypesGet = function (allRules, allSupported, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosRuleTypesGet(allRules, allSupported, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosRuleTypesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosRuleTypesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosRuleTypesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosRuleTypesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/qos/rule-types/{id} API
     * @param {QosRuleTypeUpdateRequest} [qosRuleTypeUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosRuleTypesIdPut = function (id, qosRuleTypeUpdateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosRuleTypesIdPut(id, qosRuleTypeUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {QosRuleTypesCreateRequest} [qosRuleTypesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QosApi
     */
    QosApi.prototype.qosRuleTypesPost = function (qosRuleTypesCreateRequest, options) {
        var _this = this;
        return (0, exports.QosApiFp)(this.configuration).qosRuleTypesPost(qosRuleTypesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QosApi;
}(base_1.BaseAPI));
exports.QosApi = QosApi;
/**
 * @export
 */
exports.QosAliasBandwidthLimitRulesGetDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.QosAliasBandwidthLimitRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosAliasDscpMarkingRulesGetDscpMarkEnum = {
    _0: '0',
    _8: '8',
    _10: '10',
    _12: '12',
    _14: '14',
    _16: '16',
    _18: '18',
    _20: '20',
    _22: '22',
    _24: '24',
    _26: '26',
    _28: '28',
    _30: '30',
    _32: '32',
    _34: '34',
    _36: '36',
    _38: '38',
    _40: '40',
    _44: '44',
    _46: '46',
    _48: '48',
    _56: '56'
};
/**
 * @export
 */
exports.QosAliasDscpMarkingRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosAliasMinimumBandwidthRulesGetDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.QosAliasMinimumBandwidthRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosAliasMinimumPacketRateRulesGetDirectionEnum = {
    Any: 'any',
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.QosAliasMinimumPacketRateRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosPoliciesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosPoliciesPolicyIdBandwidthLimitRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosPoliciesPolicyIdDscpMarkingRulesGetDscpMarkEnum = {
    _0: '0',
    _8: '8',
    _10: '10',
    _12: '12',
    _14: '14',
    _16: '16',
    _18: '18',
    _20: '20',
    _22: '22',
    _24: '24',
    _26: '26',
    _28: '28',
    _30: '30',
    _32: '32',
    _34: '34',
    _36: '36',
    _38: '38',
    _40: '40',
    _44: '44',
    _46: '46',
    _48: '48',
    _56: '56'
};
/**
 * @export
 */
exports.QosPoliciesPolicyIdDscpMarkingRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosPoliciesPolicyIdMinimumBandwidthRulesGetDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.QosPoliciesPolicyIdMinimumBandwidthRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosPoliciesPolicyIdMinimumPacketRateRulesGetDirectionEnum = {
    Any: 'any',
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.QosPoliciesPolicyIdMinimumPacketRateRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.QosRuleTypesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * QuotasApi - axios parameter creator
 * @export
 */
var QuotasApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QuotasGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/quotas";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDefaultGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('quotasIdDefaultGet', 'id', id);
                            localVarPath = "/v2.0/quotas/{id}/default"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('quotasIdDelete', 'id', id);
                            localVarPath = "/v2.0/quotas/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id}/details API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDetailsGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('quotasIdDetailsGet', 'id', id);
                            localVarPath = "/v2.0/quotas/{id}/details"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('quotasIdGet', 'id', id);
                            localVarPath = "/v2.0/quotas/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {QuotaUpdateRequest} [quotaUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdPut: function (id_1, quotaUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, quotaUpdateRequest_1], args_1, true), void 0, function (id, quotaUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('quotasIdPut', 'id', id);
                            localVarPath = "/v2.0/quotas/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(quotaUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.QuotasApiAxiosParamCreator = QuotasApiAxiosParamCreator;
/**
 * QuotasApi - functional programming interface
 * @export
 */
var QuotasApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.QuotasApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QuotasGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.quotasGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.quotasGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDefaultGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.quotasIdDefaultGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.quotasIdDefaultGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.quotasIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.quotasIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id}/details API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDetailsGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.quotasIdDetailsGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.quotasIdDetailsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.quotasIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.quotasIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {QuotaUpdateRequest} [quotaUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdPut: function (id, quotaUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.quotasIdPut(id, quotaUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['QuotasApi.quotasIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.QuotasApiFp = QuotasApiFp;
/**
 * QuotasApi - factory interface
 * @export
 */
var QuotasApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.QuotasApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {QuotasGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.quotasGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDefaultGet: function (id, options) {
            return localVarFp.quotasIdDefaultGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDelete: function (id, options) {
            return localVarFp.quotasIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id}/details API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdDetailsGet: function (id, options) {
            return localVarFp.quotasIdDetailsGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdGet: function (id, options) {
            return localVarFp.quotasIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/quotas/{id} API
         * @param {QuotaUpdateRequest} [quotaUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quotasIdPut: function (id, quotaUpdateRequest, options) {
            return localVarFp.quotasIdPut(id, quotaUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.QuotasApiFactory = QuotasApiFactory;
/**
 * QuotasApi - object-oriented interface
 * @export
 * @class QuotasApi
 * @extends {BaseAPI}
 */
var QuotasApi = /** @class */ (function (_super) {
    __extends(QuotasApi, _super);
    function QuotasApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {QuotasGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    QuotasApi.prototype.quotasGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).quotasGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/quotas/{id}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    QuotasApi.prototype.quotasIdDefaultGet = function (id, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).quotasIdDefaultGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/quotas/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    QuotasApi.prototype.quotasIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).quotasIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/quotas/{id}/details API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    QuotasApi.prototype.quotasIdDetailsGet = function (id, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).quotasIdDetailsGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/quotas/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    QuotasApi.prototype.quotasIdGet = function (id, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).quotasIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/quotas/{id} API
     * @param {QuotaUpdateRequest} [quotaUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuotasApi
     */
    QuotasApi.prototype.quotasIdPut = function (id, quotaUpdateRequest, options) {
        var _this = this;
        return (0, exports.QuotasApiFp)(this.configuration).quotasIdPut(id, quotaUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return QuotasApi;
}(base_1.BaseAPI));
exports.QuotasApi = QuotasApi;
/**
 * @export
 */
exports.QuotasGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * RbacPoliciesApi - axios parameter creator
 * @export
 */
var RbacPoliciesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/rbac-policies API
         * @param {string} [objectType] object_type query parameter for /v2.0/rbac-policies API
         * @param {string} [objectId] object_id query parameter for /v2.0/rbac-policies API
         * @param {string} [targetTenant] target_tenant query parameter for /v2.0/rbac-policies API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/rbac-policies API
         * @param {string} [action] action query parameter for /v2.0/rbac-policies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RbacPoliciesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesGet: function (id_1, objectType_1, objectId_1, targetTenant_1, tenantId_1, action_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 11; _i < arguments.length; _i++) {
                args_1[_i - 11] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, objectType_1, objectId_1, targetTenant_1, tenantId_1, action_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, objectType, objectId, targetTenant, tenantId, action, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/rbac-policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (objectType !== undefined) {
                                localVarQueryParameter['object_type'] = objectType;
                            }
                            if (objectId !== undefined) {
                                localVarQueryParameter['object_id'] = objectId;
                            }
                            if (targetTenant !== undefined) {
                                localVarQueryParameter['target_tenant'] = targetTenant;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (action !== undefined) {
                                localVarQueryParameter['action'] = action;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('rbacPoliciesIdDelete', 'id', id);
                            localVarPath = "/v2.0/rbac-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('rbacPoliciesIdGet', 'id', id);
                            localVarPath = "/v2.0/rbac-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {RbacPolicyUpdateRequest} [rbacPolicyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdPut: function (id_1, rbacPolicyUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, rbacPolicyUpdateRequest_1], args_1, true), void 0, function (id, rbacPolicyUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('rbacPoliciesIdPut', 'id', id);
                            localVarPath = "/v2.0/rbac-policies/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(rbacPolicyUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {RbacPoliciesCreateRequest} [rbacPoliciesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesPost: function (rbacPoliciesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([rbacPoliciesCreateRequest_1], args_1, true), void 0, function (rbacPoliciesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/rbac-policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(rbacPoliciesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RbacPoliciesApiAxiosParamCreator = RbacPoliciesApiAxiosParamCreator;
/**
 * RbacPoliciesApi - functional programming interface
 * @export
 */
var RbacPoliciesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RbacPoliciesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/rbac-policies API
         * @param {string} [objectType] object_type query parameter for /v2.0/rbac-policies API
         * @param {string} [objectId] object_id query parameter for /v2.0/rbac-policies API
         * @param {string} [targetTenant] target_tenant query parameter for /v2.0/rbac-policies API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/rbac-policies API
         * @param {string} [action] action query parameter for /v2.0/rbac-policies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RbacPoliciesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesGet: function (id, objectType, objectId, targetTenant, tenantId, action, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rbacPoliciesGet(id, objectType, objectId, targetTenant, tenantId, action, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RbacPoliciesApi.rbacPoliciesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rbacPoliciesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RbacPoliciesApi.rbacPoliciesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rbacPoliciesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RbacPoliciesApi.rbacPoliciesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {RbacPolicyUpdateRequest} [rbacPolicyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdPut: function (id, rbacPolicyUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rbacPoliciesIdPut(id, rbacPolicyUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RbacPoliciesApi.rbacPoliciesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {RbacPoliciesCreateRequest} [rbacPoliciesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesPost: function (rbacPoliciesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rbacPoliciesPost(rbacPoliciesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RbacPoliciesApi.rbacPoliciesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RbacPoliciesApiFp = RbacPoliciesApiFp;
/**
 * RbacPoliciesApi - factory interface
 * @export
 */
var RbacPoliciesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RbacPoliciesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/rbac-policies API
         * @param {string} [objectType] object_type query parameter for /v2.0/rbac-policies API
         * @param {string} [objectId] object_id query parameter for /v2.0/rbac-policies API
         * @param {string} [targetTenant] target_tenant query parameter for /v2.0/rbac-policies API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/rbac-policies API
         * @param {string} [action] action query parameter for /v2.0/rbac-policies API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RbacPoliciesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesGet: function (id, objectType, objectId, targetTenant, tenantId, action, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.rbacPoliciesGet(id, objectType, objectId, targetTenant, tenantId, action, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdDelete: function (id, options) {
            return localVarFp.rbacPoliciesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdGet: function (id, options) {
            return localVarFp.rbacPoliciesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
         * @param {RbacPolicyUpdateRequest} [rbacPolicyUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesIdPut: function (id, rbacPolicyUpdateRequest, options) {
            return localVarFp.rbacPoliciesIdPut(id, rbacPolicyUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {RbacPoliciesCreateRequest} [rbacPoliciesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rbacPoliciesPost: function (rbacPoliciesCreateRequest, options) {
            return localVarFp.rbacPoliciesPost(rbacPoliciesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RbacPoliciesApiFactory = RbacPoliciesApiFactory;
/**
 * RbacPoliciesApi - object-oriented interface
 * @export
 * @class RbacPoliciesApi
 * @extends {BaseAPI}
 */
var RbacPoliciesApi = /** @class */ (function (_super) {
    __extends(RbacPoliciesApi, _super);
    function RbacPoliciesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/rbac-policies API
     * @param {string} [objectType] object_type query parameter for /v2.0/rbac-policies API
     * @param {string} [objectId] object_id query parameter for /v2.0/rbac-policies API
     * @param {string} [targetTenant] target_tenant query parameter for /v2.0/rbac-policies API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/rbac-policies API
     * @param {string} [action] action query parameter for /v2.0/rbac-policies API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {RbacPoliciesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacPoliciesApi
     */
    RbacPoliciesApi.prototype.rbacPoliciesGet = function (id, objectType, objectId, targetTenant, tenantId, action, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.RbacPoliciesApiFp)(this.configuration).rbacPoliciesGet(id, objectType, objectId, targetTenant, tenantId, action, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacPoliciesApi
     */
    RbacPoliciesApi.prototype.rbacPoliciesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.RbacPoliciesApiFp)(this.configuration).rbacPoliciesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacPoliciesApi
     */
    RbacPoliciesApi.prototype.rbacPoliciesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.RbacPoliciesApiFp)(this.configuration).rbacPoliciesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/rbac-policies/{id} API
     * @param {RbacPolicyUpdateRequest} [rbacPolicyUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacPoliciesApi
     */
    RbacPoliciesApi.prototype.rbacPoliciesIdPut = function (id, rbacPolicyUpdateRequest, options) {
        var _this = this;
        return (0, exports.RbacPoliciesApiFp)(this.configuration).rbacPoliciesIdPut(id, rbacPolicyUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {RbacPoliciesCreateRequest} [rbacPoliciesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RbacPoliciesApi
     */
    RbacPoliciesApi.prototype.rbacPoliciesPost = function (rbacPoliciesCreateRequest, options) {
        var _this = this;
        return (0, exports.RbacPoliciesApiFp)(this.configuration).rbacPoliciesPost(rbacPoliciesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RbacPoliciesApi;
}(base_1.BaseAPI));
exports.RbacPoliciesApi = RbacPoliciesApi;
/**
 * @export
 */
exports.RbacPoliciesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * RoutersApi - axios parameter creator
 * @export
 */
var RoutersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/routers API
         * @param {string} [name] name query parameter for /v2.0/routers API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/routers API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/routers API
         * @param {string | boolean | null} [enableNdpProxy] enable_ndp_proxy query parameter for /v2.0/routers API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/routers API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/routers API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/routers API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/routers API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/routers API
         * @param {string} [description] description query parameter for /v2.0/routers API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersGet: function (id_1, name_1, adminStateUp_1, tenantId_1, enableNdpProxy_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 16; _i < arguments.length; _i++) {
                args_1[_i - 16] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, adminStateUp_1, tenantId_1, enableNdpProxy_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, adminStateUp, tenantId, enableNdpProxy, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_g) {
                    switch (_g.label) {
                        case 0:
                            localVarPath = "/v2.0/routers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _g.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (adminStateUp !== undefined) {
                                for (_a = 0, _b = Object.entries(adminStateUp); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (enableNdpProxy !== undefined) {
                                for (_d = 0, _e = Object.entries(enableNdpProxy); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddExternalGatewaysAddExternalGatewaysRequest} [routersAddExternalGatewaysAddExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddExternalGatewaysPut: function (id_1, routersAddExternalGatewaysAddExternalGatewaysRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, routersAddExternalGatewaysAddExternalGatewaysRequest_1], args_1, true), void 0, function (id, routersAddExternalGatewaysAddExternalGatewaysRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdAddExternalGatewaysPut', 'id', id);
                            localVarPath = "/v2.0/routers/{id}/add_external_gateways"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersAddExternalGatewaysAddExternalGatewaysRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddExtraroutesAddExtraroutesRequest} [routersAddExtraroutesAddExtraroutesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddExtraroutesPut: function (id_1, routersAddExtraroutesAddExtraroutesRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, routersAddExtraroutesAddExtraroutesRequest_1], args_1, true), void 0, function (id, routersAddExtraroutesAddExtraroutesRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdAddExtraroutesPut', 'id', id);
                            localVarPath = "/v2.0/routers/{id}/add_extraroutes"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersAddExtraroutesAddExtraroutesRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddRouterInterfaceAddRouterInterfaceRequest} [routersAddRouterInterfaceAddRouterInterfaceRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddRouterInterfacePut: function (id_1, routersAddRouterInterfaceAddRouterInterfaceRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, routersAddRouterInterfaceAddRouterInterfaceRequest_1], args_1, true), void 0, function (id, routersAddRouterInterfaceAddRouterInterfaceRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdAddRouterInterfacePut', 'id', id);
                            localVarPath = "/v2.0/routers/{id}/add_router_interface"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersAddRouterInterfaceAddRouterInterfaceRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdDelete', 'id', id);
                            localVarPath = "/v2.0/routers/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdGet', 'id', id);
                            localVarPath = "/v2.0/routers/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RouterUpdateRequest} [routerUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdPut: function (id_1, routerUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, routerUpdateRequest_1], args_1, true), void 0, function (id, routerUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdPut', 'id', id);
                            localVarPath = "/v2.0/routers/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routerUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveExternalGatewaysRemoveExternalGatewaysRequest} [routersRemoveExternalGatewaysRemoveExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveExternalGatewaysPut: function (id_1, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest_1], args_1, true), void 0, function (id, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdRemoveExternalGatewaysPut', 'id', id);
                            localVarPath = "/v2.0/routers/{id}/remove_external_gateways"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersRemoveExternalGatewaysRemoveExternalGatewaysRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveExtraroutesRemoveExtraroutesRequest} [routersRemoveExtraroutesRemoveExtraroutesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveExtraroutesPut: function (id_1, routersRemoveExtraroutesRemoveExtraroutesRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, routersRemoveExtraroutesRemoveExtraroutesRequest_1], args_1, true), void 0, function (id, routersRemoveExtraroutesRemoveExtraroutesRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdRemoveExtraroutesPut', 'id', id);
                            localVarPath = "/v2.0/routers/{id}/remove_extraroutes"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersRemoveExtraroutesRemoveExtraroutesRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveRouterInterfaceRemoveRouterInterfaceRequest} [routersRemoveRouterInterfaceRemoveRouterInterfaceRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveRouterInterfacePut: function (id_1, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest_1], args_1, true), void 0, function (id, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdRemoveRouterInterfacePut', 'id', id);
                            localVarPath = "/v2.0/routers/{id}/remove_router_interface"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersRemoveRouterInterfaceRemoveRouterInterfaceRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersUpdateExternalGatewaysUpdateExternalGatewaysRequest} [routersUpdateExternalGatewaysUpdateExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdUpdateExternalGatewaysPut: function (id_1, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest_1], args_1, true), void 0, function (id, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersIdUpdateExternalGatewaysPut', 'id', id);
                            localVarPath = "/v2.0/routers/{id}/update_external_gateways"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersUpdateExternalGatewaysUpdateExternalGatewaysRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {RoutersCreateRequest} [routersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersPost: function (routersCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routersCreateRequest_1], args_1, true), void 0, function (routersCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/routers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdL3AgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/routers/{router_id}/l3-agents";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdDelete: function (routerId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1], args_1, true), void 0, function (routerId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdL3AgentsIdDelete', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdL3AgentsIdDelete', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/l3-agents/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdGet: function (routerId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1], args_1, true), void 0, function (routerId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdL3AgentsIdGet', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdL3AgentsIdGet', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/l3-agents/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdPut: function (routerId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1], args_1, true), void 0, function (routerId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdL3AgentsIdPut', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdL3AgentsIdPut', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/l3-agents/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsPost: function (routerId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, body_1], args_1, true), void 0, function (routerId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdL3AgentsPost', 'routerId', routerId);
                            localVarPath = "/v2.0/routers/{router_id}/l3-agents"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsDelete: function (routerId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1], args_1, true), void 0, function (routerId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdTagsDelete', 'routerId', routerId);
                            localVarPath = "/v2.0/routers/{router_id}/tags"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/routers/{router_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdDelete: function (routerId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1], args_1, true), void 0, function (routerId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdTagsIdDelete', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/tags/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdGet: function (routerId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1], args_1, true), void 0, function (routerId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdTagsIdGet', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/tags/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdPut: function (routerId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1], args_1, true), void 0, function (routerId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdTagsIdPut', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/tags/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {RoutersTagsUpdateAllRequest} [routersTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsPut: function (routerId_1, routersTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, routersTagsUpdateAllRequest_1], args_1, true), void 0, function (routerId, routersTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdTagsPut', 'routerId', routerId);
                            localVarPath = "/v2.0/routers/{router_id}/tags"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RoutersApiAxiosParamCreator = RoutersApiAxiosParamCreator;
/**
 * RoutersApi - functional programming interface
 * @export
 */
var RoutersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RoutersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/routers API
         * @param {string} [name] name query parameter for /v2.0/routers API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/routers API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/routers API
         * @param {string | boolean | null} [enableNdpProxy] enable_ndp_proxy query parameter for /v2.0/routers API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/routers API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/routers API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/routers API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/routers API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/routers API
         * @param {string} [description] description query parameter for /v2.0/routers API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersGet: function (id, name, adminStateUp, tenantId, enableNdpProxy, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersGet(id, name, adminStateUp, tenantId, enableNdpProxy, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddExternalGatewaysAddExternalGatewaysRequest} [routersAddExternalGatewaysAddExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddExternalGatewaysPut: function (id, routersAddExternalGatewaysAddExternalGatewaysRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdAddExternalGatewaysPut(id, routersAddExternalGatewaysAddExternalGatewaysRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdAddExternalGatewaysPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddExtraroutesAddExtraroutesRequest} [routersAddExtraroutesAddExtraroutesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddExtraroutesPut: function (id, routersAddExtraroutesAddExtraroutesRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdAddExtraroutesPut(id, routersAddExtraroutesAddExtraroutesRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdAddExtraroutesPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddRouterInterfaceAddRouterInterfaceRequest} [routersAddRouterInterfaceAddRouterInterfaceRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddRouterInterfacePut: function (id, routersAddRouterInterfaceAddRouterInterfaceRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdAddRouterInterfacePut(id, routersAddRouterInterfaceAddRouterInterfaceRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdAddRouterInterfacePut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RouterUpdateRequest} [routerUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdPut: function (id, routerUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdPut(id, routerUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveExternalGatewaysRemoveExternalGatewaysRequest} [routersRemoveExternalGatewaysRemoveExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveExternalGatewaysPut: function (id, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdRemoveExternalGatewaysPut(id, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdRemoveExternalGatewaysPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveExtraroutesRemoveExtraroutesRequest} [routersRemoveExtraroutesRemoveExtraroutesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveExtraroutesPut: function (id, routersRemoveExtraroutesRemoveExtraroutesRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdRemoveExtraroutesPut(id, routersRemoveExtraroutesRemoveExtraroutesRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdRemoveExtraroutesPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveRouterInterfaceRemoveRouterInterfaceRequest} [routersRemoveRouterInterfaceRemoveRouterInterfaceRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveRouterInterfacePut: function (id, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdRemoveRouterInterfacePut(id, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdRemoveRouterInterfacePut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersUpdateExternalGatewaysUpdateExternalGatewaysRequest} [routersUpdateExternalGatewaysUpdateExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdUpdateExternalGatewaysPut: function (id, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersIdUpdateExternalGatewaysPut(id, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersIdUpdateExternalGatewaysPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {RoutersCreateRequest} [routersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersPost: function (routersCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersPost(routersCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdL3AgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdL3AgentsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdL3AgentsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdDelete: function (routerId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdL3AgentsIdDelete(routerId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdL3AgentsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdGet: function (routerId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdL3AgentsIdGet(routerId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdL3AgentsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdPut: function (routerId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdL3AgentsIdPut(routerId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdL3AgentsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsPost: function (routerId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdL3AgentsPost(routerId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdL3AgentsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsDelete: function (routerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdTagsDelete(routerId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdDelete: function (routerId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdTagsIdDelete(routerId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdGet: function (routerId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdTagsIdGet(routerId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdPut: function (routerId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdTagsIdPut(routerId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {RoutersTagsUpdateAllRequest} [routersTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsPut: function (routerId, routersTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdTagsPut(routerId, routersTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersApi.routersRouterIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RoutersApiFp = RoutersApiFp;
/**
 * RoutersApi - factory interface
 * @export
 */
var RoutersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RoutersApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/routers API
         * @param {string} [name] name query parameter for /v2.0/routers API
         * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/routers API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/routers API
         * @param {string | boolean | null} [enableNdpProxy] enable_ndp_proxy query parameter for /v2.0/routers API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/routers API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/routers API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/routers API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/routers API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/routers API
         * @param {string} [description] description query parameter for /v2.0/routers API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersGet: function (id, name, adminStateUp, tenantId, enableNdpProxy, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.routersGet(id, name, adminStateUp, tenantId, enableNdpProxy, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddExternalGatewaysAddExternalGatewaysRequest} [routersAddExternalGatewaysAddExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddExternalGatewaysPut: function (id, routersAddExternalGatewaysAddExternalGatewaysRequest, options) {
            return localVarFp.routersIdAddExternalGatewaysPut(id, routersAddExternalGatewaysAddExternalGatewaysRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddExtraroutesAddExtraroutesRequest} [routersAddExtraroutesAddExtraroutesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddExtraroutesPut: function (id, routersAddExtraroutesAddExtraroutesRequest, options) {
            return localVarFp.routersIdAddExtraroutesPut(id, routersAddExtraroutesAddExtraroutesRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersAddRouterInterfaceAddRouterInterfaceRequest} [routersAddRouterInterfaceAddRouterInterfaceRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdAddRouterInterfacePut: function (id, routersAddRouterInterfaceAddRouterInterfaceRequest, options) {
            return localVarFp.routersIdAddRouterInterfacePut(id, routersAddRouterInterfaceAddRouterInterfaceRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdDelete: function (id, options) {
            return localVarFp.routersIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdGet: function (id, options) {
            return localVarFp.routersIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RouterUpdateRequest} [routerUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdPut: function (id, routerUpdateRequest, options) {
            return localVarFp.routersIdPut(id, routerUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveExternalGatewaysRemoveExternalGatewaysRequest} [routersRemoveExternalGatewaysRemoveExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveExternalGatewaysPut: function (id, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest, options) {
            return localVarFp.routersIdRemoveExternalGatewaysPut(id, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveExtraroutesRemoveExtraroutesRequest} [routersRemoveExtraroutesRemoveExtraroutesRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveExtraroutesPut: function (id, routersRemoveExtraroutesRemoveExtraroutesRequest, options) {
            return localVarFp.routersIdRemoveExtraroutesPut(id, routersRemoveExtraroutesRemoveExtraroutesRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersRemoveRouterInterfaceRemoveRouterInterfaceRequest} [routersRemoveRouterInterfaceRemoveRouterInterfaceRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdRemoveRouterInterfacePut: function (id, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest, options) {
            return localVarFp.routersIdRemoveRouterInterfacePut(id, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/routers/{id} API
         * @param {RoutersUpdateExternalGatewaysUpdateExternalGatewaysRequest} [routersUpdateExternalGatewaysUpdateExternalGatewaysRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersIdUpdateExternalGatewaysPut: function (id, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest, options) {
            return localVarFp.routersIdUpdateExternalGatewaysPut(id, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {RoutersCreateRequest} [routersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersPost: function (routersCreateRequest, options) {
            return localVarFp.routersPost(routersCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdL3AgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.routersRouterIdL3AgentsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdDelete: function (routerId, id, options) {
            return localVarFp.routersRouterIdL3AgentsIdDelete(routerId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdGet: function (routerId, id, options) {
            return localVarFp.routersRouterIdL3AgentsIdGet(routerId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsIdPut: function (routerId, id, options) {
            return localVarFp.routersRouterIdL3AgentsIdPut(routerId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdL3AgentsPost: function (routerId, body, options) {
            return localVarFp.routersRouterIdL3AgentsPost(routerId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsDelete: function (routerId, options) {
            return localVarFp.routersRouterIdTagsDelete(routerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.routersRouterIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdDelete: function (routerId, id, options) {
            return localVarFp.routersRouterIdTagsIdDelete(routerId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdGet: function (routerId, id, options) {
            return localVarFp.routersRouterIdTagsIdGet(routerId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsIdPut: function (routerId, id, options) {
            return localVarFp.routersRouterIdTagsIdPut(routerId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
         * @param {RoutersTagsUpdateAllRequest} [routersTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdTagsPut: function (routerId, routersTagsUpdateAllRequest, options) {
            return localVarFp.routersRouterIdTagsPut(routerId, routersTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RoutersApiFactory = RoutersApiFactory;
/**
 * RoutersApi - object-oriented interface
 * @export
 * @class RoutersApi
 * @extends {BaseAPI}
 */
var RoutersApi = /** @class */ (function (_super) {
    __extends(RoutersApi, _super);
    function RoutersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/routers API
     * @param {string} [name] name query parameter for /v2.0/routers API
     * @param {string | boolean} [adminStateUp] admin_state_up query parameter for /v2.0/routers API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/routers API
     * @param {string | boolean | null} [enableNdpProxy] enable_ndp_proxy query parameter for /v2.0/routers API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/routers API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/routers API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/routers API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/routers API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/routers API
     * @param {string} [description] description query parameter for /v2.0/routers API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {RoutersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersGet = function (id, name, adminStateUp, tenantId, enableNdpProxy, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersGet(id, name, adminStateUp, tenantId, enableNdpProxy, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {RoutersAddExternalGatewaysAddExternalGatewaysRequest} [routersAddExternalGatewaysAddExternalGatewaysRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdAddExternalGatewaysPut = function (id, routersAddExternalGatewaysAddExternalGatewaysRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdAddExternalGatewaysPut(id, routersAddExternalGatewaysAddExternalGatewaysRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {RoutersAddExtraroutesAddExtraroutesRequest} [routersAddExtraroutesAddExtraroutesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdAddExtraroutesPut = function (id, routersAddExtraroutesAddExtraroutesRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdAddExtraroutesPut(id, routersAddExtraroutesAddExtraroutesRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {RoutersAddRouterInterfaceAddRouterInterfaceRequest} [routersAddRouterInterfaceAddRouterInterfaceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdAddRouterInterfacePut = function (id, routersAddRouterInterfaceAddRouterInterfaceRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdAddRouterInterfacePut(id, routersAddRouterInterfaceAddRouterInterfaceRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdGet = function (id, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {RouterUpdateRequest} [routerUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdPut = function (id, routerUpdateRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdPut(id, routerUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {RoutersRemoveExternalGatewaysRemoveExternalGatewaysRequest} [routersRemoveExternalGatewaysRemoveExternalGatewaysRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdRemoveExternalGatewaysPut = function (id, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdRemoveExternalGatewaysPut(id, routersRemoveExternalGatewaysRemoveExternalGatewaysRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {RoutersRemoveExtraroutesRemoveExtraroutesRequest} [routersRemoveExtraroutesRemoveExtraroutesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdRemoveExtraroutesPut = function (id, routersRemoveExtraroutesRemoveExtraroutesRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdRemoveExtraroutesPut(id, routersRemoveExtraroutesRemoveExtraroutesRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {RoutersRemoveRouterInterfaceRemoveRouterInterfaceRequest} [routersRemoveRouterInterfaceRemoveRouterInterfaceRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdRemoveRouterInterfacePut = function (id, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdRemoveRouterInterfacePut(id, routersRemoveRouterInterfaceRemoveRouterInterfaceRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/routers/{id} API
     * @param {RoutersUpdateExternalGatewaysUpdateExternalGatewaysRequest} [routersUpdateExternalGatewaysUpdateExternalGatewaysRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersIdUpdateExternalGatewaysPut = function (id, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersIdUpdateExternalGatewaysPut(id, routersUpdateExternalGatewaysUpdateExternalGatewaysRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {RoutersCreateRequest} [routersCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersPost = function (routersCreateRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersPost(routersCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {RoutersRouterIdL3AgentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdL3AgentsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdL3AgentsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdL3AgentsIdDelete = function (routerId, id, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdL3AgentsIdDelete(routerId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdL3AgentsIdGet = function (routerId, id, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdL3AgentsIdGet(routerId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdL3AgentsIdPut = function (routerId, id, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdL3AgentsIdPut(routerId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/l3-agents/{id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdL3AgentsPost = function (routerId, body, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdL3AgentsPost(routerId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdTagsDelete = function (routerId, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdTagsDelete(routerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {RoutersRouterIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdTagsIdDelete = function (routerId, id, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdTagsIdDelete(routerId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdTagsIdGet = function (routerId, id, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdTagsIdGet(routerId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdTagsIdPut = function (routerId, id, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdTagsIdPut(routerId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/tags/{id} API
     * @param {RoutersTagsUpdateAllRequest} [routersTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersApi
     */
    RoutersApi.prototype.routersRouterIdTagsPut = function (routerId, routersTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.RoutersApiFp)(this.configuration).routersRouterIdTagsPut(routerId, routersTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RoutersApi;
}(base_1.BaseAPI));
exports.RoutersApi = RoutersApi;
/**
 * @export
 */
exports.RoutersGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.RoutersRouterIdL3AgentsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.RoutersRouterIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * RoutersConntrackHelperApi - axios parameter creator
 * @export
 */
var RoutersConntrackHelperApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {RoutersRouterIdConntrackHelpersGetProtocolEnum} [protocol] protocol query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string | number} [port] port query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string} [helper] helper query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdConntrackHelpersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersGet: function (id_1, protocol_1, port_1, helper_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, protocol_1, port_1, helper_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, protocol, port, helper, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/routers/{router_id}/conntrack_helpers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (protocol !== undefined) {
                                localVarQueryParameter['protocol'] = protocol;
                            }
                            if (port !== undefined) {
                                for (_a = 0, _b = Object.entries(port); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (helper !== undefined) {
                                localVarQueryParameter['helper'] = helper;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdDelete: function (routerId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1], args_1, true), void 0, function (routerId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdConntrackHelpersIdDelete', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdConntrackHelpersIdDelete', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/conntrack_helpers/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdGet: function (routerId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1], args_1, true), void 0, function (routerId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdConntrackHelpersIdGet', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdConntrackHelpersIdGet', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/conntrack_helpers/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {RoutersConntrackHelperUpdateRequest} [routersConntrackHelperUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdPut: function (routerId_1, id_1, routersConntrackHelperUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, id_1, routersConntrackHelperUpdateRequest_1], args_1, true), void 0, function (routerId, id, routersConntrackHelperUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdConntrackHelpersIdPut', 'routerId', routerId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdConntrackHelpersIdPut', 'id', id);
                            localVarPath = "/v2.0/routers/{router_id}/conntrack_helpers/{id}"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersConntrackHelperUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {RoutersConntrackHelpersCreateRequest} [routersConntrackHelpersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersPost: function (routerId_1, routersConntrackHelpersCreateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([routerId_1, routersConntrackHelpersCreateRequest_1], args_1, true), void 0, function (routerId, routersConntrackHelpersCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'routerId' is not null or undefined
                            (0, common_1.assertParamExists)('routersRouterIdConntrackHelpersPost', 'routerId', routerId);
                            localVarPath = "/v2.0/routers/{router_id}/conntrack_helpers"
                                .replace("{".concat("router_id", "}"), encodeURIComponent(String(routerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(routersConntrackHelpersCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RoutersConntrackHelperApiAxiosParamCreator = RoutersConntrackHelperApiAxiosParamCreator;
/**
 * RoutersConntrackHelperApi - functional programming interface
 * @export
 */
var RoutersConntrackHelperApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RoutersConntrackHelperApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {RoutersRouterIdConntrackHelpersGetProtocolEnum} [protocol] protocol query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string | number} [port] port query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string} [helper] helper query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdConntrackHelpersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersGet: function (id, protocol, port, helper, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdConntrackHelpersGet(id, protocol, port, helper, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersConntrackHelperApi.routersRouterIdConntrackHelpersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdDelete: function (routerId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdConntrackHelpersIdDelete(routerId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersConntrackHelperApi.routersRouterIdConntrackHelpersIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdGet: function (routerId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdConntrackHelpersIdGet(routerId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersConntrackHelperApi.routersRouterIdConntrackHelpersIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {RoutersConntrackHelperUpdateRequest} [routersConntrackHelperUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdPut: function (routerId, id, routersConntrackHelperUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdConntrackHelpersIdPut(routerId, id, routersConntrackHelperUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersConntrackHelperApi.routersRouterIdConntrackHelpersIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {RoutersConntrackHelpersCreateRequest} [routersConntrackHelpersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersPost: function (routerId, routersConntrackHelpersCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.routersRouterIdConntrackHelpersPost(routerId, routersConntrackHelpersCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoutersConntrackHelperApi.routersRouterIdConntrackHelpersPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RoutersConntrackHelperApiFp = RoutersConntrackHelperApiFp;
/**
 * RoutersConntrackHelperApi - factory interface
 * @export
 */
var RoutersConntrackHelperApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RoutersConntrackHelperApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {RoutersRouterIdConntrackHelpersGetProtocolEnum} [protocol] protocol query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string | number} [port] port query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string} [helper] helper query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {RoutersRouterIdConntrackHelpersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersGet: function (id, protocol, port, helper, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.routersRouterIdConntrackHelpersGet(id, protocol, port, helper, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdDelete: function (routerId, id, options) {
            return localVarFp.routersRouterIdConntrackHelpersIdDelete(routerId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdGet: function (routerId, id, options) {
            return localVarFp.routersRouterIdConntrackHelpersIdGet(routerId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {RoutersConntrackHelperUpdateRequest} [routersConntrackHelperUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersIdPut: function (routerId, id, routersConntrackHelperUpdateRequest, options) {
            return localVarFp.routersRouterIdConntrackHelpersIdPut(routerId, id, routersConntrackHelperUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
         * @param {RoutersConntrackHelpersCreateRequest} [routersConntrackHelpersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        routersRouterIdConntrackHelpersPost: function (routerId, routersConntrackHelpersCreateRequest, options) {
            return localVarFp.routersRouterIdConntrackHelpersPost(routerId, routersConntrackHelpersCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RoutersConntrackHelperApiFactory = RoutersConntrackHelperApiFactory;
/**
 * RoutersConntrackHelperApi - object-oriented interface
 * @export
 * @class RoutersConntrackHelperApi
 * @extends {BaseAPI}
 */
var RoutersConntrackHelperApi = /** @class */ (function (_super) {
    __extends(RoutersConntrackHelperApi, _super);
    function RoutersConntrackHelperApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
     * @param {RoutersRouterIdConntrackHelpersGetProtocolEnum} [protocol] protocol query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
     * @param {string | number} [port] port query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
     * @param {string} [helper] helper query parameter for /v2.0/routers/{router_id}/conntrack_helpers API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {RoutersRouterIdConntrackHelpersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersConntrackHelperApi
     */
    RoutersConntrackHelperApi.prototype.routersRouterIdConntrackHelpersGet = function (id, protocol, port, helper, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.RoutersConntrackHelperApiFp)(this.configuration).routersRouterIdConntrackHelpersGet(id, protocol, port, helper, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersConntrackHelperApi
     */
    RoutersConntrackHelperApi.prototype.routersRouterIdConntrackHelpersIdDelete = function (routerId, id, options) {
        var _this = this;
        return (0, exports.RoutersConntrackHelperApiFp)(this.configuration).routersRouterIdConntrackHelpersIdDelete(routerId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersConntrackHelperApi
     */
    RoutersConntrackHelperApi.prototype.routersRouterIdConntrackHelpersIdGet = function (routerId, id, options) {
        var _this = this;
        return (0, exports.RoutersConntrackHelperApiFp)(this.configuration).routersRouterIdConntrackHelpersIdGet(routerId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
     * @param {string} id id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
     * @param {RoutersConntrackHelperUpdateRequest} [routersConntrackHelperUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersConntrackHelperApi
     */
    RoutersConntrackHelperApi.prototype.routersRouterIdConntrackHelpersIdPut = function (routerId, id, routersConntrackHelperUpdateRequest, options) {
        var _this = this;
        return (0, exports.RoutersConntrackHelperApiFp)(this.configuration).routersRouterIdConntrackHelpersIdPut(routerId, id, routersConntrackHelperUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} routerId router_id parameter for /v2.0/routers/{router_id}/conntrack_helpers/{id} API
     * @param {RoutersConntrackHelpersCreateRequest} [routersConntrackHelpersCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutersConntrackHelperApi
     */
    RoutersConntrackHelperApi.prototype.routersRouterIdConntrackHelpersPost = function (routerId, routersConntrackHelpersCreateRequest, options) {
        var _this = this;
        return (0, exports.RoutersConntrackHelperApiFp)(this.configuration).routersRouterIdConntrackHelpersPost(routerId, routersConntrackHelpersCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RoutersConntrackHelperApi;
}(base_1.BaseAPI));
exports.RoutersConntrackHelperApi = RoutersConntrackHelperApi;
/**
 * @export
 */
exports.RoutersRouterIdConntrackHelpersGetProtocolEnum = {
    Dccp: 'dccp',
    Icmp: 'icmp',
    Ipv6Icmp: 'ipv6-icmp',
    Sctp: 'sctp',
    Tcp: 'tcp',
    Udp: 'udp'
};
/**
 * @export
 */
exports.RoutersRouterIdConntrackHelpersGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * SecurityGroupRulesApi - axios parameter creator
 * @export
 */
var SecurityGroupRulesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/security-group-rules API
         * @param {string} [securityGroupId] security_group_id query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteGroupId] remote_group_id query parameter for /v2.0/security-group-rules API
         * @param {SecurityGroupRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/security-group-rules API
         * @param {string} [protocol] protocol query parameter for /v2.0/security-group-rules API
         * @param {number | null} [portRangeMin] port_range_min query parameter for /v2.0/security-group-rules API
         * @param {number | null} [portRangeMax] port_range_max query parameter for /v2.0/security-group-rules API
         * @param {SecurityGroupRulesGetEthertypeEnum} [ethertype] ethertype query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/security-group-rules API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/security-group-rules API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/security-group-rules API
         * @param {string} [description] description query parameter for /v2.0/security-group-rules API
         * @param {string | null} [normalizedCidr] normalized_cidr query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteAddressGroupId] remote_address_group_id query parameter for /v2.0/security-group-rules API
         * @param {string | boolean | null} [belongsToDefaultSg] belongs_to_default_sg query parameter for /v2.0/security-group-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesGet: function (id_1, securityGroupId_1, remoteGroupId_1, direction_1, protocol_1, portRangeMin_1, portRangeMax_1, ethertype_1, remoteIpPrefix_1, tenantId_1, revisionNumber_1, description_1, normalizedCidr_1, remoteAddressGroupId_1, belongsToDefaultSg_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 20; _i < arguments.length; _i++) {
                args_1[_i - 20] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, securityGroupId_1, remoteGroupId_1, direction_1, protocol_1, portRangeMin_1, portRangeMax_1, ethertype_1, remoteIpPrefix_1, tenantId_1, revisionNumber_1, description_1, normalizedCidr_1, remoteAddressGroupId_1, belongsToDefaultSg_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, securityGroupId, remoteGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, tenantId, revisionNumber, description, normalizedCidr, remoteAddressGroupId, belongsToDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/security-group-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (securityGroupId !== undefined) {
                                localVarQueryParameter['security_group_id'] = securityGroupId;
                            }
                            if (remoteGroupId !== undefined) {
                                localVarQueryParameter['remote_group_id'] = remoteGroupId;
                            }
                            if (direction !== undefined) {
                                localVarQueryParameter['direction'] = direction;
                            }
                            if (protocol !== undefined) {
                                localVarQueryParameter['protocol'] = protocol;
                            }
                            if (portRangeMin !== undefined) {
                                localVarQueryParameter['port_range_min'] = portRangeMin;
                            }
                            if (portRangeMax !== undefined) {
                                localVarQueryParameter['port_range_max'] = portRangeMax;
                            }
                            if (ethertype !== undefined) {
                                localVarQueryParameter['ethertype'] = ethertype;
                            }
                            if (remoteIpPrefix !== undefined) {
                                localVarQueryParameter['remote_ip_prefix'] = remoteIpPrefix;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (normalizedCidr !== undefined) {
                                localVarQueryParameter['normalized_cidr'] = normalizedCidr;
                            }
                            if (remoteAddressGroupId !== undefined) {
                                localVarQueryParameter['remote_address_group_id'] = remoteAddressGroupId;
                            }
                            if (belongsToDefaultSg !== undefined) {
                                for (_a = 0, _b = Object.entries(belongsToDefaultSg); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupRulesIdDelete', 'id', id);
                            localVarPath = "/v2.0/security-group-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupRulesIdGet', 'id', id);
                            localVarPath = "/v2.0/security-group-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {SecurityGroupRuleUpdateRequest} [securityGroupRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdPut: function (id_1, securityGroupRuleUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, securityGroupRuleUpdateRequest_1], args_1, true), void 0, function (id, securityGroupRuleUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupRulesIdPut', 'id', id);
                            localVarPath = "/v2.0/security-group-rules/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(securityGroupRuleUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {SecurityGroupRulesCreateRequest} [securityGroupRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesPost: function (securityGroupRulesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([securityGroupRulesCreateRequest_1], args_1, true), void 0, function (securityGroupRulesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/security-group-rules";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(securityGroupRulesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SecurityGroupRulesApiAxiosParamCreator = SecurityGroupRulesApiAxiosParamCreator;
/**
 * SecurityGroupRulesApi - functional programming interface
 * @export
 */
var SecurityGroupRulesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SecurityGroupRulesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/security-group-rules API
         * @param {string} [securityGroupId] security_group_id query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteGroupId] remote_group_id query parameter for /v2.0/security-group-rules API
         * @param {SecurityGroupRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/security-group-rules API
         * @param {string} [protocol] protocol query parameter for /v2.0/security-group-rules API
         * @param {number | null} [portRangeMin] port_range_min query parameter for /v2.0/security-group-rules API
         * @param {number | null} [portRangeMax] port_range_max query parameter for /v2.0/security-group-rules API
         * @param {SecurityGroupRulesGetEthertypeEnum} [ethertype] ethertype query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/security-group-rules API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/security-group-rules API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/security-group-rules API
         * @param {string} [description] description query parameter for /v2.0/security-group-rules API
         * @param {string | null} [normalizedCidr] normalized_cidr query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteAddressGroupId] remote_address_group_id query parameter for /v2.0/security-group-rules API
         * @param {string | boolean | null} [belongsToDefaultSg] belongs_to_default_sg query parameter for /v2.0/security-group-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesGet: function (id, securityGroupId, remoteGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, tenantId, revisionNumber, description, normalizedCidr, remoteAddressGroupId, belongsToDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupRulesGet(id, securityGroupId, remoteGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, tenantId, revisionNumber, description, normalizedCidr, remoteAddressGroupId, belongsToDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupRulesApi.securityGroupRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupRulesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupRulesApi.securityGroupRulesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupRulesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupRulesApi.securityGroupRulesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {SecurityGroupRuleUpdateRequest} [securityGroupRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdPut: function (id, securityGroupRuleUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupRulesIdPut(id, securityGroupRuleUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupRulesApi.securityGroupRulesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SecurityGroupRulesCreateRequest} [securityGroupRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesPost: function (securityGroupRulesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupRulesPost(securityGroupRulesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupRulesApi.securityGroupRulesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SecurityGroupRulesApiFp = SecurityGroupRulesApiFp;
/**
 * SecurityGroupRulesApi - factory interface
 * @export
 */
var SecurityGroupRulesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SecurityGroupRulesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/security-group-rules API
         * @param {string} [securityGroupId] security_group_id query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteGroupId] remote_group_id query parameter for /v2.0/security-group-rules API
         * @param {SecurityGroupRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/security-group-rules API
         * @param {string} [protocol] protocol query parameter for /v2.0/security-group-rules API
         * @param {number | null} [portRangeMin] port_range_min query parameter for /v2.0/security-group-rules API
         * @param {number | null} [portRangeMax] port_range_max query parameter for /v2.0/security-group-rules API
         * @param {SecurityGroupRulesGetEthertypeEnum} [ethertype] ethertype query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/security-group-rules API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/security-group-rules API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/security-group-rules API
         * @param {string} [description] description query parameter for /v2.0/security-group-rules API
         * @param {string | null} [normalizedCidr] normalized_cidr query parameter for /v2.0/security-group-rules API
         * @param {string} [remoteAddressGroupId] remote_address_group_id query parameter for /v2.0/security-group-rules API
         * @param {string | boolean | null} [belongsToDefaultSg] belongs_to_default_sg query parameter for /v2.0/security-group-rules API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesGet: function (id, securityGroupId, remoteGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, tenantId, revisionNumber, description, normalizedCidr, remoteAddressGroupId, belongsToDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.securityGroupRulesGet(id, securityGroupId, remoteGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, tenantId, revisionNumber, description, normalizedCidr, remoteAddressGroupId, belongsToDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdDelete: function (id, options) {
            return localVarFp.securityGroupRulesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdGet: function (id, options) {
            return localVarFp.securityGroupRulesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
         * @param {SecurityGroupRuleUpdateRequest} [securityGroupRuleUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesIdPut: function (id, securityGroupRuleUpdateRequest, options) {
            return localVarFp.securityGroupRulesIdPut(id, securityGroupRuleUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SecurityGroupRulesCreateRequest} [securityGroupRulesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupRulesPost: function (securityGroupRulesCreateRequest, options) {
            return localVarFp.securityGroupRulesPost(securityGroupRulesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SecurityGroupRulesApiFactory = SecurityGroupRulesApiFactory;
/**
 * SecurityGroupRulesApi - object-oriented interface
 * @export
 * @class SecurityGroupRulesApi
 * @extends {BaseAPI}
 */
var SecurityGroupRulesApi = /** @class */ (function (_super) {
    __extends(SecurityGroupRulesApi, _super);
    function SecurityGroupRulesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/security-group-rules API
     * @param {string} [securityGroupId] security_group_id query parameter for /v2.0/security-group-rules API
     * @param {string} [remoteGroupId] remote_group_id query parameter for /v2.0/security-group-rules API
     * @param {SecurityGroupRulesGetDirectionEnum} [direction] direction query parameter for /v2.0/security-group-rules API
     * @param {string} [protocol] protocol query parameter for /v2.0/security-group-rules API
     * @param {number | null} [portRangeMin] port_range_min query parameter for /v2.0/security-group-rules API
     * @param {number | null} [portRangeMax] port_range_max query parameter for /v2.0/security-group-rules API
     * @param {SecurityGroupRulesGetEthertypeEnum} [ethertype] ethertype query parameter for /v2.0/security-group-rules API
     * @param {string} [remoteIpPrefix] remote_ip_prefix query parameter for /v2.0/security-group-rules API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/security-group-rules API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/security-group-rules API
     * @param {string} [description] description query parameter for /v2.0/security-group-rules API
     * @param {string | null} [normalizedCidr] normalized_cidr query parameter for /v2.0/security-group-rules API
     * @param {string} [remoteAddressGroupId] remote_address_group_id query parameter for /v2.0/security-group-rules API
     * @param {string | boolean | null} [belongsToDefaultSg] belongs_to_default_sg query parameter for /v2.0/security-group-rules API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {SecurityGroupRulesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupRulesApi
     */
    SecurityGroupRulesApi.prototype.securityGroupRulesGet = function (id, securityGroupId, remoteGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, tenantId, revisionNumber, description, normalizedCidr, remoteAddressGroupId, belongsToDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.SecurityGroupRulesApiFp)(this.configuration).securityGroupRulesGet(id, securityGroupId, remoteGroupId, direction, protocol, portRangeMin, portRangeMax, ethertype, remoteIpPrefix, tenantId, revisionNumber, description, normalizedCidr, remoteAddressGroupId, belongsToDefaultSg, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupRulesApi
     */
    SecurityGroupRulesApi.prototype.securityGroupRulesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.SecurityGroupRulesApiFp)(this.configuration).securityGroupRulesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupRulesApi
     */
    SecurityGroupRulesApi.prototype.securityGroupRulesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.SecurityGroupRulesApiFp)(this.configuration).securityGroupRulesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/security-group-rules/{id} API
     * @param {SecurityGroupRuleUpdateRequest} [securityGroupRuleUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupRulesApi
     */
    SecurityGroupRulesApi.prototype.securityGroupRulesIdPut = function (id, securityGroupRuleUpdateRequest, options) {
        var _this = this;
        return (0, exports.SecurityGroupRulesApiFp)(this.configuration).securityGroupRulesIdPut(id, securityGroupRuleUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SecurityGroupRulesCreateRequest} [securityGroupRulesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupRulesApi
     */
    SecurityGroupRulesApi.prototype.securityGroupRulesPost = function (securityGroupRulesCreateRequest, options) {
        var _this = this;
        return (0, exports.SecurityGroupRulesApiFp)(this.configuration).securityGroupRulesPost(securityGroupRulesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SecurityGroupRulesApi;
}(base_1.BaseAPI));
exports.SecurityGroupRulesApi = SecurityGroupRulesApi;
/**
 * @export
 */
exports.SecurityGroupRulesGetDirectionEnum = {
    Ingress: 'ingress',
    Egress: 'egress'
};
/**
 * @export
 */
exports.SecurityGroupRulesGetEthertypeEnum = {
    Ipv4: 'IPv4',
    Ipv6: 'IPv6'
};
/**
 * @export
 */
exports.SecurityGroupRulesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * SecurityGroupsApi - axios parameter creator
 * @export
 */
var SecurityGroupsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/security-groups API
         * @param {string} [name] name query parameter for /v2.0/security-groups API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/security-groups API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/security-groups API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/security-groups API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/security-groups API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/security-groups API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/security-groups API
         * @param {string} [description] description query parameter for /v2.0/security-groups API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/security-groups API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsGet: function (id_1, name_1, tenantId_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, shared_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 15; _i < arguments.length; _i++) {
                args_1[_i - 15] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, tenantId_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, shared_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, tenantId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, shared, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/security-groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (shared !== undefined) {
                                for (_a = 0, _b = Object.entries(shared); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsIdDelete', 'id', id);
                            localVarPath = "/v2.0/security-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsIdGet', 'id', id);
                            localVarPath = "/v2.0/security-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {SecurityGroupUpdateRequest} [securityGroupUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdPut: function (id_1, securityGroupUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, securityGroupUpdateRequest_1], args_1, true), void 0, function (id, securityGroupUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsIdPut', 'id', id);
                            localVarPath = "/v2.0/security-groups/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(securityGroupUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {SecurityGroupsCreateRequest} [securityGroupsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsPost: function (securityGroupsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([securityGroupsCreateRequest_1], args_1, true), void 0, function (securityGroupsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/security-groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(securityGroupsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsDelete: function (securityGroupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([securityGroupId_1], args_1, true), void 0, function (securityGroupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'securityGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsSecurityGroupIdTagsDelete', 'securityGroupId', securityGroupId);
                            localVarPath = "/v2.0/security-groups/{security_group_id}/tags"
                                .replace("{".concat("security_group_id", "}"), encodeURIComponent(String(securityGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupsSecurityGroupIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/security-groups/{security_group_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdDelete: function (securityGroupId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([securityGroupId_1, id_1], args_1, true), void 0, function (securityGroupId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'securityGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsSecurityGroupIdTagsIdDelete', 'securityGroupId', securityGroupId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsSecurityGroupIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/security-groups/{security_group_id}/tags/{id}"
                                .replace("{".concat("security_group_id", "}"), encodeURIComponent(String(securityGroupId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdGet: function (securityGroupId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([securityGroupId_1, id_1], args_1, true), void 0, function (securityGroupId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'securityGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsSecurityGroupIdTagsIdGet', 'securityGroupId', securityGroupId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsSecurityGroupIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/security-groups/{security_group_id}/tags/{id}"
                                .replace("{".concat("security_group_id", "}"), encodeURIComponent(String(securityGroupId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdPut: function (securityGroupId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([securityGroupId_1, id_1], args_1, true), void 0, function (securityGroupId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'securityGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsSecurityGroupIdTagsIdPut', 'securityGroupId', securityGroupId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsSecurityGroupIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/security-groups/{security_group_id}/tags/{id}"
                                .replace("{".concat("security_group_id", "}"), encodeURIComponent(String(securityGroupId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {SecurityGroupsTagsUpdateAllRequest} [securityGroupsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsPut: function (securityGroupId_1, securityGroupsTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([securityGroupId_1, securityGroupsTagsUpdateAllRequest_1], args_1, true), void 0, function (securityGroupId, securityGroupsTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'securityGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('securityGroupsSecurityGroupIdTagsPut', 'securityGroupId', securityGroupId);
                            localVarPath = "/v2.0/security-groups/{security_group_id}/tags"
                                .replace("{".concat("security_group_id", "}"), encodeURIComponent(String(securityGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(securityGroupsTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SecurityGroupsApiAxiosParamCreator = SecurityGroupsApiAxiosParamCreator;
/**
 * SecurityGroupsApi - functional programming interface
 * @export
 */
var SecurityGroupsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SecurityGroupsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/security-groups API
         * @param {string} [name] name query parameter for /v2.0/security-groups API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/security-groups API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/security-groups API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/security-groups API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/security-groups API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/security-groups API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/security-groups API
         * @param {string} [description] description query parameter for /v2.0/security-groups API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/security-groups API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsGet: function (id, name, tenantId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, shared, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsGet(id, name, tenantId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, shared, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {SecurityGroupUpdateRequest} [securityGroupUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdPut: function (id, securityGroupUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsIdPut(id, securityGroupUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SecurityGroupsCreateRequest} [securityGroupsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsPost: function (securityGroupsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsPost(securityGroupsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsDelete: function (securityGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsSecurityGroupIdTagsDelete(securityGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsSecurityGroupIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupsSecurityGroupIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsSecurityGroupIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsSecurityGroupIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdDelete: function (securityGroupId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsSecurityGroupIdTagsIdDelete(securityGroupId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsSecurityGroupIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdGet: function (securityGroupId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsSecurityGroupIdTagsIdGet(securityGroupId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsSecurityGroupIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdPut: function (securityGroupId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsSecurityGroupIdTagsIdPut(securityGroupId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsSecurityGroupIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {SecurityGroupsTagsUpdateAllRequest} [securityGroupsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsPut: function (securityGroupId, securityGroupsTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.securityGroupsSecurityGroupIdTagsPut(securityGroupId, securityGroupsTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SecurityGroupsApi.securityGroupsSecurityGroupIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SecurityGroupsApiFp = SecurityGroupsApiFp;
/**
 * SecurityGroupsApi - factory interface
 * @export
 */
var SecurityGroupsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SecurityGroupsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/security-groups API
         * @param {string} [name] name query parameter for /v2.0/security-groups API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/security-groups API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/security-groups API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/security-groups API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/security-groups API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/security-groups API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/security-groups API
         * @param {string} [description] description query parameter for /v2.0/security-groups API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/security-groups API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsGet: function (id, name, tenantId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, shared, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.securityGroupsGet(id, name, tenantId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, shared, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdDelete: function (id, options) {
            return localVarFp.securityGroupsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdGet: function (id, options) {
            return localVarFp.securityGroupsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/security-groups/{id} API
         * @param {SecurityGroupUpdateRequest} [securityGroupUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsIdPut: function (id, securityGroupUpdateRequest, options) {
            return localVarFp.securityGroupsIdPut(id, securityGroupUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SecurityGroupsCreateRequest} [securityGroupsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsPost: function (securityGroupsCreateRequest, options) {
            return localVarFp.securityGroupsPost(securityGroupsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsDelete: function (securityGroupId, options) {
            return localVarFp.securityGroupsSecurityGroupIdTagsDelete(securityGroupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SecurityGroupsSecurityGroupIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.securityGroupsSecurityGroupIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdDelete: function (securityGroupId, id, options) {
            return localVarFp.securityGroupsSecurityGroupIdTagsIdDelete(securityGroupId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdGet: function (securityGroupId, id, options) {
            return localVarFp.securityGroupsSecurityGroupIdTagsIdGet(securityGroupId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsIdPut: function (securityGroupId, id, options) {
            return localVarFp.securityGroupsSecurityGroupIdTagsIdPut(securityGroupId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
         * @param {SecurityGroupsTagsUpdateAllRequest} [securityGroupsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGroupsSecurityGroupIdTagsPut: function (securityGroupId, securityGroupsTagsUpdateAllRequest, options) {
            return localVarFp.securityGroupsSecurityGroupIdTagsPut(securityGroupId, securityGroupsTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SecurityGroupsApiFactory = SecurityGroupsApiFactory;
/**
 * SecurityGroupsApi - object-oriented interface
 * @export
 * @class SecurityGroupsApi
 * @extends {BaseAPI}
 */
var SecurityGroupsApi = /** @class */ (function (_super) {
    __extends(SecurityGroupsApi, _super);
    function SecurityGroupsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/security-groups API
     * @param {string} [name] name query parameter for /v2.0/security-groups API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/security-groups API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/security-groups API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/security-groups API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/security-groups API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/security-groups API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/security-groups API
     * @param {string} [description] description query parameter for /v2.0/security-groups API
     * @param {string | boolean} [shared] shared query parameter for /v2.0/security-groups API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {SecurityGroupsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsGet = function (id, name, tenantId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, shared, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsGet(id, name, tenantId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, shared, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/security-groups/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/security-groups/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/security-groups/{id} API
     * @param {SecurityGroupUpdateRequest} [securityGroupUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsIdPut = function (id, securityGroupUpdateRequest, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsIdPut(id, securityGroupUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SecurityGroupsCreateRequest} [securityGroupsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsPost = function (securityGroupsCreateRequest, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsPost(securityGroupsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsSecurityGroupIdTagsDelete = function (securityGroupId, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsSecurityGroupIdTagsDelete(securityGroupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {SecurityGroupsSecurityGroupIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsSecurityGroupIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsSecurityGroupIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsSecurityGroupIdTagsIdDelete = function (securityGroupId, id, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsSecurityGroupIdTagsIdDelete(securityGroupId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsSecurityGroupIdTagsIdGet = function (securityGroupId, id, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsSecurityGroupIdTagsIdGet(securityGroupId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsSecurityGroupIdTagsIdPut = function (securityGroupId, id, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsSecurityGroupIdTagsIdPut(securityGroupId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} securityGroupId security_group_id parameter for /v2.0/security-groups/{security_group_id}/tags/{id} API
     * @param {SecurityGroupsTagsUpdateAllRequest} [securityGroupsTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupsApi
     */
    SecurityGroupsApi.prototype.securityGroupsSecurityGroupIdTagsPut = function (securityGroupId, securityGroupsTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.SecurityGroupsApiFp)(this.configuration).securityGroupsSecurityGroupIdTagsPut(securityGroupId, securityGroupsTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SecurityGroupsApi;
}(base_1.BaseAPI));
exports.SecurityGroupsApi = SecurityGroupsApi;
/**
 * @export
 */
exports.SecurityGroupsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.SecurityGroupsSecurityGroupIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * SegmentsApi - axios parameter creator
 * @export
 */
var SegmentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/segments API
         * @param {string} [networkId] network_id query parameter for /v2.0/segments API
         * @param {string} [physicalNetwork] physical_network query parameter for /v2.0/segments API
         * @param {string} [networkType] network_type query parameter for /v2.0/segments API
         * @param {string | null} [name] name query parameter for /v2.0/segments API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/segments API
         * @param {string} [description] description query parameter for /v2.0/segments API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SegmentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsGet: function (id_1, networkId_1, physicalNetwork_1, networkType_1, name_1, revisionNumber_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 12; _i < arguments.length; _i++) {
                args_1[_i - 12] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, networkId_1, physicalNetwork_1, networkType_1, name_1, revisionNumber_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, networkId, physicalNetwork, networkType, name, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/segments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (networkId !== undefined) {
                                localVarQueryParameter['network_id'] = networkId;
                            }
                            if (physicalNetwork !== undefined) {
                                localVarQueryParameter['physical_network'] = physicalNetwork;
                            }
                            if (networkType !== undefined) {
                                localVarQueryParameter['network_type'] = networkType;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('segmentsIdDelete', 'id', id);
                            localVarPath = "/v2.0/segments/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('segmentsIdGet', 'id', id);
                            localVarPath = "/v2.0/segments/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {SegmentUpdateRequest} [segmentUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdPut: function (id_1, segmentUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, segmentUpdateRequest_1], args_1, true), void 0, function (id, segmentUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('segmentsIdPut', 'id', id);
                            localVarPath = "/v2.0/segments/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(segmentUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {SegmentsCreateRequest} [segmentsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsPost: function (segmentsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([segmentsCreateRequest_1], args_1, true), void 0, function (segmentsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/segments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(segmentsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SegmentsApiAxiosParamCreator = SegmentsApiAxiosParamCreator;
/**
 * SegmentsApi - functional programming interface
 * @export
 */
var SegmentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SegmentsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/segments API
         * @param {string} [networkId] network_id query parameter for /v2.0/segments API
         * @param {string} [physicalNetwork] physical_network query parameter for /v2.0/segments API
         * @param {string} [networkType] network_type query parameter for /v2.0/segments API
         * @param {string | null} [name] name query parameter for /v2.0/segments API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/segments API
         * @param {string} [description] description query parameter for /v2.0/segments API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SegmentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsGet: function (id, networkId, physicalNetwork, networkType, name, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.segmentsGet(id, networkId, physicalNetwork, networkType, name, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SegmentsApi.segmentsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.segmentsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SegmentsApi.segmentsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.segmentsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SegmentsApi.segmentsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {SegmentUpdateRequest} [segmentUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdPut: function (id, segmentUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.segmentsIdPut(id, segmentUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SegmentsApi.segmentsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SegmentsCreateRequest} [segmentsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsPost: function (segmentsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.segmentsPost(segmentsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SegmentsApi.segmentsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SegmentsApiFp = SegmentsApiFp;
/**
 * SegmentsApi - factory interface
 * @export
 */
var SegmentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SegmentsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/segments API
         * @param {string} [networkId] network_id query parameter for /v2.0/segments API
         * @param {string} [physicalNetwork] physical_network query parameter for /v2.0/segments API
         * @param {string} [networkType] network_type query parameter for /v2.0/segments API
         * @param {string | null} [name] name query parameter for /v2.0/segments API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/segments API
         * @param {string} [description] description query parameter for /v2.0/segments API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SegmentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsGet: function (id, networkId, physicalNetwork, networkType, name, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.segmentsGet(id, networkId, physicalNetwork, networkType, name, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdDelete: function (id, options) {
            return localVarFp.segmentsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdGet: function (id, options) {
            return localVarFp.segmentsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/segments/{id} API
         * @param {SegmentUpdateRequest} [segmentUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsIdPut: function (id, segmentUpdateRequest, options) {
            return localVarFp.segmentsIdPut(id, segmentUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SegmentsCreateRequest} [segmentsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        segmentsPost: function (segmentsCreateRequest, options) {
            return localVarFp.segmentsPost(segmentsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SegmentsApiFactory = SegmentsApiFactory;
/**
 * SegmentsApi - object-oriented interface
 * @export
 * @class SegmentsApi
 * @extends {BaseAPI}
 */
var SegmentsApi = /** @class */ (function (_super) {
    __extends(SegmentsApi, _super);
    function SegmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/segments API
     * @param {string} [networkId] network_id query parameter for /v2.0/segments API
     * @param {string} [physicalNetwork] physical_network query parameter for /v2.0/segments API
     * @param {string} [networkType] network_type query parameter for /v2.0/segments API
     * @param {string | null} [name] name query parameter for /v2.0/segments API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/segments API
     * @param {string} [description] description query parameter for /v2.0/segments API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {SegmentsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    SegmentsApi.prototype.segmentsGet = function (id, networkId, physicalNetwork, networkType, name, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.SegmentsApiFp)(this.configuration).segmentsGet(id, networkId, physicalNetwork, networkType, name, revisionNumber, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/segments/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    SegmentsApi.prototype.segmentsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.SegmentsApiFp)(this.configuration).segmentsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/segments/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    SegmentsApi.prototype.segmentsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.SegmentsApiFp)(this.configuration).segmentsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/segments/{id} API
     * @param {SegmentUpdateRequest} [segmentUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    SegmentsApi.prototype.segmentsIdPut = function (id, segmentUpdateRequest, options) {
        var _this = this;
        return (0, exports.SegmentsApiFp)(this.configuration).segmentsIdPut(id, segmentUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SegmentsCreateRequest} [segmentsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SegmentsApi
     */
    SegmentsApi.prototype.segmentsPost = function (segmentsCreateRequest, options) {
        var _this = this;
        return (0, exports.SegmentsApiFp)(this.configuration).segmentsPost(segmentsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SegmentsApi;
}(base_1.BaseAPI));
exports.SegmentsApi = SegmentsApi;
/**
 * @export
 */
exports.SegmentsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * ServiceProfilesApi - axios parameter creator
 * @export
 */
var ServiceProfilesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/service_profiles API
         * @param {string | null} [description] description query parameter for /v2.0/service_profiles API
         * @param {string} [driver] driver query parameter for /v2.0/service_profiles API
         * @param {string | boolean | null} [enabled] enabled query parameter for /v2.0/service_profiles API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {ServiceProfilesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesGet: function (id_1, description_1, driver_1, enabled_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, description_1, driver_1, enabled_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, description, driver, enabled, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            localVarPath = "/v2.0/service_profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _d.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (driver !== undefined) {
                                localVarQueryParameter['driver'] = driver;
                            }
                            if (enabled !== undefined) {
                                for (_a = 0, _b = Object.entries(enabled); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('serviceProfilesIdDelete', 'id', id);
                            localVarPath = "/v2.0/service_profiles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('serviceProfilesIdGet', 'id', id);
                            localVarPath = "/v2.0/service_profiles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {ServiceProfileUpdateRequest} [serviceProfileUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdPut: function (id_1, serviceProfileUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, serviceProfileUpdateRequest_1], args_1, true), void 0, function (id, serviceProfileUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('serviceProfilesIdPut', 'id', id);
                            localVarPath = "/v2.0/service_profiles/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceProfileUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {ServiceProfilesCreateRequest} [serviceProfilesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesPost: function (serviceProfilesCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([serviceProfilesCreateRequest_1], args_1, true), void 0, function (serviceProfilesCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/service_profiles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceProfilesCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ServiceProfilesApiAxiosParamCreator = ServiceProfilesApiAxiosParamCreator;
/**
 * ServiceProfilesApi - functional programming interface
 * @export
 */
var ServiceProfilesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ServiceProfilesApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/service_profiles API
         * @param {string | null} [description] description query parameter for /v2.0/service_profiles API
         * @param {string} [driver] driver query parameter for /v2.0/service_profiles API
         * @param {string | boolean | null} [enabled] enabled query parameter for /v2.0/service_profiles API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {ServiceProfilesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesGet: function (id, description, driver, enabled, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProfilesGet(id, description, driver, enabled, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProfilesApi.serviceProfilesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProfilesIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProfilesApi.serviceProfilesIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProfilesIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProfilesApi.serviceProfilesIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {ServiceProfileUpdateRequest} [serviceProfileUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdPut: function (id, serviceProfileUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProfilesIdPut(id, serviceProfileUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProfilesApi.serviceProfilesIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {ServiceProfilesCreateRequest} [serviceProfilesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesPost: function (serviceProfilesCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProfilesPost(serviceProfilesCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProfilesApi.serviceProfilesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ServiceProfilesApiFp = ServiceProfilesApiFp;
/**
 * ServiceProfilesApi - factory interface
 * @export
 */
var ServiceProfilesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ServiceProfilesApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/service_profiles API
         * @param {string | null} [description] description query parameter for /v2.0/service_profiles API
         * @param {string} [driver] driver query parameter for /v2.0/service_profiles API
         * @param {string | boolean | null} [enabled] enabled query parameter for /v2.0/service_profiles API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {ServiceProfilesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesGet: function (id, description, driver, enabled, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.serviceProfilesGet(id, description, driver, enabled, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdDelete: function (id, options) {
            return localVarFp.serviceProfilesIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdGet: function (id, options) {
            return localVarFp.serviceProfilesIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
         * @param {ServiceProfileUpdateRequest} [serviceProfileUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesIdPut: function (id, serviceProfileUpdateRequest, options) {
            return localVarFp.serviceProfilesIdPut(id, serviceProfileUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {ServiceProfilesCreateRequest} [serviceProfilesCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProfilesPost: function (serviceProfilesCreateRequest, options) {
            return localVarFp.serviceProfilesPost(serviceProfilesCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ServiceProfilesApiFactory = ServiceProfilesApiFactory;
/**
 * ServiceProfilesApi - object-oriented interface
 * @export
 * @class ServiceProfilesApi
 * @extends {BaseAPI}
 */
var ServiceProfilesApi = /** @class */ (function (_super) {
    __extends(ServiceProfilesApi, _super);
    function ServiceProfilesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/service_profiles API
     * @param {string | null} [description] description query parameter for /v2.0/service_profiles API
     * @param {string} [driver] driver query parameter for /v2.0/service_profiles API
     * @param {string | boolean | null} [enabled] enabled query parameter for /v2.0/service_profiles API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {ServiceProfilesGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProfilesApi
     */
    ServiceProfilesApi.prototype.serviceProfilesGet = function (id, description, driver, enabled, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.ServiceProfilesApiFp)(this.configuration).serviceProfilesGet(id, description, driver, enabled, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProfilesApi
     */
    ServiceProfilesApi.prototype.serviceProfilesIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.ServiceProfilesApiFp)(this.configuration).serviceProfilesIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProfilesApi
     */
    ServiceProfilesApi.prototype.serviceProfilesIdGet = function (id, options) {
        var _this = this;
        return (0, exports.ServiceProfilesApiFp)(this.configuration).serviceProfilesIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/flavors/{flavor_id}/service_profiles/{id} API
     * @param {ServiceProfileUpdateRequest} [serviceProfileUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProfilesApi
     */
    ServiceProfilesApi.prototype.serviceProfilesIdPut = function (id, serviceProfileUpdateRequest, options) {
        var _this = this;
        return (0, exports.ServiceProfilesApiFp)(this.configuration).serviceProfilesIdPut(id, serviceProfileUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {ServiceProfilesCreateRequest} [serviceProfilesCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProfilesApi
     */
    ServiceProfilesApi.prototype.serviceProfilesPost = function (serviceProfilesCreateRequest, options) {
        var _this = this;
        return (0, exports.ServiceProfilesApiFp)(this.configuration).serviceProfilesPost(serviceProfilesCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ServiceProfilesApi;
}(base_1.BaseAPI));
exports.ServiceProfilesApi = ServiceProfilesApi;
/**
 * @export
 */
exports.ServiceProfilesGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * ServiceProvidersApi - axios parameter creator
 * @export
 */
var ServiceProvidersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {ServiceProvidersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/service-providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('serviceProvidersIdDelete', 'id', id);
                            localVarPath = "/v2.0/service-providers/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('serviceProvidersIdGet', 'id', id);
                            localVarPath = "/v2.0/service-providers/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {ServiceProviderUpdateRequest} [serviceProviderUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdPut: function (id_1, serviceProviderUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, serviceProviderUpdateRequest_1], args_1, true), void 0, function (id, serviceProviderUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('serviceProvidersIdPut', 'id', id);
                            localVarPath = "/v2.0/service-providers/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceProviderUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {ServiceProvidersCreateRequest} [serviceProvidersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersPost: function (serviceProvidersCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([serviceProvidersCreateRequest_1], args_1, true), void 0, function (serviceProvidersCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/service-providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(serviceProvidersCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ServiceProvidersApiAxiosParamCreator = ServiceProvidersApiAxiosParamCreator;
/**
 * ServiceProvidersApi - functional programming interface
 * @export
 */
var ServiceProvidersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ServiceProvidersApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {ServiceProvidersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProvidersGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProvidersApi.serviceProvidersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProvidersIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProvidersApi.serviceProvidersIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProvidersIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProvidersApi.serviceProvidersIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {ServiceProviderUpdateRequest} [serviceProviderUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdPut: function (id, serviceProviderUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProvidersIdPut(id, serviceProviderUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProvidersApi.serviceProvidersIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {ServiceProvidersCreateRequest} [serviceProvidersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersPost: function (serviceProvidersCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.serviceProvidersPost(serviceProvidersCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServiceProvidersApi.serviceProvidersPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ServiceProvidersApiFp = ServiceProvidersApiFp;
/**
 * ServiceProvidersApi - factory interface
 * @export
 */
var ServiceProvidersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ServiceProvidersApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {ServiceProvidersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.serviceProvidersGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdDelete: function (id, options) {
            return localVarFp.serviceProvidersIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdGet: function (id, options) {
            return localVarFp.serviceProvidersIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/service-providers/{id} API
         * @param {ServiceProviderUpdateRequest} [serviceProviderUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersIdPut: function (id, serviceProviderUpdateRequest, options) {
            return localVarFp.serviceProvidersIdPut(id, serviceProviderUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {ServiceProvidersCreateRequest} [serviceProvidersCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceProvidersPost: function (serviceProvidersCreateRequest, options) {
            return localVarFp.serviceProvidersPost(serviceProvidersCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ServiceProvidersApiFactory = ServiceProvidersApiFactory;
/**
 * ServiceProvidersApi - object-oriented interface
 * @export
 * @class ServiceProvidersApi
 * @extends {BaseAPI}
 */
var ServiceProvidersApi = /** @class */ (function (_super) {
    __extends(ServiceProvidersApi, _super);
    function ServiceProvidersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {ServiceProvidersGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProvidersApi
     */
    ServiceProvidersApi.prototype.serviceProvidersGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.ServiceProvidersApiFp)(this.configuration).serviceProvidersGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/service-providers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProvidersApi
     */
    ServiceProvidersApi.prototype.serviceProvidersIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.ServiceProvidersApiFp)(this.configuration).serviceProvidersIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/service-providers/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProvidersApi
     */
    ServiceProvidersApi.prototype.serviceProvidersIdGet = function (id, options) {
        var _this = this;
        return (0, exports.ServiceProvidersApiFp)(this.configuration).serviceProvidersIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/service-providers/{id} API
     * @param {ServiceProviderUpdateRequest} [serviceProviderUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProvidersApi
     */
    ServiceProvidersApi.prototype.serviceProvidersIdPut = function (id, serviceProviderUpdateRequest, options) {
        var _this = this;
        return (0, exports.ServiceProvidersApiFp)(this.configuration).serviceProvidersIdPut(id, serviceProviderUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {ServiceProvidersCreateRequest} [serviceProvidersCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceProvidersApi
     */
    ServiceProvidersApi.prototype.serviceProvidersPost = function (serviceProvidersCreateRequest, options) {
        var _this = this;
        return (0, exports.ServiceProvidersApiFp)(this.configuration).serviceProvidersPost(serviceProvidersCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ServiceProvidersApi;
}(base_1.BaseAPI));
exports.ServiceProvidersApi = ServiceProvidersApi;
/**
 * @export
 */
exports.ServiceProvidersGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * SubnetpoolsApi - axios parameter creator
 * @export
 */
var SubnetpoolsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/subnetpools API
         * @param {string} [name] name query parameter for /v2.0/subnetpools API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/subnetpools API
         * @param {string | number} [defaultQuota] default_quota query parameter for /v2.0/subnetpools API
         * @param {string} [ipVersion] ip_version query parameter for /v2.0/subnetpools API
         * @param {string | number} [defaultPrefixlen] default_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | number} [minPrefixlen] min_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | number} [maxPrefixlen] max_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/subnetpools API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/subnetpools API
         * @param {string | null} [addressScopeId] address_scope_id query parameter for /v2.0/subnetpools API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/subnetpools API
         * @param {string} [description] description query parameter for /v2.0/subnetpools API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetpoolsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsGet: function (id_1, name_1, tenantId_1, defaultQuota_1, ipVersion_1, defaultPrefixlen_1, minPrefixlen_1, maxPrefixlen_1, isDefault_1, shared_1, addressScopeId_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 22; _i < arguments.length; _i++) {
                args_1[_i - 22] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, tenantId_1, defaultQuota_1, ipVersion_1, defaultPrefixlen_1, minPrefixlen_1, maxPrefixlen_1, isDefault_1, shared_1, addressScopeId_1, revisionNumber_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, tenantId, defaultQuota, ipVersion, defaultPrefixlen, minPrefixlen, maxPrefixlen, isDefault, shared, addressScopeId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, _g, _h, _j, key, value, _k, _l, _m, key, value, _o, _p, _q, key, value, _r, _s, _t, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_u) {
                    switch (_u.label) {
                        case 0:
                            localVarPath = "/v2.0/subnetpools";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _u.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (defaultQuota !== undefined) {
                                for (_a = 0, _b = Object.entries(defaultQuota); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (ipVersion !== undefined) {
                                localVarQueryParameter['ip_version'] = ipVersion;
                            }
                            if (defaultPrefixlen !== undefined) {
                                for (_d = 0, _e = Object.entries(defaultPrefixlen); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (minPrefixlen !== undefined) {
                                for (_g = 0, _h = Object.entries(minPrefixlen); _g < _h.length; _g++) {
                                    _j = _h[_g], key = _j[0], value = _j[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (maxPrefixlen !== undefined) {
                                for (_k = 0, _l = Object.entries(maxPrefixlen); _k < _l.length; _k++) {
                                    _m = _l[_k], key = _m[0], value = _m[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (isDefault !== undefined) {
                                for (_o = 0, _p = Object.entries(isDefault); _o < _p.length; _o++) {
                                    _q = _p[_o], key = _q[0], value = _q[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (shared !== undefined) {
                                for (_r = 0, _s = Object.entries(shared); _r < _s.length; _r++) {
                                    _t = _s[_r], key = _t[0], value = _t[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (addressScopeId !== undefined) {
                                localVarQueryParameter['address_scope_id'] = addressScopeId;
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdAddPrefixesPut: function (id_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, body_1], args_1, true), void 0, function (id, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsIdAddPrefixesPut', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{id}/add_prefixes"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdDelete: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsIdDelete', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdGet: function (id_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1], args_1, true), void 0, function (id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsIdGet', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdOnboardNetworkSubnetsPut: function (id_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, body_1], args_1, true), void 0, function (id, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsIdOnboardNetworkSubnetsPut', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{id}/onboard_network_subnets"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {SubnetpoolUpdateRequest} [subnetpoolUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdPut: function (id_1, subnetpoolUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, subnetpoolUpdateRequest_1], args_1, true), void 0, function (id, subnetpoolUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsIdPut', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subnetpoolUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdRemovePrefixesPut: function (id_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, body_1], args_1, true), void 0, function (id, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsIdRemovePrefixesPut', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{id}/remove_prefixes"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {SubnetpoolsCreateRequest} [subnetpoolsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsPost: function (subnetpoolsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetpoolsCreateRequest_1], args_1, true), void 0, function (subnetpoolsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/subnetpools";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subnetpoolsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsDelete: function (subnetpoolId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetpoolId_1], args_1, true), void 0, function (subnetpoolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetpoolId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsSubnetpoolIdTagsDelete', 'subnetpoolId', subnetpoolId);
                            localVarPath = "/v2.0/subnetpools/{subnetpool_id}/tags"
                                .replace("{".concat("subnetpool_id", "}"), encodeURIComponent(String(subnetpoolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetpoolsSubnetpoolIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/subnetpools/{subnetpool_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdDelete: function (subnetpoolId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetpoolId_1, id_1], args_1, true), void 0, function (subnetpoolId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetpoolId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsSubnetpoolIdTagsIdDelete', 'subnetpoolId', subnetpoolId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsSubnetpoolIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{subnetpool_id}/tags/{id}"
                                .replace("{".concat("subnetpool_id", "}"), encodeURIComponent(String(subnetpoolId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdGet: function (subnetpoolId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetpoolId_1, id_1], args_1, true), void 0, function (subnetpoolId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetpoolId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsSubnetpoolIdTagsIdGet', 'subnetpoolId', subnetpoolId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsSubnetpoolIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{subnetpool_id}/tags/{id}"
                                .replace("{".concat("subnetpool_id", "}"), encodeURIComponent(String(subnetpoolId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdPut: function (subnetpoolId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetpoolId_1, id_1], args_1, true), void 0, function (subnetpoolId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetpoolId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsSubnetpoolIdTagsIdPut', 'subnetpoolId', subnetpoolId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsSubnetpoolIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/subnetpools/{subnetpool_id}/tags/{id}"
                                .replace("{".concat("subnetpool_id", "}"), encodeURIComponent(String(subnetpoolId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {SubnetpoolsTagsUpdateAllRequest} [subnetpoolsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsPut: function (subnetpoolId_1, subnetpoolsTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetpoolId_1, subnetpoolsTagsUpdateAllRequest_1], args_1, true), void 0, function (subnetpoolId, subnetpoolsTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetpoolId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetpoolsSubnetpoolIdTagsPut', 'subnetpoolId', subnetpoolId);
                            localVarPath = "/v2.0/subnetpools/{subnetpool_id}/tags"
                                .replace("{".concat("subnetpool_id", "}"), encodeURIComponent(String(subnetpoolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subnetpoolsTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SubnetpoolsApiAxiosParamCreator = SubnetpoolsApiAxiosParamCreator;
/**
 * SubnetpoolsApi - functional programming interface
 * @export
 */
var SubnetpoolsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SubnetpoolsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/subnetpools API
         * @param {string} [name] name query parameter for /v2.0/subnetpools API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/subnetpools API
         * @param {string | number} [defaultQuota] default_quota query parameter for /v2.0/subnetpools API
         * @param {string} [ipVersion] ip_version query parameter for /v2.0/subnetpools API
         * @param {string | number} [defaultPrefixlen] default_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | number} [minPrefixlen] min_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | number} [maxPrefixlen] max_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/subnetpools API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/subnetpools API
         * @param {string | null} [addressScopeId] address_scope_id query parameter for /v2.0/subnetpools API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/subnetpools API
         * @param {string} [description] description query parameter for /v2.0/subnetpools API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetpoolsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsGet: function (id, name, tenantId, defaultQuota, ipVersion, defaultPrefixlen, minPrefixlen, maxPrefixlen, isDefault, shared, addressScopeId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsGet(id, name, tenantId, defaultQuota, ipVersion, defaultPrefixlen, minPrefixlen, maxPrefixlen, isDefault, shared, addressScopeId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdAddPrefixesPut: function (id, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsIdAddPrefixesPut(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsIdAddPrefixesPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdOnboardNetworkSubnetsPut: function (id, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsIdOnboardNetworkSubnetsPut(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsIdOnboardNetworkSubnetsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {SubnetpoolUpdateRequest} [subnetpoolUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdPut: function (id, subnetpoolUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsIdPut(id, subnetpoolUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdRemovePrefixesPut: function (id, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsIdRemovePrefixesPut(id, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsIdRemovePrefixesPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SubnetpoolsCreateRequest} [subnetpoolsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsPost: function (subnetpoolsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsPost(subnetpoolsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsDelete: function (subnetpoolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsSubnetpoolIdTagsDelete(subnetpoolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsSubnetpoolIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetpoolsSubnetpoolIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsSubnetpoolIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsSubnetpoolIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdDelete: function (subnetpoolId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsSubnetpoolIdTagsIdDelete(subnetpoolId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsSubnetpoolIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdGet: function (subnetpoolId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsSubnetpoolIdTagsIdGet(subnetpoolId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsSubnetpoolIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdPut: function (subnetpoolId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsSubnetpoolIdTagsIdPut(subnetpoolId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsSubnetpoolIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {SubnetpoolsTagsUpdateAllRequest} [subnetpoolsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsPut: function (subnetpoolId, subnetpoolsTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetpoolsSubnetpoolIdTagsPut(subnetpoolId, subnetpoolsTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetpoolsApi.subnetpoolsSubnetpoolIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SubnetpoolsApiFp = SubnetpoolsApiFp;
/**
 * SubnetpoolsApi - factory interface
 * @export
 */
var SubnetpoolsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SubnetpoolsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/subnetpools API
         * @param {string} [name] name query parameter for /v2.0/subnetpools API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/subnetpools API
         * @param {string | number} [defaultQuota] default_quota query parameter for /v2.0/subnetpools API
         * @param {string} [ipVersion] ip_version query parameter for /v2.0/subnetpools API
         * @param {string | number} [defaultPrefixlen] default_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | number} [minPrefixlen] min_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | number} [maxPrefixlen] max_prefixlen query parameter for /v2.0/subnetpools API
         * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/subnetpools API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/subnetpools API
         * @param {string | null} [addressScopeId] address_scope_id query parameter for /v2.0/subnetpools API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/subnetpools API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/subnetpools API
         * @param {string} [description] description query parameter for /v2.0/subnetpools API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetpoolsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsGet: function (id, name, tenantId, defaultQuota, ipVersion, defaultPrefixlen, minPrefixlen, maxPrefixlen, isDefault, shared, addressScopeId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.subnetpoolsGet(id, name, tenantId, defaultQuota, ipVersion, defaultPrefixlen, minPrefixlen, maxPrefixlen, isDefault, shared, addressScopeId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdAddPrefixesPut: function (id, body, options) {
            return localVarFp.subnetpoolsIdAddPrefixesPut(id, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdDelete: function (id, options) {
            return localVarFp.subnetpoolsIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdGet: function (id, options) {
            return localVarFp.subnetpoolsIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdOnboardNetworkSubnetsPut: function (id, body, options) {
            return localVarFp.subnetpoolsIdOnboardNetworkSubnetsPut(id, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {SubnetpoolUpdateRequest} [subnetpoolUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdPut: function (id, subnetpoolUpdateRequest, options) {
            return localVarFp.subnetpoolsIdPut(id, subnetpoolUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsIdRemovePrefixesPut: function (id, body, options) {
            return localVarFp.subnetpoolsIdRemovePrefixesPut(id, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SubnetpoolsCreateRequest} [subnetpoolsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsPost: function (subnetpoolsCreateRequest, options) {
            return localVarFp.subnetpoolsPost(subnetpoolsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsDelete: function (subnetpoolId, options) {
            return localVarFp.subnetpoolsSubnetpoolIdTagsDelete(subnetpoolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetpoolsSubnetpoolIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.subnetpoolsSubnetpoolIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdDelete: function (subnetpoolId, id, options) {
            return localVarFp.subnetpoolsSubnetpoolIdTagsIdDelete(subnetpoolId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdGet: function (subnetpoolId, id, options) {
            return localVarFp.subnetpoolsSubnetpoolIdTagsIdGet(subnetpoolId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsIdPut: function (subnetpoolId, id, options) {
            return localVarFp.subnetpoolsSubnetpoolIdTagsIdPut(subnetpoolId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
         * @param {SubnetpoolsTagsUpdateAllRequest} [subnetpoolsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetpoolsSubnetpoolIdTagsPut: function (subnetpoolId, subnetpoolsTagsUpdateAllRequest, options) {
            return localVarFp.subnetpoolsSubnetpoolIdTagsPut(subnetpoolId, subnetpoolsTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SubnetpoolsApiFactory = SubnetpoolsApiFactory;
/**
 * SubnetpoolsApi - object-oriented interface
 * @export
 * @class SubnetpoolsApi
 * @extends {BaseAPI}
 */
var SubnetpoolsApi = /** @class */ (function (_super) {
    __extends(SubnetpoolsApi, _super);
    function SubnetpoolsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/subnetpools API
     * @param {string} [name] name query parameter for /v2.0/subnetpools API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/subnetpools API
     * @param {string | number} [defaultQuota] default_quota query parameter for /v2.0/subnetpools API
     * @param {string} [ipVersion] ip_version query parameter for /v2.0/subnetpools API
     * @param {string | number} [defaultPrefixlen] default_prefixlen query parameter for /v2.0/subnetpools API
     * @param {string | number} [minPrefixlen] min_prefixlen query parameter for /v2.0/subnetpools API
     * @param {string | number} [maxPrefixlen] max_prefixlen query parameter for /v2.0/subnetpools API
     * @param {string | boolean} [isDefault] is_default query parameter for /v2.0/subnetpools API
     * @param {string | boolean} [shared] shared query parameter for /v2.0/subnetpools API
     * @param {string | null} [addressScopeId] address_scope_id query parameter for /v2.0/subnetpools API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/subnetpools API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/subnetpools API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/subnetpools API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/subnetpools API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/subnetpools API
     * @param {string} [description] description query parameter for /v2.0/subnetpools API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {SubnetpoolsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsGet = function (id, name, tenantId, defaultQuota, ipVersion, defaultPrefixlen, minPrefixlen, maxPrefixlen, isDefault, shared, addressScopeId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsGet(id, name, tenantId, defaultQuota, ipVersion, defaultPrefixlen, minPrefixlen, maxPrefixlen, isDefault, shared, addressScopeId, revisionNumber, tags, tagsAny, notTags, notTagsAny, description, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsIdAddPrefixesPut = function (id, body, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsIdAddPrefixesPut(id, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsIdGet = function (id, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsIdOnboardNetworkSubnetsPut = function (id, body, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsIdOnboardNetworkSubnetsPut(id, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
     * @param {SubnetpoolUpdateRequest} [subnetpoolUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsIdPut = function (id, subnetpoolUpdateRequest, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsIdPut(id, subnetpoolUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} id id parameter for /v2.0/subnetpools/{id}/remove_prefixes API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsIdRemovePrefixesPut = function (id, body, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsIdRemovePrefixesPut(id, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SubnetpoolsCreateRequest} [subnetpoolsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsPost = function (subnetpoolsCreateRequest, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsPost(subnetpoolsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsSubnetpoolIdTagsDelete = function (subnetpoolId, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsSubnetpoolIdTagsDelete(subnetpoolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {SubnetpoolsSubnetpoolIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsSubnetpoolIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsSubnetpoolIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsSubnetpoolIdTagsIdDelete = function (subnetpoolId, id, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsSubnetpoolIdTagsIdDelete(subnetpoolId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsSubnetpoolIdTagsIdGet = function (subnetpoolId, id, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsSubnetpoolIdTagsIdGet(subnetpoolId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsSubnetpoolIdTagsIdPut = function (subnetpoolId, id, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsSubnetpoolIdTagsIdPut(subnetpoolId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetpoolId subnetpool_id parameter for /v2.0/subnetpools/{subnetpool_id}/tags/{id} API
     * @param {SubnetpoolsTagsUpdateAllRequest} [subnetpoolsTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetpoolsApi
     */
    SubnetpoolsApi.prototype.subnetpoolsSubnetpoolIdTagsPut = function (subnetpoolId, subnetpoolsTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.SubnetpoolsApiFp)(this.configuration).subnetpoolsSubnetpoolIdTagsPut(subnetpoolId, subnetpoolsTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SubnetpoolsApi;
}(base_1.BaseAPI));
exports.SubnetpoolsApi = SubnetpoolsApi;
/**
 * @export
 */
exports.SubnetpoolsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.SubnetpoolsSubnetpoolIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * SubnetsApi - axios parameter creator
 * @export
 */
var SubnetsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/subnets API
         * @param {string} [name] name query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpVersionEnum} [ipVersion] ip_version query parameter for /v2.0/subnets API
         * @param {string} [networkId] network_id query parameter for /v2.0/subnets API
         * @param {string | null} [subnetpoolId] subnetpool_id query parameter for /v2.0/subnets API
         * @param {string | null} [cidr] cidr query parameter for /v2.0/subnets API
         * @param {string} [gatewayIp] gateway_ip query parameter for /v2.0/subnets API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/subnets API
         * @param {string | boolean} [enableDhcp] enable_dhcp query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpv6RaModeEnum} [ipv6RaMode] ipv6_ra_mode query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpv6AddressModeEnum} [ipv6AddressMode] ipv6_address_mode query parameter for /v2.0/subnets API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/subnets API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/subnets API
         * @param {string | boolean} [routerexternal] router:external query parameter for /v2.0/subnets API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/subnets API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/subnets API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/subnets API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/subnets API
         * @param {string} [description] description query parameter for /v2.0/subnets API
         * @param {string | null} [segmentId] segment_id query parameter for /v2.0/subnets API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsGet: function (id_1, name_1, ipVersion_1, networkId_1, subnetpoolId_1, cidr_1, gatewayIp_1, tenantId_1, enableDhcp_1, ipv6RaMode_1, ipv6AddressMode_1, shared_1, revisionNumber_1, routerexternal_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, segmentId_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 25; _i < arguments.length; _i++) {
                args_1[_i - 25] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, name_1, ipVersion_1, networkId_1, subnetpoolId_1, cidr_1, gatewayIp_1, tenantId_1, enableDhcp_1, ipv6RaMode_1, ipv6AddressMode_1, shared_1, revisionNumber_1, routerexternal_1, tags_1, tagsAny_1, notTags_1, notTagsAny_1, description_1, segmentId_1, sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (id, name, ipVersion, networkId, subnetpoolId, cidr, gatewayIp, tenantId, enableDhcp, ipv6RaMode, ipv6AddressMode, shared, revisionNumber, routerexternal, tags, tagsAny, notTags, notTagsAny, description, segmentId, sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, _g, _h, _j, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_k) {
                    switch (_k.label) {
                        case 0:
                            localVarPath = "/v2.0/subnets";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _k.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (ipVersion !== undefined) {
                                localVarQueryParameter['ip_version'] = ipVersion;
                            }
                            if (networkId !== undefined) {
                                localVarQueryParameter['network_id'] = networkId;
                            }
                            if (subnetpoolId !== undefined) {
                                localVarQueryParameter['subnetpool_id'] = subnetpoolId;
                            }
                            if (cidr !== undefined) {
                                localVarQueryParameter['cidr'] = cidr;
                            }
                            if (gatewayIp !== undefined) {
                                localVarQueryParameter['gateway_ip'] = gatewayIp;
                            }
                            if (tenantId !== undefined) {
                                localVarQueryParameter['tenant_id'] = tenantId;
                            }
                            if (enableDhcp !== undefined) {
                                for (_a = 0, _b = Object.entries(enableDhcp); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (ipv6RaMode !== undefined) {
                                localVarQueryParameter['ipv6_ra_mode'] = ipv6RaMode;
                            }
                            if (ipv6AddressMode !== undefined) {
                                localVarQueryParameter['ipv6_address_mode'] = ipv6AddressMode;
                            }
                            if (shared !== undefined) {
                                for (_d = 0, _e = Object.entries(shared); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (revisionNumber !== undefined) {
                                localVarQueryParameter['revision_number'] = revisionNumber;
                            }
                            if (routerexternal !== undefined) {
                                for (_g = 0, _h = Object.entries(routerexternal); _g < _h.length; _g++) {
                                    _j = _h[_g], key = _j[0], value = _j[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (tags) {
                                localVarQueryParameter['tags'] = tags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (tagsAny) {
                                localVarQueryParameter['tags-any'] = tagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTags) {
                                localVarQueryParameter['not-tags'] = notTags.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (notTagsAny) {
                                localVarQueryParameter['not-tags-any'] = notTagsAny.join(base_1.COLLECTION_FORMATS.csv);
                            }
                            if (description !== undefined) {
                                localVarQueryParameter['description'] = description;
                            }
                            if (segmentId !== undefined) {
                                localVarQueryParameter['segment_id'] = segmentId;
                            }
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {SubnetsCreateRequest} [subnetsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsPost: function (subnetsCreateRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetsCreateRequest_1], args_1, true), void 0, function (subnetsCreateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/subnets";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subnetsCreateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdDelete: function (subnetId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetId_1], args_1, true), void 0, function (subnetId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdDelete', 'subnetId', subnetId);
                            localVarPath = "/v2.0/subnets/{subnet_id}"
                                .replace("{".concat("subnet_id", "}"), encodeURIComponent(String(subnetId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdGet: function (subnetId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetId_1], args_1, true), void 0, function (subnetId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdGet', 'subnetId', subnetId);
                            localVarPath = "/v2.0/subnets/{subnet_id}"
                                .replace("{".concat("subnet_id", "}"), encodeURIComponent(String(subnetId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {SubnetUpdateRequest} [subnetUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdPut: function (subnetId_1, subnetUpdateRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetId_1, subnetUpdateRequest_1], args_1, true), void 0, function (subnetId, subnetUpdateRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdPut', 'subnetId', subnetId);
                            localVarPath = "/v2.0/subnets/{subnet_id}"
                                .replace("{".concat("subnet_id", "}"), encodeURIComponent(String(subnetId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subnetUpdateRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsDelete: function (subnetId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetId_1], args_1, true), void 0, function (subnetId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdTagsDelete', 'subnetId', subnetId);
                            localVarPath = "/v2.0/subnets/{subnet_id}/tags"
                                .replace("{".concat("subnet_id", "}"), encodeURIComponent(String(subnetId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetsSubnetIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/subnets/{subnet_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdDelete: function (subnetId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetId_1, id_1], args_1, true), void 0, function (subnetId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdTagsIdDelete', 'subnetId', subnetId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/subnets/{subnet_id}/tags/{id}"
                                .replace("{".concat("subnet_id", "}"), encodeURIComponent(String(subnetId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdGet: function (subnetId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetId_1, id_1], args_1, true), void 0, function (subnetId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdTagsIdGet', 'subnetId', subnetId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/subnets/{subnet_id}/tags/{id}"
                                .replace("{".concat("subnet_id", "}"), encodeURIComponent(String(subnetId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdPut: function (subnetId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetId_1, id_1], args_1, true), void 0, function (subnetId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdTagsIdPut', 'subnetId', subnetId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/subnets/{subnet_id}/tags/{id}"
                                .replace("{".concat("subnet_id", "}"), encodeURIComponent(String(subnetId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {SubnetsTagsUpdateAllRequest} [subnetsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsPut: function (subnetId_1, subnetsTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([subnetId_1, subnetsTagsUpdateAllRequest_1], args_1, true), void 0, function (subnetId, subnetsTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'subnetId' is not null or undefined
                            (0, common_1.assertParamExists)('subnetsSubnetIdTagsPut', 'subnetId', subnetId);
                            localVarPath = "/v2.0/subnets/{subnet_id}/tags"
                                .replace("{".concat("subnet_id", "}"), encodeURIComponent(String(subnetId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(subnetsTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SubnetsApiAxiosParamCreator = SubnetsApiAxiosParamCreator;
/**
 * SubnetsApi - functional programming interface
 * @export
 */
var SubnetsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SubnetsApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/subnets API
         * @param {string} [name] name query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpVersionEnum} [ipVersion] ip_version query parameter for /v2.0/subnets API
         * @param {string} [networkId] network_id query parameter for /v2.0/subnets API
         * @param {string | null} [subnetpoolId] subnetpool_id query parameter for /v2.0/subnets API
         * @param {string | null} [cidr] cidr query parameter for /v2.0/subnets API
         * @param {string} [gatewayIp] gateway_ip query parameter for /v2.0/subnets API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/subnets API
         * @param {string | boolean} [enableDhcp] enable_dhcp query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpv6RaModeEnum} [ipv6RaMode] ipv6_ra_mode query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpv6AddressModeEnum} [ipv6AddressMode] ipv6_address_mode query parameter for /v2.0/subnets API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/subnets API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/subnets API
         * @param {string | boolean} [routerexternal] router:external query parameter for /v2.0/subnets API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/subnets API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/subnets API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/subnets API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/subnets API
         * @param {string} [description] description query parameter for /v2.0/subnets API
         * @param {string | null} [segmentId] segment_id query parameter for /v2.0/subnets API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsGet: function (id, name, ipVersion, networkId, subnetpoolId, cidr, gatewayIp, tenantId, enableDhcp, ipv6RaMode, ipv6AddressMode, shared, revisionNumber, routerexternal, tags, tagsAny, notTags, notTagsAny, description, segmentId, sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsGet(id, name, ipVersion, networkId, subnetpoolId, cidr, gatewayIp, tenantId, enableDhcp, ipv6RaMode, ipv6AddressMode, shared, revisionNumber, routerexternal, tags, tagsAny, notTags, notTagsAny, description, segmentId, sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {SubnetsCreateRequest} [subnetsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsPost: function (subnetsCreateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsPost(subnetsCreateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdDelete: function (subnetId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdDelete(subnetId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdGet: function (subnetId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdGet(subnetId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {SubnetUpdateRequest} [subnetUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdPut: function (subnetId, subnetUpdateRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdPut(subnetId, subnetUpdateRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsDelete: function (subnetId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdTagsDelete(subnetId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetsSubnetIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdDelete: function (subnetId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdTagsIdDelete(subnetId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdGet: function (subnetId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdTagsIdGet(subnetId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdPut: function (subnetId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdTagsIdPut(subnetId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {SubnetsTagsUpdateAllRequest} [subnetsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsPut: function (subnetId, subnetsTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.subnetsSubnetIdTagsPut(subnetId, subnetsTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SubnetsApi.subnetsSubnetIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SubnetsApiFp = SubnetsApiFp;
/**
 * SubnetsApi - factory interface
 * @export
 */
var SubnetsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SubnetsApiFp)(configuration);
    return {
        /**
         *
         * @param {string} [id] id query parameter for /v2.0/subnets API
         * @param {string} [name] name query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpVersionEnum} [ipVersion] ip_version query parameter for /v2.0/subnets API
         * @param {string} [networkId] network_id query parameter for /v2.0/subnets API
         * @param {string | null} [subnetpoolId] subnetpool_id query parameter for /v2.0/subnets API
         * @param {string | null} [cidr] cidr query parameter for /v2.0/subnets API
         * @param {string} [gatewayIp] gateway_ip query parameter for /v2.0/subnets API
         * @param {string} [tenantId] tenant_id query parameter for /v2.0/subnets API
         * @param {string | boolean} [enableDhcp] enable_dhcp query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpv6RaModeEnum} [ipv6RaMode] ipv6_ra_mode query parameter for /v2.0/subnets API
         * @param {SubnetsGetIpv6AddressModeEnum} [ipv6AddressMode] ipv6_address_mode query parameter for /v2.0/subnets API
         * @param {string | boolean} [shared] shared query parameter for /v2.0/subnets API
         * @param {string} [revisionNumber] revision_number query parameter for /v2.0/subnets API
         * @param {string | boolean} [routerexternal] router:external query parameter for /v2.0/subnets API
         * @param {Array<string>} [tags] tags query parameter for /v2.0/subnets API
         * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/subnets API
         * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/subnets API
         * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/subnets API
         * @param {string} [description] description query parameter for /v2.0/subnets API
         * @param {string | null} [segmentId] segment_id query parameter for /v2.0/subnets API
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsGet: function (id, name, ipVersion, networkId, subnetpoolId, cidr, gatewayIp, tenantId, enableDhcp, ipv6RaMode, ipv6AddressMode, shared, revisionNumber, routerexternal, tags, tagsAny, notTags, notTagsAny, description, segmentId, sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.subnetsGet(id, name, ipVersion, networkId, subnetpoolId, cidr, gatewayIp, tenantId, enableDhcp, ipv6RaMode, ipv6AddressMode, shared, revisionNumber, routerexternal, tags, tagsAny, notTags, notTagsAny, description, segmentId, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {SubnetsCreateRequest} [subnetsCreateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsPost: function (subnetsCreateRequest, options) {
            return localVarFp.subnetsPost(subnetsCreateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdDelete: function (subnetId, options) {
            return localVarFp.subnetsSubnetIdDelete(subnetId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdGet: function (subnetId, options) {
            return localVarFp.subnetsSubnetIdGet(subnetId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
         * @param {SubnetUpdateRequest} [subnetUpdateRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdPut: function (subnetId, subnetUpdateRequest, options) {
            return localVarFp.subnetsSubnetIdPut(subnetId, subnetUpdateRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsDelete: function (subnetId, options) {
            return localVarFp.subnetsSubnetIdTagsDelete(subnetId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {SubnetsSubnetIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.subnetsSubnetIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdDelete: function (subnetId, id, options) {
            return localVarFp.subnetsSubnetIdTagsIdDelete(subnetId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdGet: function (subnetId, id, options) {
            return localVarFp.subnetsSubnetIdTagsIdGet(subnetId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsIdPut: function (subnetId, id, options) {
            return localVarFp.subnetsSubnetIdTagsIdPut(subnetId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
         * @param {SubnetsTagsUpdateAllRequest} [subnetsTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        subnetsSubnetIdTagsPut: function (subnetId, subnetsTagsUpdateAllRequest, options) {
            return localVarFp.subnetsSubnetIdTagsPut(subnetId, subnetsTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SubnetsApiFactory = SubnetsApiFactory;
/**
 * SubnetsApi - object-oriented interface
 * @export
 * @class SubnetsApi
 * @extends {BaseAPI}
 */
var SubnetsApi = /** @class */ (function (_super) {
    __extends(SubnetsApi, _super);
    function SubnetsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} [id] id query parameter for /v2.0/subnets API
     * @param {string} [name] name query parameter for /v2.0/subnets API
     * @param {SubnetsGetIpVersionEnum} [ipVersion] ip_version query parameter for /v2.0/subnets API
     * @param {string} [networkId] network_id query parameter for /v2.0/subnets API
     * @param {string | null} [subnetpoolId] subnetpool_id query parameter for /v2.0/subnets API
     * @param {string | null} [cidr] cidr query parameter for /v2.0/subnets API
     * @param {string} [gatewayIp] gateway_ip query parameter for /v2.0/subnets API
     * @param {string} [tenantId] tenant_id query parameter for /v2.0/subnets API
     * @param {string | boolean} [enableDhcp] enable_dhcp query parameter for /v2.0/subnets API
     * @param {SubnetsGetIpv6RaModeEnum} [ipv6RaMode] ipv6_ra_mode query parameter for /v2.0/subnets API
     * @param {SubnetsGetIpv6AddressModeEnum} [ipv6AddressMode] ipv6_address_mode query parameter for /v2.0/subnets API
     * @param {string | boolean} [shared] shared query parameter for /v2.0/subnets API
     * @param {string} [revisionNumber] revision_number query parameter for /v2.0/subnets API
     * @param {string | boolean} [routerexternal] router:external query parameter for /v2.0/subnets API
     * @param {Array<string>} [tags] tags query parameter for /v2.0/subnets API
     * @param {Array<string>} [tagsAny] tags-any query parameter for /v2.0/subnets API
     * @param {Array<string>} [notTags] not-tags query parameter for /v2.0/subnets API
     * @param {Array<string>} [notTagsAny] not-tags-any query parameter for /v2.0/subnets API
     * @param {string} [description] description query parameter for /v2.0/subnets API
     * @param {string | null} [segmentId] segment_id query parameter for /v2.0/subnets API
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {SubnetsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsGet = function (id, name, ipVersion, networkId, subnetpoolId, cidr, gatewayIp, tenantId, enableDhcp, ipv6RaMode, ipv6AddressMode, shared, revisionNumber, routerexternal, tags, tagsAny, notTags, notTagsAny, description, segmentId, sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsGet(id, name, ipVersion, networkId, subnetpoolId, cidr, gatewayIp, tenantId, enableDhcp, ipv6RaMode, ipv6AddressMode, shared, revisionNumber, routerexternal, tags, tagsAny, notTags, notTagsAny, description, segmentId, sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {SubnetsCreateRequest} [subnetsCreateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsPost = function (subnetsCreateRequest, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsPost(subnetsCreateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdDelete = function (subnetId, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdDelete(subnetId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdGet = function (subnetId, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdGet(subnetId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id} API
     * @param {SubnetUpdateRequest} [subnetUpdateRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdPut = function (subnetId, subnetUpdateRequest, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdPut(subnetId, subnetUpdateRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdTagsDelete = function (subnetId, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdTagsDelete(subnetId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {SubnetsSubnetIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdTagsIdDelete = function (subnetId, id, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdTagsIdDelete(subnetId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdTagsIdGet = function (subnetId, id, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdTagsIdGet(subnetId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdTagsIdPut = function (subnetId, id, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdTagsIdPut(subnetId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} subnetId subnet_id parameter for /v2.0/subnets/{subnet_id}/tags/{id} API
     * @param {SubnetsTagsUpdateAllRequest} [subnetsTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubnetsApi
     */
    SubnetsApi.prototype.subnetsSubnetIdTagsPut = function (subnetId, subnetsTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.SubnetsApiFp)(this.configuration).subnetsSubnetIdTagsPut(subnetId, subnetsTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SubnetsApi;
}(base_1.BaseAPI));
exports.SubnetsApi = SubnetsApi;
/**
 * @export
 */
exports.SubnetsGetIpVersionEnum = {
    _4: '4',
    _6: '6'
};
/**
 * @export
 */
exports.SubnetsGetIpv6RaModeEnum = {
    Dhcpv6Stateful: 'dhcpv6-stateful',
    Dhcpv6Stateless: 'dhcpv6-stateless',
    Slaac: 'slaac'
};
/**
 * @export
 */
exports.SubnetsGetIpv6AddressModeEnum = {
    Dhcpv6Stateful: 'dhcpv6-stateful',
    Dhcpv6Stateless: 'dhcpv6-stateless',
    Slaac: 'slaac'
};
/**
 * @export
 */
exports.SubnetsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * @export
 */
exports.SubnetsSubnetIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
/**
 * TrunksApi - axios parameter creator
 * @export
 */
var TrunksApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsDelete: function (trunkId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trunkId_1], args_1, true), void 0, function (trunkId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trunkId' is not null or undefined
                            (0, common_1.assertParamExists)('trunksTrunkIdTagsDelete', 'trunkId', trunkId);
                            localVarPath = "/v2.0/trunks/{trunk_id}/tags"
                                .replace("{".concat("trunk_id", "}"), encodeURIComponent(String(trunkId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {TrunksTrunkIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsGet: function (sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([sortKey_1, sortDir_1, limit_1, marker_1, pageReverse_1], args_1, true), void 0, function (sortKey, sortDir, limit, marker, pageReverse, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v2.0/trunks/{trunk_id}/tags";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (sortKey !== undefined) {
                                localVarQueryParameter['sort_key'] = sortKey;
                            }
                            if (sortDir !== undefined) {
                                localVarQueryParameter['sort_dir'] = sortDir;
                            }
                            if (limit !== undefined) {
                                localVarQueryParameter['limit'] = limit;
                            }
                            if (marker !== undefined) {
                                localVarQueryParameter['marker'] = marker;
                            }
                            if (pageReverse !== undefined) {
                                localVarQueryParameter['page_reverse'] = pageReverse;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdDelete: function (trunkId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trunkId_1, id_1], args_1, true), void 0, function (trunkId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trunkId' is not null or undefined
                            (0, common_1.assertParamExists)('trunksTrunkIdTagsIdDelete', 'trunkId', trunkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('trunksTrunkIdTagsIdDelete', 'id', id);
                            localVarPath = "/v2.0/trunks/{trunk_id}/tags/{id}"
                                .replace("{".concat("trunk_id", "}"), encodeURIComponent(String(trunkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdGet: function (trunkId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trunkId_1, id_1], args_1, true), void 0, function (trunkId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trunkId' is not null or undefined
                            (0, common_1.assertParamExists)('trunksTrunkIdTagsIdGet', 'trunkId', trunkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('trunksTrunkIdTagsIdGet', 'id', id);
                            localVarPath = "/v2.0/trunks/{trunk_id}/tags/{id}"
                                .replace("{".concat("trunk_id", "}"), encodeURIComponent(String(trunkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdPut: function (trunkId_1, id_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trunkId_1, id_1], args_1, true), void 0, function (trunkId, id, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trunkId' is not null or undefined
                            (0, common_1.assertParamExists)('trunksTrunkIdTagsIdPut', 'trunkId', trunkId);
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('trunksTrunkIdTagsIdPut', 'id', id);
                            localVarPath = "/v2.0/trunks/{trunk_id}/tags/{id}"
                                .replace("{".concat("trunk_id", "}"), encodeURIComponent(String(trunkId)))
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {TrunksTagsUpdateAllRequest} [trunksTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsPut: function (trunkId_1, trunksTagsUpdateAllRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trunkId_1, trunksTagsUpdateAllRequest_1], args_1, true), void 0, function (trunkId, trunksTagsUpdateAllRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trunkId' is not null or undefined
                            (0, common_1.assertParamExists)('trunksTrunkIdTagsPut', 'trunkId', trunkId);
                            localVarPath = "/v2.0/trunks/{trunk_id}/tags"
                                .replace("{".concat("trunk_id", "}"), encodeURIComponent(String(trunkId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(trunksTagsUpdateAllRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TrunksApiAxiosParamCreator = TrunksApiAxiosParamCreator;
/**
 * TrunksApi - functional programming interface
 * @export
 */
var TrunksApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TrunksApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsDelete: function (trunkId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trunksTrunkIdTagsDelete(trunkId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TrunksApi.trunksTrunkIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {TrunksTrunkIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trunksTrunkIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TrunksApi.trunksTrunkIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdDelete: function (trunkId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trunksTrunkIdTagsIdDelete(trunkId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TrunksApi.trunksTrunkIdTagsIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdGet: function (trunkId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trunksTrunkIdTagsIdGet(trunkId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TrunksApi.trunksTrunkIdTagsIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdPut: function (trunkId, id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trunksTrunkIdTagsIdPut(trunkId, id, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TrunksApi.trunksTrunkIdTagsIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {TrunksTagsUpdateAllRequest} [trunksTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsPut: function (trunkId, trunksTagsUpdateAllRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trunksTrunkIdTagsPut(trunkId, trunksTagsUpdateAllRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['TrunksApi.trunksTrunkIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.TrunksApiFp = TrunksApiFp;
/**
 * TrunksApi - factory interface
 * @export
 */
var TrunksApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TrunksApiFp)(configuration);
    return {
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsDelete: function (trunkId, options) {
            return localVarFp.trunksTrunkIdTagsDelete(trunkId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
         * @param {TrunksTrunkIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
         * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
         * @param {boolean} [pageReverse] Reverse the page direction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsGet: function (sortKey, sortDir, limit, marker, pageReverse, options) {
            return localVarFp.trunksTrunkIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdDelete: function (trunkId, id, options) {
            return localVarFp.trunksTrunkIdTagsIdDelete(trunkId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdGet: function (trunkId, id, options) {
            return localVarFp.trunksTrunkIdTagsIdGet(trunkId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsIdPut: function (trunkId, id, options) {
            return localVarFp.trunksTrunkIdTagsIdPut(trunkId, id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
         * @param {TrunksTagsUpdateAllRequest} [trunksTagsUpdateAllRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trunksTrunkIdTagsPut: function (trunkId, trunksTagsUpdateAllRequest, options) {
            return localVarFp.trunksTrunkIdTagsPut(trunkId, trunksTagsUpdateAllRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TrunksApiFactory = TrunksApiFactory;
/**
 * TrunksApi - object-oriented interface
 * @export
 * @class TrunksApi
 * @extends {BaseAPI}
 */
var TrunksApi = /** @class */ (function (_super) {
    __extends(TrunksApi, _super);
    function TrunksApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrunksApi
     */
    TrunksApi.prototype.trunksTrunkIdTagsDelete = function (trunkId, options) {
        var _this = this;
        return (0, exports.TrunksApiFp)(this.configuration).trunksTrunkIdTagsDelete(trunkId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} [sortKey] Sort results by the attribute. This is an optional feature and may be silently ignored by the server.
     * @param {TrunksTrunkIdTagsGetSortDirEnum} [sortDir] Sort direction. This is an optional feature and may be silently ignored by the server.
     * @param {number} [limit] Requests a page size of items. Returns a number of items up to a limit value. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {string} [marker] The ID of the last-seen item. Use the limit parameter to make an initial limited request and use the ID of the last-seen item from the response as the marker parameter value in a subsequent limited request.
     * @param {boolean} [pageReverse] Reverse the page direction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrunksApi
     */
    TrunksApi.prototype.trunksTrunkIdTagsGet = function (sortKey, sortDir, limit, marker, pageReverse, options) {
        var _this = this;
        return (0, exports.TrunksApiFp)(this.configuration).trunksTrunkIdTagsGet(sortKey, sortDir, limit, marker, pageReverse, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrunksApi
     */
    TrunksApi.prototype.trunksTrunkIdTagsIdDelete = function (trunkId, id, options) {
        var _this = this;
        return (0, exports.TrunksApiFp)(this.configuration).trunksTrunkIdTagsIdDelete(trunkId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrunksApi
     */
    TrunksApi.prototype.trunksTrunkIdTagsIdGet = function (trunkId, id, options) {
        var _this = this;
        return (0, exports.TrunksApiFp)(this.configuration).trunksTrunkIdTagsIdGet(trunkId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
     * @param {string} id id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrunksApi
     */
    TrunksApi.prototype.trunksTrunkIdTagsIdPut = function (trunkId, id, options) {
        var _this = this;
        return (0, exports.TrunksApiFp)(this.configuration).trunksTrunkIdTagsIdPut(trunkId, id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {string} trunkId trunk_id parameter for /v2.0/trunks/{trunk_id}/tags/{id} API
     * @param {TrunksTagsUpdateAllRequest} [trunksTagsUpdateAllRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrunksApi
     */
    TrunksApi.prototype.trunksTrunkIdTagsPut = function (trunkId, trunksTagsUpdateAllRequest, options) {
        var _this = this;
        return (0, exports.TrunksApiFp)(this.configuration).trunksTrunkIdTagsPut(trunkId, trunksTagsUpdateAllRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TrunksApi;
}(base_1.BaseAPI));
exports.TrunksApi = TrunksApi;
/**
 * @export
 */
exports.TrunksTrunkIdTagsGetSortDirEnum = {
    Asc: 'asc',
    Desc: 'desc'
};
