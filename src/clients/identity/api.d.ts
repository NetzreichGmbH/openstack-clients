/**
 * OpenStack Identity API
 * Identity API provided by Keystone service
 *
 * The version of the OpenAPI document: 3.14
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 *
 * @export
 * @interface AuthCatalogGetResponse
 */
export interface AuthCatalogGetResponse {
    /**
     *
     * @type {Array<AuthCatalogGetResponseCatalogInner>}
     * @memberof AuthCatalogGetResponse
     */
    'catalog'?: Array<AuthCatalogGetResponseCatalogInner>;
}
/**
 *
 * @export
 * @interface AuthCatalogGetResponseCatalogInner
 */
export interface AuthCatalogGetResponseCatalogInner {
    /**
     *
     * @type {Array<AuthCatalogGetResponseCatalogInnerEndpointsInner>}
     * @memberof AuthCatalogGetResponseCatalogInner
     */
    'endpoints'?: Array<AuthCatalogGetResponseCatalogInnerEndpointsInner>;
    /**
     * The UUID of the service to which the endpoint belongs.
     * @type {string}
     * @memberof AuthCatalogGetResponseCatalogInner
     */
    'id'?: string;
    /**
     * The service type, which describes the API implemented by the service
     * @type {string}
     * @memberof AuthCatalogGetResponseCatalogInner
     */
    'type'?: string;
    /**
     * The service name.
     * @type {string}
     * @memberof AuthCatalogGetResponseCatalogInner
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface AuthCatalogGetResponseCatalogInnerEndpointsInner
 */
export interface AuthCatalogGetResponseCatalogInnerEndpointsInner {
    /**
     * The endpoint UUID
     * @type {string}
     * @memberof AuthCatalogGetResponseCatalogInnerEndpointsInner
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof AuthCatalogGetResponseCatalogInnerEndpointsInner
     */
    'interface'?: AuthCatalogGetResponseCatalogInnerEndpointsInnerInterfaceEnum;
    /**
     * Region name of the endpoint
     * @type {string}
     * @memberof AuthCatalogGetResponseCatalogInnerEndpointsInner
     */
    'region'?: string;
    /**
     * The endpoint url
     * @type {string}
     * @memberof AuthCatalogGetResponseCatalogInnerEndpointsInner
     */
    'url'?: string;
}
export declare const AuthCatalogGetResponseCatalogInnerEndpointsInnerInterfaceEnum: {
    readonly Public: "public";
    readonly Internal: "internal";
    readonly Admin: "admin";
};
export type AuthCatalogGetResponseCatalogInnerEndpointsInnerInterfaceEnum = typeof AuthCatalogGetResponseCatalogInnerEndpointsInnerInterfaceEnum[keyof typeof AuthCatalogGetResponseCatalogInnerEndpointsInnerInterfaceEnum];
/**
 *
 * @export
 * @interface AuthDomainsGetResponse
 */
export interface AuthDomainsGetResponse {
    /**
     *
     * @type {Array<AuthDomainsGetResponseDomainsInner>}
     * @memberof AuthDomainsGetResponse
     */
    'domains'?: Array<AuthDomainsGetResponseDomainsInner>;
    /**
     * Links to the resources in question. See [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html) for more info.
     * @type {Array<AuthProjectsGetResponseProjectsInnerLinksInner>}
     * @memberof AuthDomainsGetResponse
     */
    'links'?: Array<AuthProjectsGetResponseProjectsInnerLinksInner>;
}
/**
 *
 * @export
 * @interface AuthDomainsGetResponseDomainsInner
 */
export interface AuthDomainsGetResponseDomainsInner {
    /**
     * The ID of the domain.
     * @type {string}
     * @memberof AuthDomainsGetResponseDomainsInner
     */
    'id'?: string;
    /**
     * The name of the domain
     * @type {string}
     * @memberof AuthDomainsGetResponseDomainsInner
     */
    'name'?: string;
    /**
     * The description of the domain.
     * @type {string}
     * @memberof AuthDomainsGetResponseDomainsInner
     */
    'description'?: string;
    /**
     * If set to true, domain is enabled. If set to false, domain is disabled.
     * @type {boolean}
     * @memberof AuthDomainsGetResponseDomainsInner
     */
    'enabled'?: boolean;
    /**
     * Links to the resources in question. See [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html) for more info.
     * @type {Array<AuthProjectsGetResponseProjectsInnerLinksInner>}
     * @memberof AuthDomainsGetResponseDomainsInner
     */
    'links'?: Array<AuthProjectsGetResponseProjectsInnerLinksInner>;
}
/**
 *
 * @export
 * @interface AuthOsFederationIdentityProvidersProtocolsWebssoGetResponse
 */
export interface AuthOsFederationIdentityProvidersProtocolsWebssoGetResponse {
    /**
     *
     * @type {AuthOsFederationWebssoGetResponseToken}
     * @memberof AuthOsFederationIdentityProvidersProtocolsWebssoGetResponse
     */
    'token'?: AuthOsFederationWebssoGetResponseToken;
}
/**
 *
 * @export
 * @interface AuthOsFederationIdentityProvidersProtocolsWebssoPostResponse
 */
export interface AuthOsFederationIdentityProvidersProtocolsWebssoPostResponse {
    /**
     *
     * @type {AuthOsFederationWebssoGetResponseToken}
     * @memberof AuthOsFederationIdentityProvidersProtocolsWebssoPostResponse
     */
    'token'?: AuthOsFederationWebssoGetResponseToken;
}
/**
 *
 * @export
 * @interface AuthOsFederationSaml2EcpPostRequest
 */
export interface AuthOsFederationSaml2EcpPostRequest {
    /**
     *
     * @type {AuthTokensPostRequestAuth}
     * @memberof AuthOsFederationSaml2EcpPostRequest
     */
    'auth'?: AuthTokensPostRequestAuth;
}
/**
 *
 * @export
 * @interface AuthOsFederationSaml2PostRequest
 */
export interface AuthOsFederationSaml2PostRequest {
    /**
     *
     * @type {AuthTokensPostRequestAuth}
     * @memberof AuthOsFederationSaml2PostRequest
     */
    'auth'?: AuthTokensPostRequestAuth;
}
/**
 *
 * @export
 * @interface AuthOsFederationWebssoGetResponse
 */
export interface AuthOsFederationWebssoGetResponse {
    /**
     *
     * @type {AuthOsFederationWebssoGetResponseToken}
     * @memberof AuthOsFederationWebssoGetResponse
     */
    'token'?: AuthOsFederationWebssoGetResponseToken;
}
/**
 *
 * @export
 * @interface AuthOsFederationWebssoGetResponseToken
 */
export interface AuthOsFederationWebssoGetResponseToken {
    /**
     * A list of one or two audit IDs. An audit ID is a unique, randomly generated, URL-safe string that you can use to track a token. The first audit ID is the current audit ID for the token. The second audit ID is present for only re-scoped tokens and is the audit ID from the token before it was re-scoped. A re- scoped token is one that was exchanged for another token of the same or different scope. You can use these audit IDs to track the use of a token or chain of tokens across multiple requests and endpoints without exposing the token ID to non-privileged users.
     * @type {Array<string>}
     * @memberof AuthOsFederationWebssoGetResponseToken
     */
    'audit_ids'?: Array<string>;
    /**
     * A catalog object.
     * @type {Array<AuthCatalogGetResponseCatalogInner>}
     * @memberof AuthOsFederationWebssoGetResponseToken
     */
    'catalog'?: Array<AuthCatalogGetResponseCatalogInner>;
    /**
     * The date and time when the token expires.
     * @type {string}
     * @memberof AuthOsFederationWebssoGetResponseToken
     */
    'expires_at'?: string;
    /**
     * The date and time when the token was issued.
     * @type {string}
     * @memberof AuthOsFederationWebssoGetResponseToken
     */
    'issues_at'?: string;
    /**
     * The authentication methods, which are commonly password, token, or other methods. Indicates the accumulated set of authentication methods that were used to obtain the token. For example, if the token was obtained by password authentication, it contains password. Later, if the token is exchanged by using the token authentication method one or more times, the subsequently created tokens contain both password and token in their methods attribute. Unlike multi-factor authentication, the methods attribute merely indicates the methods that were used to authenticate the user in exchange for a token. The client is responsible for determining the total number of authentication factors.
     * @type {Array<string>}
     * @memberof AuthOsFederationWebssoGetResponseToken
     */
    'methods'?: Array<string>;
    /**
     *
     * @type {AuthTokensGetResponseTokenUser}
     * @memberof AuthOsFederationWebssoGetResponseToken
     */
    'user'?: AuthTokensGetResponseTokenUser;
}
/**
 *
 * @export
 * @interface AuthOsFederationWebssoPostResponse
 */
export interface AuthOsFederationWebssoPostResponse {
    /**
     *
     * @type {AuthOsFederationWebssoGetResponseToken}
     * @memberof AuthOsFederationWebssoPostResponse
     */
    'token'?: AuthOsFederationWebssoGetResponseToken;
}
/**
 *
 * @export
 * @interface AuthProjectsGetResponse
 */
export interface AuthProjectsGetResponse {
    /**
     *
     * @type {Array<AuthProjectsGetResponseProjectsInner>}
     * @memberof AuthProjectsGetResponse
     */
    'projects'?: Array<AuthProjectsGetResponseProjectsInner>;
    /**
     * Links to the resources in question. See [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html) for more info.
     * @type {Array<AuthProjectsGetResponseProjectsInnerLinksInner>}
     * @memberof AuthProjectsGetResponse
     */
    'links'?: Array<AuthProjectsGetResponseProjectsInnerLinksInner>;
}
/**
 *
 * @export
 * @interface AuthProjectsGetResponseProjectsInner
 */
export interface AuthProjectsGetResponseProjectsInner {
    /**
     * The ID of the domain for the project.
     * @type {string}
     * @memberof AuthProjectsGetResponseProjectsInner
     */
    'domain_id'?: string;
    /**
     * The ID of the project.
     * @type {string}
     * @memberof AuthProjectsGetResponseProjectsInner
     */
    'id'?: string;
    /**
     * The name of the project
     * @type {string}
     * @memberof AuthProjectsGetResponseProjectsInner
     */
    'name'?: string;
    /**
     * If set to true, project is enabled. If set to false, project is disabled.
     * @type {boolean}
     * @memberof AuthProjectsGetResponseProjectsInner
     */
    'enabled'?: boolean;
    /**
     * Links to the resources in question. See [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html) for more info.
     * @type {Array<AuthProjectsGetResponseProjectsInnerLinksInner>}
     * @memberof AuthProjectsGetResponseProjectsInner
     */
    'links'?: Array<AuthProjectsGetResponseProjectsInnerLinksInner>;
}
/**
 * Links to the resources in question. See [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html) for more info.
 * @export
 * @interface AuthProjectsGetResponseProjectsInnerLinksInner
 */
export interface AuthProjectsGetResponseProjectsInnerLinksInner {
    /**
     *
     * @type {string}
     * @memberof AuthProjectsGetResponseProjectsInnerLinksInner
     */
    'href'?: string;
    /**
     *
     * @type {string}
     * @memberof AuthProjectsGetResponseProjectsInnerLinksInner
     */
    'rel'?: string;
}
/**
 *
 * @export
 * @interface AuthReceiptSchema
 */
export interface AuthReceiptSchema {
    /**
     *
     * @type {AuthReceiptSchemaReceipt}
     * @memberof AuthReceiptSchema
     */
    'receipt'?: AuthReceiptSchemaReceipt;
    /**
     * A list of authentication rules that may be used with the auth receipt to complete the authentication process.
     * @type {Array<string>}
     * @memberof AuthReceiptSchema
     */
    'required_auth_methods'?: Array<string>;
}
/**
 *
 * @export
 * @interface AuthReceiptSchemaReceipt
 */
export interface AuthReceiptSchemaReceipt {
    /**
     * The date and time when the token expires.
     * @type {string}
     * @memberof AuthReceiptSchemaReceipt
     */
    'expires_at'?: string;
    /**
     * The date and time when the token was issued.
     * @type {string}
     * @memberof AuthReceiptSchemaReceipt
     */
    'issues_at'?: string;
    /**
     * The authentication methods, which are commonly password, token, or other methods. Indicates the accumulated set of authentication methods that were used to obtain the token. For example, if the token was obtained by password authentication, it contains password. Later, if the token is exchanged by using the token authentication method one or more times, the subsequently created tokens contain both password and token in their methods attribute. Unlike multi-factor authentication, the methods attribute merely indicates the methods that were used to authenticate the user in exchange for a token. The client is responsible for determining the total number of authentication factors.
     * @type {Array<string>}
     * @memberof AuthReceiptSchemaReceipt
     */
    'methods'?: Array<string>;
    /**
     *
     * @type {AuthTokensGetResponseTokenUser}
     * @memberof AuthReceiptSchemaReceipt
     */
    'user'?: AuthTokensGetResponseTokenUser;
}
/**
 *
 * @export
 * @interface AuthSystemGetResponse
 */
export interface AuthSystemGetResponse {
    /**
     * A list of systems to access based on role assignments.
     * @type {Array<{ [key: string]: boolean; }>}
     * @memberof AuthSystemGetResponse
     */
    'system'?: Array<{
        [key: string]: boolean;
    }>;
}
/**
 *
 * @export
 * @interface AuthTokensGetResponse
 */
export interface AuthTokensGetResponse {
    /**
     *
     * @type {AuthTokensGetResponseToken}
     * @memberof AuthTokensGetResponse
     */
    'token'?: AuthTokensGetResponseToken;
}
/**
 *
 * @export
 * @interface AuthTokensGetResponseToken
 */
export interface AuthTokensGetResponseToken {
    /**
     * A list of one or two audit IDs. An audit ID is a unique, randomly generated, URL-safe string that you can use to track a token. The first audit ID is the current audit ID for the token. The second audit ID is present for only re-scoped tokens and is the audit ID from the token before it was re-scoped. A re- scoped token is one that was exchanged for another token of the same or different scope. You can use these audit IDs to track the use of a token or chain of tokens across multiple requests and endpoints without exposing the token ID to non-privileged users.
     * @type {Array<string>}
     * @memberof AuthTokensGetResponseToken
     */
    'audit_ids'?: Array<string>;
    /**
     * A catalog object.
     * @type {Array<AuthCatalogGetResponseCatalogInner>}
     * @memberof AuthTokensGetResponseToken
     */
    'catalog'?: Array<AuthCatalogGetResponseCatalogInner>;
    /**
     * The date and time when the token expires.
     * @type {string}
     * @memberof AuthTokensGetResponseToken
     */
    'expires_at'?: string;
    /**
     * The date and time when the token was issued.
     * @type {string}
     * @memberof AuthTokensGetResponseToken
     */
    'issues_at'?: string;
    /**
     * The authentication methods, which are commonly password, token, or other methods. Indicates the accumulated set of authentication methods that were used to obtain the token. For example, if the token was obtained by password authentication, it contains password. Later, if the token is exchanged by using the token authentication method one or more times, the subsequently created tokens contain both password and token in their methods attribute. Unlike multi-factor authentication, the methods attribute merely indicates the methods that were used to authenticate the user in exchange for a token. The client is responsible for determining the total number of authentication factors.
     * @type {Array<string>}
     * @memberof AuthTokensGetResponseToken
     */
    'methods'?: Array<string>;
    /**
     *
     * @type {AuthTokensGetResponseTokenUser}
     * @memberof AuthTokensGetResponseToken
     */
    'user'?: AuthTokensGetResponseTokenUser;
    /**
     *
     * @type {boolean}
     * @memberof AuthTokensGetResponseToken
     */
    'is_domain'?: boolean;
    /**
     *
     * @type {AuthTokensGetResponseTokenDomain}
     * @memberof AuthTokensGetResponseToken
     */
    'domain'?: AuthTokensGetResponseTokenDomain;
    /**
     *
     * @type {AuthTokensGetResponseTokenProject}
     * @memberof AuthTokensGetResponseToken
     */
    'project'?: AuthTokensGetResponseTokenProject;
    /**
     * A list of role objects
     * @type {Array<AuthTokensGetResponseTokenRolesInner>}
     * @memberof AuthTokensGetResponseToken
     */
    'roles'?: Array<AuthTokensGetResponseTokenRolesInner>;
    /**
     * A system object containing information about which parts of the system the token is scoped to. If the token is scoped to the entire deployment system, the system object will consist of {\"all\": true}. This is only included in tokens that are scoped to the system.
     * @type {{ [key: string]: boolean; }}
     * @memberof AuthTokensGetResponseToken
     */
    'system'?: {
        [key: string]: boolean;
    };
}
/**
 * A domain object including the id and name representing the domain the token is scoped to. This is only included in tokens that are scoped to a domain.
 * @export
 * @interface AuthTokensGetResponseTokenDomain
 */
export interface AuthTokensGetResponseTokenDomain {
    /**
     * A domain UUID
     * @type {string}
     * @memberof AuthTokensGetResponseTokenDomain
     */
    'id'?: string;
    /**
     * A domain name
     * @type {string}
     * @memberof AuthTokensGetResponseTokenDomain
     */
    'name'?: string;
}
/**
 * A project object including the id, name and domain object representing the project the token is scoped to. This is only included in tokens that are scoped to a project.
 * @export
 * @interface AuthTokensGetResponseTokenProject
 */
export interface AuthTokensGetResponseTokenProject {
    /**
     * A user domain UUID
     * @type {string}
     * @memberof AuthTokensGetResponseTokenProject
     */
    'id'?: string;
    /**
     * A user domain name
     * @type {string}
     * @memberof AuthTokensGetResponseTokenProject
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface AuthTokensGetResponseTokenRolesInner
 */
export interface AuthTokensGetResponseTokenRolesInner {
    /**
     * A role UUID
     * @type {string}
     * @memberof AuthTokensGetResponseTokenRolesInner
     */
    'id'?: string;
    /**
     * A role name
     * @type {string}
     * @memberof AuthTokensGetResponseTokenRolesInner
     */
    'name'?: string;
}
/**
 * A user object
 * @export
 * @interface AuthTokensGetResponseTokenUser
 */
export interface AuthTokensGetResponseTokenUser {
    /**
     * A user UUID
     * @type {string}
     * @memberof AuthTokensGetResponseTokenUser
     */
    'id'?: string;
    /**
     * A user name
     * @type {string}
     * @memberof AuthTokensGetResponseTokenUser
     */
    'name'?: string;
    /**
     *
     * @type {AuthTokensGetResponseTokenUserDomain}
     * @memberof AuthTokensGetResponseTokenUser
     */
    'domain'?: AuthTokensGetResponseTokenUserDomain;
    /**
     * DateTime of the user password expiration
     * @type {string}
     * @memberof AuthTokensGetResponseTokenUser
     */
    'password_expires_at'?: string;
    /**
     *
     * @type {object}
     * @memberof AuthTokensGetResponseTokenUser
     */
    'OS-FEDERATION'?: object;
}
/**
 *
 * @export
 * @interface AuthTokensGetResponseTokenUserDomain
 */
export interface AuthTokensGetResponseTokenUserDomain {
    /**
     * A user domain UUID
     * @type {string}
     * @memberof AuthTokensGetResponseTokenUserDomain
     */
    'id'?: string;
    /**
     * A user domain name
     * @type {string}
     * @memberof AuthTokensGetResponseTokenUserDomain
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface AuthTokensPostRequest
 */
export interface AuthTokensPostRequest {
    /**
     *
     * @type {AuthTokensPostRequestAuth}
     * @memberof AuthTokensPostRequest
     */
    'auth'?: AuthTokensPostRequestAuth;
}
/**
 * An auth object.
 * @export
 * @interface AuthTokensPostRequestAuth
 */
export interface AuthTokensPostRequestAuth {
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentity}
     * @memberof AuthTokensPostRequestAuth
     */
    'identity': AuthTokensPostRequestAuthIdentity;
    /**
     *
     * @type {AuthTokensPostRequestAuthScope}
     * @memberof AuthTokensPostRequestAuth
     */
    'scope'?: AuthTokensPostRequestAuthScope;
}
/**
 * An identity object.
 * @export
 * @interface AuthTokensPostRequestAuthIdentity
 */
export interface AuthTokensPostRequestAuthIdentity {
    /**
     * The authentication method.
     * @type {Array<string>}
     * @memberof AuthTokensPostRequestAuthIdentity
     */
    'methods': Array<AuthTokensPostRequestAuthIdentityMethodsEnum>;
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityPassword}
     * @memberof AuthTokensPostRequestAuthIdentity
     */
    'password'?: AuthTokensPostRequestAuthIdentityPassword;
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityToken}
     * @memberof AuthTokensPostRequestAuthIdentity
     */
    'token'?: AuthTokensPostRequestAuthIdentityToken;
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityTotp}
     * @memberof AuthTokensPostRequestAuthIdentity
     */
    'totp'?: AuthTokensPostRequestAuthIdentityTotp;
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityApplicationCredential}
     * @memberof AuthTokensPostRequestAuthIdentity
     */
    'application_credential'?: AuthTokensPostRequestAuthIdentityApplicationCredential;
}
export declare const AuthTokensPostRequestAuthIdentityMethodsEnum: {
    readonly Password: "password";
    readonly Token: "token";
    readonly Totp: "totp";
    readonly ApplicationCredential: "application_credential";
};
export type AuthTokensPostRequestAuthIdentityMethodsEnum = typeof AuthTokensPostRequestAuthIdentityMethodsEnum[keyof typeof AuthTokensPostRequestAuthIdentityMethodsEnum];
/**
 * An application credential object.
 * @export
 * @interface AuthTokensPostRequestAuthIdentityApplicationCredential
 */
export interface AuthTokensPostRequestAuthIdentityApplicationCredential {
    /**
     *
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityApplicationCredential
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityApplicationCredential
     */
    'name'?: string;
    /**
     * The secret for authenticating the application credential.
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityApplicationCredential
     */
    'secret': string;
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityApplicationCredentialUser}
     * @memberof AuthTokensPostRequestAuthIdentityApplicationCredential
     */
    'user'?: AuthTokensPostRequestAuthIdentityApplicationCredentialUser;
}
/**
 * A user object, required if an application credential is identified by name and not ID.
 * @export
 * @interface AuthTokensPostRequestAuthIdentityApplicationCredentialUser
 */
export interface AuthTokensPostRequestAuthIdentityApplicationCredentialUser {
    /**
     * The user ID
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityApplicationCredentialUser
     */
    'id'?: string;
    /**
     * The user name
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityApplicationCredentialUser
     */
    'name'?: string;
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityPasswordUserDomain}
     * @memberof AuthTokensPostRequestAuthIdentityApplicationCredentialUser
     */
    'domain'?: AuthTokensPostRequestAuthIdentityPasswordUserDomain;
}
/**
 * The password object, contains the authentication information.
 * @export
 * @interface AuthTokensPostRequestAuthIdentityPassword
 */
export interface AuthTokensPostRequestAuthIdentityPassword {
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityPasswordUser}
     * @memberof AuthTokensPostRequestAuthIdentityPassword
     */
    'user'?: AuthTokensPostRequestAuthIdentityPasswordUser;
}
/**
 * A `user` object
 * @export
 * @interface AuthTokensPostRequestAuthIdentityPasswordUser
 */
export interface AuthTokensPostRequestAuthIdentityPasswordUser {
    /**
     * User ID
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityPasswordUser
     */
    'id'?: string;
    /**
     * User Name
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityPasswordUser
     */
    'name'?: string;
    /**
     * User Password
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityPasswordUser
     */
    'password'?: string;
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityPasswordUserDomain}
     * @memberof AuthTokensPostRequestAuthIdentityPasswordUser
     */
    'domain'?: AuthTokensPostRequestAuthIdentityPasswordUserDomain;
}
/**
 * User Domain object
 * @export
 * @interface AuthTokensPostRequestAuthIdentityPasswordUserDomain
 */
export interface AuthTokensPostRequestAuthIdentityPasswordUserDomain {
    /**
     * User Domain ID
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityPasswordUserDomain
     */
    'id'?: string;
    /**
     * User Domain Name
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityPasswordUserDomain
     */
    'name'?: string;
}
/**
 * A `token` object
 * @export
 * @interface AuthTokensPostRequestAuthIdentityToken
 */
export interface AuthTokensPostRequestAuthIdentityToken {
    /**
     * Authorization Token value
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityToken
     */
    'id': string;
}
/**
 * Multi Factor Authentication information
 * @export
 * @interface AuthTokensPostRequestAuthIdentityTotp
 */
export interface AuthTokensPostRequestAuthIdentityTotp {
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityTotpUser}
     * @memberof AuthTokensPostRequestAuthIdentityTotp
     */
    'user': AuthTokensPostRequestAuthIdentityTotpUser;
}
/**
 *
 * @export
 * @interface AuthTokensPostRequestAuthIdentityTotpUser
 */
export interface AuthTokensPostRequestAuthIdentityTotpUser {
    /**
     * The user ID
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityTotpUser
     */
    'id'?: string;
    /**
     * The user name
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityTotpUser
     */
    'name'?: string;
    /**
     *
     * @type {AuthTokensPostRequestAuthIdentityPasswordUserDomain}
     * @memberof AuthTokensPostRequestAuthIdentityTotpUser
     */
    'domain'?: AuthTokensPostRequestAuthIdentityPasswordUserDomain;
    /**
     * MFA passcode
     * @type {string}
     * @memberof AuthTokensPostRequestAuthIdentityTotpUser
     */
    'passcode': string;
}
/**
 * The authorization scope, including the system (Since v3.10), a project, or a domain (Since v3.4). If multiple scopes are specified in the same request (e.g. project and domain or domain and system) an HTTP 400 Bad Request will be returned, as a token cannot be simultaneously scoped to multiple authorization targets. An ID is sufficient to uniquely identify a project but if a project is specified by name, then the domain of the project must also be specified in order to uniquely identify the project by name. A domain scope may be specified by either the domain’s ID or name with equivalent results.
 * @export
 * @interface AuthTokensPostRequestAuthScope
 */
export interface AuthTokensPostRequestAuthScope {
    /**
     *
     * @type {AuthTokensPostRequestAuthScopeProject}
     * @memberof AuthTokensPostRequestAuthScope
     */
    'project'?: AuthTokensPostRequestAuthScopeProject;
    /**
     *
     * @type {AuthTokensPostRequestAuthScopeDomain}
     * @memberof AuthTokensPostRequestAuthScope
     */
    'domain'?: AuthTokensPostRequestAuthScopeDomain;
    /**
     *
     * @type {AuthTokensPostRequestAuthScopeOSTRUSTTrust}
     * @memberof AuthTokensPostRequestAuthScope
     */
    'OS-TRUST:trust'?: AuthTokensPostRequestAuthScopeOSTRUSTTrust;
    /**
     *
     * @type {AuthTokensPostRequestAuthScopeSystem}
     * @memberof AuthTokensPostRequestAuthScope
     */
    'system'?: AuthTokensPostRequestAuthScopeSystem;
}
/**
 *
 * @export
 * @interface AuthTokensPostRequestAuthScopeDomain
 */
export interface AuthTokensPostRequestAuthScopeDomain {
    /**
     * Domain id
     * @type {string}
     * @memberof AuthTokensPostRequestAuthScopeDomain
     */
    'id'?: string;
    /**
     * Domain name
     * @type {string}
     * @memberof AuthTokensPostRequestAuthScopeDomain
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface AuthTokensPostRequestAuthScopeOSTRUSTTrust
 */
export interface AuthTokensPostRequestAuthScopeOSTRUSTTrust {
    /**
     *
     * @type {string}
     * @memberof AuthTokensPostRequestAuthScopeOSTRUSTTrust
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface AuthTokensPostRequestAuthScopeProject
 */
export interface AuthTokensPostRequestAuthScopeProject {
    /**
     * Project Name
     * @type {string}
     * @memberof AuthTokensPostRequestAuthScopeProject
     */
    'name'?: string;
    /**
     * Project Id
     * @type {string}
     * @memberof AuthTokensPostRequestAuthScopeProject
     */
    'id'?: string;
    /**
     *
     * @type {AuthTokensPostRequestAuthScopeProjectDomain}
     * @memberof AuthTokensPostRequestAuthScopeProject
     */
    'domain'?: AuthTokensPostRequestAuthScopeProjectDomain;
}
/**
 *
 * @export
 * @interface AuthTokensPostRequestAuthScopeProjectDomain
 */
export interface AuthTokensPostRequestAuthScopeProjectDomain {
    /**
     * Project domain Id
     * @type {string}
     * @memberof AuthTokensPostRequestAuthScopeProjectDomain
     */
    'id'?: string;
    /**
     * Project domain Name
     * @type {string}
     * @memberof AuthTokensPostRequestAuthScopeProjectDomain
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface AuthTokensPostRequestAuthScopeSystem
 */
export interface AuthTokensPostRequestAuthScopeSystem {
    /**
     *
     * @type {boolean}
     * @memberof AuthTokensPostRequestAuthScopeSystem
     */
    'all'?: boolean;
}
/**
 *
 * @export
 * @interface AuthTokensPostResponse
 */
export interface AuthTokensPostResponse {
    /**
     *
     * @type {AuthTokensGetResponseToken}
     * @memberof AuthTokensPostResponse
     */
    'token'?: AuthTokensGetResponseToken;
}
/**
 *
 * @export
 * @interface Domain
 */
export interface Domain {
    /**
     *
     * @type {DomainDomain}
     * @memberof Domain
     */
    'domain'?: DomainDomain;
}
/**
 *
 * @export
 * @interface DomainConfig
 */
export interface DomainConfig {
    /**
     * A config object.
     * @type {{ [key: string]: { [key: string]: any; }; }}
     * @memberof DomainConfig
     */
    'config'?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
/**
 *
 * @export
 * @interface DomainConfigGroup
 */
export interface DomainConfigGroup {
    /**
     * A config object.
     * @type {{ [key: string]: { [key: string]: any; }; }}
     * @memberof DomainConfigGroup
     */
    'config'?: {
        [key: string]: {
            [key: string]: any;
        };
    };
}
/**
 *
 * @export
 * @interface DomainConfigGroupOption
 */
export interface DomainConfigGroupOption {
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof DomainConfigGroupOption
     */
    'config'?: {
        [key: string]: any;
    };
}
/**
 * A domain object
 * @export
 * @interface DomainDomain
 */
export interface DomainDomain {
    /**
     *
     * @type {string}
     * @memberof DomainDomain
     */
    'id'?: string;
    /**
     * The name of the domain.
     * @type {string}
     * @memberof DomainDomain
     */
    'name'?: string;
    /**
     * The description of the domain.
     * @type {string}
     * @memberof DomainDomain
     */
    'description'?: string;
    /**
     * If set to true, domain is enabled. If set to false, domain is disabled.
     * @type {boolean}
     * @memberof DomainDomain
     */
    'enabled'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof DomainDomain
     */
    'tags'?: Array<string>;
    /**
     * The resource options for the domain. Available resource options are immutable.
     * @type {object}
     * @memberof DomainDomain
     */
    'options'?: object;
}
/**
 *
 * @export
 * @interface DomainsGetResponse
 */
export interface DomainsGetResponse {
    /**
     *
     * @type {Array<DomainDomain>}
     * @memberof DomainsGetResponse
     */
    'domains'?: Array<DomainDomain>;
}
/**
 *
 * @export
 * @interface Endpoint
 */
export interface Endpoint {
    /**
     *
     * @type {EndpointEndpoint}
     * @memberof Endpoint
     */
    'endpoint'?: EndpointEndpoint;
}
/**
 *
 * @export
 * @interface EndpointEndpoint
 */
export interface EndpointEndpoint {
    /**
     * Defines whether the service and its endpoints appear in the service catalog.
     * @type {boolean}
     * @memberof EndpointEndpoint
     */
    'enabled'?: boolean;
    /**
     * The UUID of the service to which the endpoint belongs.
     * @type {string}
     * @memberof EndpointEndpoint
     */
    'id'?: string;
    /**
     * The interface type, which describes the visibility of the  Value is: - public. Visible by end users on a publicly available network interface. - internal. Visible by end users on an unmetered internal network interface. - admin. Visible by administrative users on a secure network interface.
     * @type {string}
     * @memberof EndpointEndpoint
     */
    'interface'?: EndpointEndpointInterfaceEnum;
    /**
     * The geographic location of the service endpoint.
     * @type {string}
     * @memberof EndpointEndpoint
     */
    'region'?: string;
    /**
     * The geographic location of the service
     * @type {string}
     * @memberof EndpointEndpoint
     */
    'region_id'?: string;
    /**
     * The UUID of the service to which the endpoint belongs.
     * @type {string}
     * @memberof EndpointEndpoint
     */
    'service_id'?: string;
    /**
     * The endpoint URL.
     * @type {string}
     * @memberof EndpointEndpoint
     */
    'url'?: string;
}
export declare const EndpointEndpointInterfaceEnum: {
    readonly Internal: "internal";
    readonly Admin: "admin";
    readonly Public: "public";
};
export type EndpointEndpointInterfaceEnum = typeof EndpointEndpointInterfaceEnum[keyof typeof EndpointEndpointInterfaceEnum];
/**
 *
 * @export
 * @interface EndpointsGetResponse
 */
export interface EndpointsGetResponse {
    /**
     *
     * @type {Array<EndpointEndpoint>}
     * @memberof EndpointsGetResponse
     */
    'endpoints'?: Array<EndpointEndpoint>;
}
/**
 *
 * @export
 * @interface Group
 */
export interface Group {
    /**
     *
     * @type {GroupGroup}
     * @memberof Group
     */
    'group'?: GroupGroup;
}
/**
 *
 * @export
 * @interface GroupGroup
 */
export interface GroupGroup {
    /**
     *
     * @type {string}
     * @memberof GroupGroup
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupGroup
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GroupGroup
     */
    'domain_id'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupGroup
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface GroupsGetResponse
 */
export interface GroupsGetResponse {
    /**
     *
     * @type {Array<GroupGroup>}
     * @memberof GroupsGetResponse
     */
    'groups'?: Array<GroupGroup>;
}
/**
 *
 * @export
 * @interface GroupsUsersGetResponse
 */
export interface GroupsUsersGetResponse {
    /**
     *
     * @type {Array<GroupsUsersGetResponseUsersInner>}
     * @memberof GroupsUsersGetResponse
     */
    'users'?: Array<GroupsUsersGetResponseUsersInner>;
}
/**
 *
 * @export
 * @interface GroupsUsersGetResponseUsersInner
 */
export interface GroupsUsersGetResponseUsersInner {
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'default_project_id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'domain_id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'enabled'?: GroupsUsersGetResponseUsersInnerEnabledEnum;
    /**
     *
     * @type {Array<GroupsUsersGetResponseUsersInnerFederatedInner>}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'federated'?: Array<GroupsUsersGetResponseUsersInnerFederatedInner>;
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'password'?: string | null;
    /**
     *
     * @type {GroupsUsersGetResponseUsersInnerOptions}
     * @memberof GroupsUsersGetResponseUsersInner
     */
    'options'?: GroupsUsersGetResponseUsersInnerOptions;
}
export declare const GroupsUsersGetResponseUsersInnerEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type GroupsUsersGetResponseUsersInnerEnabledEnum = typeof GroupsUsersGetResponseUsersInnerEnabledEnum[keyof typeof GroupsUsersGetResponseUsersInnerEnabledEnum];
/**
 *
 * @export
 * @interface GroupsUsersGetResponseUsersInnerFederatedInner
 */
export interface GroupsUsersGetResponseUsersInnerFederatedInner {
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInnerFederatedInner
     */
    'idp_id': string;
    /**
     *
     * @type {Array<GroupsUsersGetResponseUsersInnerFederatedInnerProtocolsInner>}
     * @memberof GroupsUsersGetResponseUsersInnerFederatedInner
     */
    'protocols': Array<GroupsUsersGetResponseUsersInnerFederatedInnerProtocolsInner>;
}
/**
 *
 * @export
 * @interface GroupsUsersGetResponseUsersInnerFederatedInnerProtocolsInner
 */
export interface GroupsUsersGetResponseUsersInnerFederatedInnerProtocolsInner {
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInnerFederatedInnerProtocolsInner
     */
    'protocol_id': string;
    /**
     *
     * @type {string}
     * @memberof GroupsUsersGetResponseUsersInnerFederatedInnerProtocolsInner
     */
    'unique_id': string;
}
/**
 *
 * @export
 * @interface GroupsUsersGetResponseUsersInnerOptions
 */
export interface GroupsUsersGetResponseUsersInnerOptions {
    [key: string]: any;
    /**
     *
     * @type {boolean}
     * @memberof GroupsUsersGetResponseUsersInnerOptions
     */
    'ignore_change_password_upon_first_use'?: GroupsUsersGetResponseUsersInnerOptionsIgnoreChangePasswordUponFirstUseEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof GroupsUsersGetResponseUsersInnerOptions
     */
    'ignore_password_expiry'?: GroupsUsersGetResponseUsersInnerOptionsIgnorePasswordExpiryEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof GroupsUsersGetResponseUsersInnerOptions
     */
    'ignore_lockout_failure_attempts'?: GroupsUsersGetResponseUsersInnerOptionsIgnoreLockoutFailureAttemptsEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof GroupsUsersGetResponseUsersInnerOptions
     */
    'lock_password'?: GroupsUsersGetResponseUsersInnerOptionsLockPasswordEnum | null;
    /**
     *
     * @type {boolean}
     * @memberof GroupsUsersGetResponseUsersInnerOptions
     */
    'ignore_user_inactivity'?: GroupsUsersGetResponseUsersInnerOptionsIgnoreUserInactivityEnum | null;
    /**
     *
     * @type {Array<Array<string>>}
     * @memberof GroupsUsersGetResponseUsersInnerOptions
     */
    'multi_factor_auth_rules'?: Array<Array<string>>;
    /**
     *
     * @type {boolean}
     * @memberof GroupsUsersGetResponseUsersInnerOptions
     */
    'multi_factor_auth_enabled'?: GroupsUsersGetResponseUsersInnerOptionsMultiFactorAuthEnabledEnum | null;
}
export declare const GroupsUsersGetResponseUsersInnerOptionsIgnoreChangePasswordUponFirstUseEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type GroupsUsersGetResponseUsersInnerOptionsIgnoreChangePasswordUponFirstUseEnum = typeof GroupsUsersGetResponseUsersInnerOptionsIgnoreChangePasswordUponFirstUseEnum[keyof typeof GroupsUsersGetResponseUsersInnerOptionsIgnoreChangePasswordUponFirstUseEnum];
export declare const GroupsUsersGetResponseUsersInnerOptionsIgnorePasswordExpiryEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type GroupsUsersGetResponseUsersInnerOptionsIgnorePasswordExpiryEnum = typeof GroupsUsersGetResponseUsersInnerOptionsIgnorePasswordExpiryEnum[keyof typeof GroupsUsersGetResponseUsersInnerOptionsIgnorePasswordExpiryEnum];
export declare const GroupsUsersGetResponseUsersInnerOptionsIgnoreLockoutFailureAttemptsEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type GroupsUsersGetResponseUsersInnerOptionsIgnoreLockoutFailureAttemptsEnum = typeof GroupsUsersGetResponseUsersInnerOptionsIgnoreLockoutFailureAttemptsEnum[keyof typeof GroupsUsersGetResponseUsersInnerOptionsIgnoreLockoutFailureAttemptsEnum];
export declare const GroupsUsersGetResponseUsersInnerOptionsLockPasswordEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type GroupsUsersGetResponseUsersInnerOptionsLockPasswordEnum = typeof GroupsUsersGetResponseUsersInnerOptionsLockPasswordEnum[keyof typeof GroupsUsersGetResponseUsersInnerOptionsLockPasswordEnum];
export declare const GroupsUsersGetResponseUsersInnerOptionsIgnoreUserInactivityEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type GroupsUsersGetResponseUsersInnerOptionsIgnoreUserInactivityEnum = typeof GroupsUsersGetResponseUsersInnerOptionsIgnoreUserInactivityEnum[keyof typeof GroupsUsersGetResponseUsersInnerOptionsIgnoreUserInactivityEnum];
export declare const GroupsUsersGetResponseUsersInnerOptionsMultiFactorAuthEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type GroupsUsersGetResponseUsersInnerOptionsMultiFactorAuthEnabledEnum = typeof GroupsUsersGetResponseUsersInnerOptionsMultiFactorAuthEnabledEnum[keyof typeof GroupsUsersGetResponseUsersInnerOptionsMultiFactorAuthEnabledEnum];
/**
 *
 * @export
 * @interface OsFederationDomainsGetResponse
 */
export interface OsFederationDomainsGetResponse {
    /**
     *
     * @type {Array<AuthDomainsGetResponseDomainsInner>}
     * @memberof OsFederationDomainsGetResponse
     */
    'domains'?: Array<AuthDomainsGetResponseDomainsInner>;
    /**
     * Links to the resources in question. See [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html) for more info.
     * @type {Array<AuthProjectsGetResponseProjectsInnerLinksInner>}
     * @memberof OsFederationDomainsGetResponse
     */
    'links'?: Array<AuthProjectsGetResponseProjectsInnerLinksInner>;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProviderGetResponse
 */
export interface OsFederationIdentityProviderGetResponse {
    /**
     *
     * @type {OsFederationIdentityProviderGetResponseIdentityProvider}
     * @memberof OsFederationIdentityProviderGetResponse
     */
    'identity_provider'?: OsFederationIdentityProviderGetResponseIdentityProvider;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProviderGetResponseIdentityProvider
 */
export interface OsFederationIdentityProviderGetResponseIdentityProvider {
    /**
     * The Identity Provider unique ID
     * @type {string}
     * @memberof OsFederationIdentityProviderGetResponseIdentityProvider
     */
    'id'?: string;
    /**
     * The Identity Provider description
     * @type {string}
     * @memberof OsFederationIdentityProviderGetResponseIdentityProvider
     */
    'description'?: string;
    /**
     * The ID of a domain that is associated with the Identity Provider.
     * @type {string}
     * @memberof OsFederationIdentityProviderGetResponseIdentityProvider
     */
    'domain_id'?: string;
    /**
     * The length of validity in minutes for group memberships carried over through mapping and persisted in the database.
     * @type {number}
     * @memberof OsFederationIdentityProviderGetResponseIdentityProvider
     */
    'authorization_ttl'?: number;
    /**
     * Whether the Identity Provider is enabled or not
     * @type {boolean}
     * @memberof OsFederationIdentityProviderGetResponseIdentityProvider
     */
    'enabled'?: boolean;
    /**
     * List of the unique Identity Provider’s remote IDs
     * @type {Array<string>}
     * @memberof OsFederationIdentityProviderGetResponseIdentityProvider
     */
    'remote_ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProviderPatchRequest
 */
export interface OsFederationIdentityProviderPatchRequest {
    /**
     *
     * @type {OsFederationIdentityProviderPatchRequestIdentityProvider}
     * @memberof OsFederationIdentityProviderPatchRequest
     */
    'identity_provider'?: OsFederationIdentityProviderPatchRequestIdentityProvider;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProviderPatchRequestIdentityProvider
 */
export interface OsFederationIdentityProviderPatchRequestIdentityProvider {
    [key: string]: any;
    /**
     *
     * @type {boolean}
     * @memberof OsFederationIdentityProviderPatchRequestIdentityProvider
     */
    'enabled'?: OsFederationIdentityProviderPatchRequestIdentityProviderEnabledEnum;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProviderPatchRequestIdentityProvider
     */
    'description'?: string | null;
    /**
     *
     * @type {number}
     * @memberof OsFederationIdentityProviderPatchRequestIdentityProvider
     */
    'authorization_ttl'?: number | null;
    /**
     *
     * @type {Array<string>}
     * @memberof OsFederationIdentityProviderPatchRequestIdentityProvider
     */
    'remote_ids'?: Array<string>;
}
export declare const OsFederationIdentityProviderPatchRequestIdentityProviderEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type OsFederationIdentityProviderPatchRequestIdentityProviderEnabledEnum = typeof OsFederationIdentityProviderPatchRequestIdentityProviderEnabledEnum[keyof typeof OsFederationIdentityProviderPatchRequestIdentityProviderEnabledEnum];
/**
 *
 * @export
 * @interface OsFederationIdentityProviderPatchResponse
 */
export interface OsFederationIdentityProviderPatchResponse {
    /**
     *
     * @type {OsFederationIdentityProviderGetResponseIdentityProvider}
     * @memberof OsFederationIdentityProviderPatchResponse
     */
    'identity_provider'?: OsFederationIdentityProviderGetResponseIdentityProvider;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProviderPutRequest
 */
export interface OsFederationIdentityProviderPutRequest {
    /**
     *
     * @type {OsFederationIdentityProviderPutRequestIdentityProvider}
     * @memberof OsFederationIdentityProviderPutRequest
     */
    'identity_provider'?: OsFederationIdentityProviderPutRequestIdentityProvider;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProviderPutRequestIdentityProvider
 */
export interface OsFederationIdentityProviderPutRequestIdentityProvider {
    [key: string]: any;
    /**
     *
     * @type {boolean}
     * @memberof OsFederationIdentityProviderPutRequestIdentityProvider
     */
    'enabled'?: OsFederationIdentityProviderPutRequestIdentityProviderEnabledEnum;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProviderPutRequestIdentityProvider
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProviderPutRequestIdentityProvider
     */
    'domain_id'?: string | null;
    /**
     *
     * @type {number}
     * @memberof OsFederationIdentityProviderPutRequestIdentityProvider
     */
    'authorization_ttl'?: number | null;
    /**
     *
     * @type {Array<string>}
     * @memberof OsFederationIdentityProviderPutRequestIdentityProvider
     */
    'remote_ids'?: Array<string>;
}
export declare const OsFederationIdentityProviderPutRequestIdentityProviderEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type OsFederationIdentityProviderPutRequestIdentityProviderEnabledEnum = typeof OsFederationIdentityProviderPutRequestIdentityProviderEnabledEnum[keyof typeof OsFederationIdentityProviderPutRequestIdentityProviderEnabledEnum];
/**
 *
 * @export
 * @interface OsFederationIdentityProviderPutResponse
 */
export interface OsFederationIdentityProviderPutResponse {
    /**
     *
     * @type {OsFederationIdentityProviderGetResponseIdentityProvider}
     * @memberof OsFederationIdentityProviderPutResponse
     */
    'identity_provider'?: OsFederationIdentityProviderGetResponseIdentityProvider;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersGetResponse
 */
export interface OsFederationIdentityProvidersGetResponse {
    /**
     *
     * @type {Array<OsFederationIdentityProviderGetResponseIdentityProvider>}
     * @memberof OsFederationIdentityProvidersGetResponse
     */
    'identity_providers'?: Array<OsFederationIdentityProviderGetResponseIdentityProvider>;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolGetResponse
 */
export interface OsFederationIdentityProvidersProtocolGetResponse {
    /**
     *
     * @type {OsFederationIdentityProvidersProtocolGetResponseProtocol}
     * @memberof OsFederationIdentityProvidersProtocolGetResponse
     */
    'protocol'?: OsFederationIdentityProvidersProtocolGetResponseProtocol;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolGetResponseProtocol
 */
export interface OsFederationIdentityProvidersProtocolGetResponseProtocol {
    /**
     * The federation protocol ID
     * @type {string}
     * @memberof OsFederationIdentityProvidersProtocolGetResponseProtocol
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProvidersProtocolGetResponseProtocol
     */
    'mapping_id'?: string;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProvidersProtocolGetResponseProtocol
     */
    'remote_id_attribute'?: string;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolPatchRequest
 */
export interface OsFederationIdentityProvidersProtocolPatchRequest {
    /**
     *
     * @type {OsFederationIdentityProvidersProtocolPatchRequestProtocol}
     * @memberof OsFederationIdentityProvidersProtocolPatchRequest
     */
    'protocol'?: OsFederationIdentityProvidersProtocolPatchRequestProtocol;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolPatchRequestProtocol
 */
export interface OsFederationIdentityProvidersProtocolPatchRequestProtocol {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProvidersProtocolPatchRequestProtocol
     */
    'mapping_id'?: string;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProvidersProtocolPatchRequestProtocol
     */
    'remote_id_attribute'?: string;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolPatchResponse
 */
export interface OsFederationIdentityProvidersProtocolPatchResponse {
    /**
     *
     * @type {OsFederationIdentityProvidersProtocolGetResponseProtocol}
     * @memberof OsFederationIdentityProvidersProtocolPatchResponse
     */
    'protocol'?: OsFederationIdentityProvidersProtocolGetResponseProtocol;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolPutRequest
 */
export interface OsFederationIdentityProvidersProtocolPutRequest {
    /**
     *
     * @type {OsFederationIdentityProvidersProtocolPutRequestProtocol}
     * @memberof OsFederationIdentityProvidersProtocolPutRequest
     */
    'protocol'?: OsFederationIdentityProvidersProtocolPutRequestProtocol;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolPutRequestProtocol
 */
export interface OsFederationIdentityProvidersProtocolPutRequestProtocol {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProvidersProtocolPutRequestProtocol
     */
    'mapping_id': string;
    /**
     *
     * @type {string}
     * @memberof OsFederationIdentityProvidersProtocolPutRequestProtocol
     */
    'remote_id_attribute'?: string;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolPutResponse
 */
export interface OsFederationIdentityProvidersProtocolPutResponse {
    /**
     *
     * @type {OsFederationIdentityProvidersProtocolGetResponseProtocol}
     * @memberof OsFederationIdentityProvidersProtocolPutResponse
     */
    'protocol'?: OsFederationIdentityProvidersProtocolGetResponseProtocol;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolsAuthGetResponse
 */
export interface OsFederationIdentityProvidersProtocolsAuthGetResponse {
    /**
     *
     * @type {AuthOsFederationWebssoGetResponseToken}
     * @memberof OsFederationIdentityProvidersProtocolsAuthGetResponse
     */
    'token'?: AuthOsFederationWebssoGetResponseToken;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolsAuthPostResponse
 */
export interface OsFederationIdentityProvidersProtocolsAuthPostResponse {
    /**
     *
     * @type {AuthOsFederationWebssoGetResponseToken}
     * @memberof OsFederationIdentityProvidersProtocolsAuthPostResponse
     */
    'token'?: AuthOsFederationWebssoGetResponseToken;
}
/**
 *
 * @export
 * @interface OsFederationIdentityProvidersProtocolsGetResponse
 */
export interface OsFederationIdentityProvidersProtocolsGetResponse {
    /**
     *
     * @type {Array<OsFederationIdentityProvidersProtocolGetResponseProtocol>}
     * @memberof OsFederationIdentityProvidersProtocolsGetResponse
     */
    'protocols'?: Array<OsFederationIdentityProvidersProtocolGetResponseProtocol>;
}
/**
 *
 * @export
 * @interface OsFederationMappingGetResponse
 */
export interface OsFederationMappingGetResponse {
    /**
     *
     * @type {OsFederationMappingGetResponseMapping}
     * @memberof OsFederationMappingGetResponse
     */
    'mapping'?: OsFederationMappingGetResponseMapping;
}
/**
 *
 * @export
 * @interface OsFederationMappingGetResponseMapping
 */
export interface OsFederationMappingGetResponseMapping {
    /**
     * The Federation Mapping unique ID
     * @type {string}
     * @memberof OsFederationMappingGetResponseMapping
     */
    'id'?: string;
    /**
     *
     * @type {any}
     * @memberof OsFederationMappingGetResponseMapping
     */
    'rules'?: any;
    /**
     * Mapping schema version
     * @type {any}
     * @memberof OsFederationMappingGetResponseMapping
     */
    'schema_version'?: any;
}
/**
 *
 * @export
 * @interface OsFederationMappingPatchRequest
 */
export interface OsFederationMappingPatchRequest {
    /**
     *
     * @type {OsFederationMappingPatchRequestMapping}
     * @memberof OsFederationMappingPatchRequest
     */
    'mapping'?: OsFederationMappingPatchRequestMapping;
}
/**
 *
 * @export
 * @interface OsFederationMappingPatchRequestMapping
 */
export interface OsFederationMappingPatchRequestMapping {
    /**
     *
     * @type {any}
     * @memberof OsFederationMappingPatchRequestMapping
     */
    'rules': any;
    /**
     * Mapping schema version
     * @type {any}
     * @memberof OsFederationMappingPatchRequestMapping
     */
    'schema_version'?: any;
}
/**
 *
 * @export
 * @interface OsFederationMappingPatchResponse
 */
export interface OsFederationMappingPatchResponse {
    /**
     *
     * @type {OsFederationMappingPatchResponseMapping}
     * @memberof OsFederationMappingPatchResponse
     */
    'mapping'?: OsFederationMappingPatchResponseMapping;
}
/**
 *
 * @export
 * @interface OsFederationMappingPatchResponseMapping
 */
export interface OsFederationMappingPatchResponseMapping {
    /**
     * The Federation Mapping unique ID
     * @type {any}
     * @memberof OsFederationMappingPatchResponseMapping
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof OsFederationMappingPatchResponseMapping
     */
    'rules'?: any;
    /**
     * Mapping schema version
     * @type {any}
     * @memberof OsFederationMappingPatchResponseMapping
     */
    'schema_version'?: any;
}
/**
 *
 * @export
 * @interface OsFederationMappingPutRequest
 */
export interface OsFederationMappingPutRequest {
    /**
     *
     * @type {OsFederationMappingPatchRequestMapping}
     * @memberof OsFederationMappingPutRequest
     */
    'mapping'?: OsFederationMappingPatchRequestMapping;
}
/**
 *
 * @export
 * @interface OsFederationMappingPutResponse
 */
export interface OsFederationMappingPutResponse {
    /**
     *
     * @type {OsFederationMappingPatchResponseMapping}
     * @memberof OsFederationMappingPutResponse
     */
    'mapping'?: OsFederationMappingPatchResponseMapping;
}
/**
 *
 * @export
 * @interface OsFederationMappingsGetResponse
 */
export interface OsFederationMappingsGetResponse {
    /**
     *
     * @type {any}
     * @memberof OsFederationMappingsGetResponse
     */
    'mappings'?: any;
}
/**
 *
 * @export
 * @interface OsFederationProjectsGetResponse
 */
export interface OsFederationProjectsGetResponse {
    /**
     *
     * @type {Array<AuthProjectsGetResponseProjectsInner>}
     * @memberof OsFederationProjectsGetResponse
     */
    'projects'?: Array<AuthProjectsGetResponseProjectsInner>;
    /**
     * Links to the resources in question. See [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html) for more info.
     * @type {Array<AuthProjectsGetResponseProjectsInnerLinksInner>}
     * @memberof OsFederationProjectsGetResponse
     */
    'links'?: Array<AuthProjectsGetResponseProjectsInnerLinksInner>;
}
/**
 *
 * @export
 * @interface OsFederationServiceProviderGetResponse
 */
export interface OsFederationServiceProviderGetResponse {
    /**
     *
     * @type {OsFederationServiceProviderGetResponseServiceProvider}
     * @memberof OsFederationServiceProviderGetResponse
     */
    'service_provider'?: OsFederationServiceProviderGetResponseServiceProvider;
}
/**
 *
 * @export
 * @interface OsFederationServiceProviderGetResponseServiceProvider
 */
export interface OsFederationServiceProviderGetResponseServiceProvider {
    /**
     * The URL to authenticate against
     * @type {any}
     * @memberof OsFederationServiceProviderGetResponseServiceProvider
     */
    'auth_url': any;
    /**
     * The description of the Service Provider
     * @type {any}
     * @memberof OsFederationServiceProviderGetResponseServiceProvider
     */
    'description'?: any;
    /**
     * The Service Provider unique ID
     * @type {any}
     * @memberof OsFederationServiceProviderGetResponseServiceProvider
     */
    'id'?: any;
    /**
     * Whether the Service Provider is enabled or not
     * @type {any}
     * @memberof OsFederationServiceProviderGetResponseServiceProvider
     */
    'enabled'?: any;
    /**
     * The prefix of the RelayState SAML attribute
     * @type {any}
     * @memberof OsFederationServiceProviderGetResponseServiceProvider
     */
    'relay_state_prefix'?: any;
    /**
     * The Service Provider’s URL
     * @type {any}
     * @memberof OsFederationServiceProviderGetResponseServiceProvider
     */
    'sp_url': any;
}
/**
 *
 * @export
 * @interface OsFederationServiceProviderPatchRequest
 */
export interface OsFederationServiceProviderPatchRequest {
    /**
     *
     * @type {OsFederationServiceProviderPatchRequestServiceProvider}
     * @memberof OsFederationServiceProviderPatchRequest
     */
    'service_provider'?: OsFederationServiceProviderPatchRequestServiceProvider;
}
/**
 *
 * @export
 * @interface OsFederationServiceProviderPatchRequestServiceProvider
 */
export interface OsFederationServiceProviderPatchRequestServiceProvider {
    [key: string]: any;
    /**
     *
     * @type {any}
     * @memberof OsFederationServiceProviderPatchRequestServiceProvider
     */
    'auth_url'?: any;
    /**
     *
     * @type {any}
     * @memberof OsFederationServiceProviderPatchRequestServiceProvider
     */
    'sp_url'?: any;
    /**
     *
     * @type {string}
     * @memberof OsFederationServiceProviderPatchRequestServiceProvider
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof OsFederationServiceProviderPatchRequestServiceProvider
     */
    'enabled'?: OsFederationServiceProviderPatchRequestServiceProviderEnabledEnum;
    /**
     *
     * @type {string}
     * @memberof OsFederationServiceProviderPatchRequestServiceProvider
     */
    'relay_state_prefix'?: string | null;
}
export declare const OsFederationServiceProviderPatchRequestServiceProviderEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type OsFederationServiceProviderPatchRequestServiceProviderEnabledEnum = typeof OsFederationServiceProviderPatchRequestServiceProviderEnabledEnum[keyof typeof OsFederationServiceProviderPatchRequestServiceProviderEnabledEnum];
/**
 *
 * @export
 * @interface OsFederationServiceProviderPatchResponse
 */
export interface OsFederationServiceProviderPatchResponse {
    /**
     *
     * @type {OsFederationServiceProviderGetResponseServiceProvider}
     * @memberof OsFederationServiceProviderPatchResponse
     */
    'service_provider'?: OsFederationServiceProviderGetResponseServiceProvider;
}
/**
 *
 * @export
 * @interface OsFederationServiceProviderPutRequest
 */
export interface OsFederationServiceProviderPutRequest {
    /**
     *
     * @type {OsFederationServiceProviderPutRequestServiceProvider}
     * @memberof OsFederationServiceProviderPutRequest
     */
    'service_provider'?: OsFederationServiceProviderPutRequestServiceProvider;
}
/**
 *
 * @export
 * @interface OsFederationServiceProviderPutRequestServiceProvider
 */
export interface OsFederationServiceProviderPutRequestServiceProvider {
    [key: string]: any;
    /**
     *
     * @type {any}
     * @memberof OsFederationServiceProviderPutRequestServiceProvider
     */
    'auth_url': any;
    /**
     *
     * @type {any}
     * @memberof OsFederationServiceProviderPutRequestServiceProvider
     */
    'sp_url': any;
    /**
     *
     * @type {string}
     * @memberof OsFederationServiceProviderPutRequestServiceProvider
     */
    'description'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof OsFederationServiceProviderPutRequestServiceProvider
     */
    'enabled'?: OsFederationServiceProviderPutRequestServiceProviderEnabledEnum;
    /**
     *
     * @type {string}
     * @memberof OsFederationServiceProviderPutRequestServiceProvider
     */
    'relay_state_prefix'?: string | null;
}
export declare const OsFederationServiceProviderPutRequestServiceProviderEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type OsFederationServiceProviderPutRequestServiceProviderEnabledEnum = typeof OsFederationServiceProviderPutRequestServiceProviderEnabledEnum[keyof typeof OsFederationServiceProviderPutRequestServiceProviderEnabledEnum];
/**
 *
 * @export
 * @interface OsFederationServiceProviderPutResponse
 */
export interface OsFederationServiceProviderPutResponse {
    /**
     *
     * @type {OsFederationServiceProviderGetResponseServiceProvider}
     * @memberof OsFederationServiceProviderPutResponse
     */
    'service_provider'?: OsFederationServiceProviderGetResponseServiceProvider;
}
/**
 *
 * @export
 * @interface OsFederationServiceProvidersGetResponse
 */
export interface OsFederationServiceProvidersGetResponse {
    /**
     *
     * @type {any}
     * @memberof OsFederationServiceProvidersGetResponse
     */
    'service_providers'?: any;
}
/**
 *
 * @export
 * @interface Project
 */
export interface Project {
    /**
     *
     * @type {ProjectProject}
     * @memberof Project
     */
    'project'?: ProjectProject;
}
/**
 *
 * @export
 * @interface ProjectProject
 */
export interface ProjectProject {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof ProjectProject
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ProjectProject
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof ProjectProject
     */
    'domain_id'?: string | null;
    /**
     *
     * @type {boolean}
     * @memberof ProjectProject
     */
    'enabled'?: ProjectProjectEnabledEnum;
    /**
     *
     * @type {boolean}
     * @memberof ProjectProject
     */
    'is_domain'?: ProjectProjectIsDomainEnum;
    /**
     *
     * @type {string}
     * @memberof ProjectProject
     */
    'parent_id'?: string | null;
    /**
     *
     * @type {any}
     * @memberof ProjectProject
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof ProjectProject
     */
    'tags'?: any;
    /**
     *
     * @type {ProjectProjectOptions}
     * @memberof ProjectProject
     */
    'options'?: ProjectProjectOptions;
}
export declare const ProjectProjectEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type ProjectProjectEnabledEnum = typeof ProjectProjectEnabledEnum[keyof typeof ProjectProjectEnabledEnum];
export declare const ProjectProjectIsDomainEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type ProjectProjectIsDomainEnum = typeof ProjectProjectIsDomainEnum[keyof typeof ProjectProjectIsDomainEnum];
/**
 *
 * @export
 * @interface ProjectProjectOptions
 */
export interface ProjectProjectOptions {
    [key: string]: any;
    /**
     *
     * @type {boolean}
     * @memberof ProjectProjectOptions
     */
    'immutable'?: ProjectProjectOptionsImmutableEnum | null;
}
export declare const ProjectProjectOptionsImmutableEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type ProjectProjectOptionsImmutableEnum = typeof ProjectProjectOptionsImmutableEnum[keyof typeof ProjectProjectOptionsImmutableEnum];
/**
 *
 * @export
 * @interface ProjectsGetResponse
 */
export interface ProjectsGetResponse {
    /**
     *
     * @type {any}
     * @memberof ProjectsGetResponse
     */
    'projects'?: any;
}
/**
 *
 * @export
 * @interface ProjectsTagsGetResponse
 */
export interface ProjectsTagsGetResponse {
    /**
     *
     * @type {any}
     * @memberof ProjectsTagsGetResponse
     */
    'tags'?: any;
}
/**
 *
 * @export
 * @interface ProjectsTagsPutResponse
 */
export interface ProjectsTagsPutResponse {
    /**
     *
     * @type {any}
     * @memberof ProjectsTagsPutResponse
     */
    'tags'?: any;
}
/**
 *
 * @export
 * @interface Region
 */
export interface Region {
    /**
     *
     * @type {RegionRegion}
     * @memberof Region
     */
    'region'?: RegionRegion;
}
/**
 *
 * @export
 * @interface RegionRegion
 */
export interface RegionRegion {
    /**
     * The region description.
     * @type {any}
     * @memberof RegionRegion
     */
    'description'?: any;
    /**
     * The ID for the region.
     * @type {any}
     * @memberof RegionRegion
     */
    'id'?: any;
    /**
     * To make this region a child of another region, set this parameter to the ID of the parent region.
     * @type {any}
     * @memberof RegionRegion
     */
    'parent_id'?: any;
}
/**
 *
 * @export
 * @interface RegionsGetResponse
 */
export interface RegionsGetResponse {
    /**
     *
     * @type {any}
     * @memberof RegionsGetResponse
     */
    'regions'?: any;
}
/**
 *
 * @export
 * @interface Role
 */
export interface Role {
    /**
     *
     * @type {RoleRole}
     * @memberof Role
     */
    'role'?: RoleRole;
}
/**
 *
 * @export
 * @interface RoleAssignmentsGetResponse
 */
export interface RoleAssignmentsGetResponse {
    /**
     *
     * @type {any}
     * @memberof RoleAssignmentsGetResponse
     */
    'role_assignments'?: any;
}
/**
 *
 * @export
 * @interface RoleInferencesGetResponse
 */
export interface RoleInferencesGetResponse {
    /**
     *
     * @type {any}
     * @memberof RoleInferencesGetResponse
     */
    'role_inferences'?: any;
}
/**
 * A role object.
 * @export
 * @interface RoleRole
 */
export interface RoleRole {
    /**
     * The role ID.
     * @type {any}
     * @memberof RoleRole
     */
    'id'?: any;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof RoleRole
     */
    'links'?: {
        [key: string]: any;
    };
    /**
     *
     * @type {string}
     * @memberof RoleRole
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof RoleRole
     */
    'description'?: string;
    /**
     *
     * @type {RoleRoleOptions}
     * @memberof RoleRole
     */
    'options'?: RoleRoleOptions;
}
/**
 *
 * @export
 * @interface RoleRoleOptions
 */
export interface RoleRoleOptions {
    [key: string]: any;
    /**
     *
     * @type {any}
     * @memberof RoleRoleOptions
     */
    'immutable'?: RoleRoleOptionsImmutableEnum;
}
export declare const RoleRoleOptionsImmutableEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type RoleRoleOptionsImmutableEnum = typeof RoleRoleOptionsImmutableEnum[keyof typeof RoleRoleOptionsImmutableEnum];
/**
 *
 * @export
 * @interface RolesGetResponse
 */
export interface RolesGetResponse {
    /**
     *
     * @type {any}
     * @memberof RolesGetResponse
     */
    'roles'?: any;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof RolesGetResponse
     */
    'links'?: {
        [key: string]: any;
    };
}
/**
 *
 * @export
 * @interface RolesImpliesGetResponse
 */
export interface RolesImpliesGetResponse {
    /**
     *
     * @type {RolesImpliesGetResponseRoleInference}
     * @memberof RolesImpliesGetResponse
     */
    'role_inference'?: RolesImpliesGetResponseRoleInference;
}
/**
 *
 * @export
 * @interface RolesImpliesGetResponseRoleInference
 */
export interface RolesImpliesGetResponseRoleInference {
    /**
     *
     * @type {RolesImpliesGetResponseRoleInferencePriorRole}
     * @memberof RolesImpliesGetResponseRoleInference
     */
    'prior_role'?: RolesImpliesGetResponseRoleInferencePriorRole;
    /**
     *
     * @type {any}
     * @memberof RolesImpliesGetResponseRoleInference
     */
    'implies'?: any;
}
/**
 *
 * @export
 * @interface RolesImpliesGetResponseRoleInferencePriorRole
 */
export interface RolesImpliesGetResponseRoleInferencePriorRole {
    /**
     * The role ID.
     * @type {any}
     * @memberof RolesImpliesGetResponseRoleInferencePriorRole
     */
    'id'?: any;
    /**
     * The role name.
     * @type {any}
     * @memberof RolesImpliesGetResponseRoleInferencePriorRole
     */
    'name'?: any;
    /**
     * The role description.
     * @type {any}
     * @memberof RolesImpliesGetResponseRoleInferencePriorRole
     */
    'description'?: any;
    /**
     *
     * @type {RolesImpliesGetResponseRoleInferencePriorRoleLinks}
     * @memberof RolesImpliesGetResponseRoleInferencePriorRole
     */
    'links'?: RolesImpliesGetResponseRoleInferencePriorRoleLinks;
}
/**
 *
 * @export
 * @interface RolesImpliesGetResponseRoleInferencePriorRoleLinks
 */
export interface RolesImpliesGetResponseRoleInferencePriorRoleLinks {
    /**
     * The link to the resource in question.
     * @type {any}
     * @memberof RolesImpliesGetResponseRoleInferencePriorRoleLinks
     */
    'self'?: any;
}
/**
 *
 * @export
 * @interface RolesImplyGetResponse
 */
export interface RolesImplyGetResponse {
    /**
     *
     * @type {RolesImplyGetResponseRoleInference}
     * @memberof RolesImplyGetResponse
     */
    'role_inference'?: RolesImplyGetResponseRoleInference;
}
/**
 *
 * @export
 * @interface RolesImplyGetResponseRoleInference
 */
export interface RolesImplyGetResponseRoleInference {
    /**
     *
     * @type {RolesImpliesGetResponseRoleInferencePriorRole}
     * @memberof RolesImplyGetResponseRoleInference
     */
    'prior_role'?: RolesImpliesGetResponseRoleInferencePriorRole;
    /**
     *
     * @type {RolesImpliesGetResponseRoleInferencePriorRole}
     * @memberof RolesImplyGetResponseRoleInference
     */
    'implies'?: RolesImpliesGetResponseRoleInferencePriorRole;
}
/**
 *
 * @export
 * @interface RolesImplyPutResponse
 */
export interface RolesImplyPutResponse {
    /**
     *
     * @type {RolesImplyGetResponseRoleInference}
     * @memberof RolesImplyPutResponse
     */
    'role_inference'?: RolesImplyGetResponseRoleInference;
}
/**
 * List of roles assigned to the resource
 * @export
 * @interface RolesInfos
 */
export interface RolesInfos {
    /**
     *
     * @type {Array<RolesInfosRolesInner>}
     * @memberof RolesInfos
     */
    'roles'?: Array<RolesInfosRolesInner>;
    /**
     *
     * @type {{ [key: string]: string | null; }}
     * @memberof RolesInfos
     */
    'links'?: {
        [key: string]: string | null;
    };
}
/**
 *
 * @export
 * @interface RolesInfosRolesInner
 */
export interface RolesInfosRolesInner {
    /**
     * The role ID.
     * @type {string}
     * @memberof RolesInfosRolesInner
     */
    'id'?: string;
    /**
     * The role name.
     * @type {string}
     * @memberof RolesInfosRolesInner
     */
    'name'?: string;
    /**
     * The role description.
     * @type {string}
     * @memberof RolesInfosRolesInner
     */
    'description'?: string;
    /**
     *
     * @type {RolesInfosRolesInnerLinks}
     * @memberof RolesInfosRolesInner
     */
    'links'?: RolesInfosRolesInnerLinks;
}
/**
 *
 * @export
 * @interface RolesInfosRolesInnerLinks
 */
export interface RolesInfosRolesInnerLinks {
    /**
     * The link to the resource in question.
     * @type {string}
     * @memberof RolesInfosRolesInnerLinks
     */
    'self'?: string;
}
/**
 *
 * @export
 * @interface Service
 */
export interface Service {
    /**
     *
     * @type {ServiceService}
     * @memberof Service
     */
    'service'?: ServiceService;
}
/**
 *
 * @export
 * @interface ServiceService
 */
export interface ServiceService {
    /**
     * The service description.
     * @type {any}
     * @memberof ServiceService
     */
    'description'?: any;
    /**
     * Defines whether the service and its endpoints appear in the service catalog.
     * @type {any}
     * @memberof ServiceService
     */
    'enabled'?: any;
    /**
     * The UUID of the service to which the endpoint belongs.
     * @type {any}
     * @memberof ServiceService
     */
    'id'?: any;
    /**
     * The service name.
     * @type {any}
     * @memberof ServiceService
     */
    'name'?: any;
    /**
     * The service type, which describes the API implemented by the
     * @type {any}
     * @memberof ServiceService
     */
    'type'?: any;
}
/**
 *
 * @export
 * @interface ServicesGetResponse
 */
export interface ServicesGetResponse {
    /**
     *
     * @type {any}
     * @memberof ServicesGetResponse
     */
    'services'?: any;
}
/**
 *
 * @export
 * @interface UserGetResponse
 */
export interface UserGetResponse {
    /**
     *
     * @type {UserGetResponseUser}
     * @memberof UserGetResponse
     */
    'user'?: UserGetResponseUser;
}
/**
 *
 * @export
 * @interface UserGetResponseUser
 */
export interface UserGetResponseUser {
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUser
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUser
     */
    'default_project_id'?: any;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUser
     */
    'description'?: any;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUser
     */
    'domain_id'?: any;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUser
     */
    'enabled'?: UserGetResponseUserEnabledEnum;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUser
     */
    'federated'?: any;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUser
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUser
     */
    'password'?: any;
    /**
     *
     * @type {UserGetResponseUserOptions}
     * @memberof UserGetResponseUser
     */
    'options'?: UserGetResponseUserOptions;
}
export declare const UserGetResponseUserEnabledEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type UserGetResponseUserEnabledEnum = typeof UserGetResponseUserEnabledEnum[keyof typeof UserGetResponseUserEnabledEnum];
/**
 *
 * @export
 * @interface UserGetResponseUserOptions
 */
export interface UserGetResponseUserOptions {
    [key: string]: any;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUserOptions
     */
    'ignore_change_password_upon_first_use'?: UserGetResponseUserOptionsIgnoreChangePasswordUponFirstUseEnum;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUserOptions
     */
    'ignore_password_expiry'?: UserGetResponseUserOptionsIgnorePasswordExpiryEnum;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUserOptions
     */
    'ignore_lockout_failure_attempts'?: UserGetResponseUserOptionsIgnoreLockoutFailureAttemptsEnum;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUserOptions
     */
    'lock_password'?: UserGetResponseUserOptionsLockPasswordEnum;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUserOptions
     */
    'ignore_user_inactivity'?: UserGetResponseUserOptionsIgnoreUserInactivityEnum;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUserOptions
     */
    'multi_factor_auth_rules'?: any;
    /**
     *
     * @type {any}
     * @memberof UserGetResponseUserOptions
     */
    'multi_factor_auth_enabled'?: UserGetResponseUserOptionsMultiFactorAuthEnabledEnum;
}
export declare const UserGetResponseUserOptionsIgnoreChangePasswordUponFirstUseEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type UserGetResponseUserOptionsIgnoreChangePasswordUponFirstUseEnum = typeof UserGetResponseUserOptionsIgnoreChangePasswordUponFirstUseEnum[keyof typeof UserGetResponseUserOptionsIgnoreChangePasswordUponFirstUseEnum];
export declare const UserGetResponseUserOptionsIgnorePasswordExpiryEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type UserGetResponseUserOptionsIgnorePasswordExpiryEnum = typeof UserGetResponseUserOptionsIgnorePasswordExpiryEnum[keyof typeof UserGetResponseUserOptionsIgnorePasswordExpiryEnum];
export declare const UserGetResponseUserOptionsIgnoreLockoutFailureAttemptsEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type UserGetResponseUserOptionsIgnoreLockoutFailureAttemptsEnum = typeof UserGetResponseUserOptionsIgnoreLockoutFailureAttemptsEnum[keyof typeof UserGetResponseUserOptionsIgnoreLockoutFailureAttemptsEnum];
export declare const UserGetResponseUserOptionsLockPasswordEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type UserGetResponseUserOptionsLockPasswordEnum = typeof UserGetResponseUserOptionsLockPasswordEnum[keyof typeof UserGetResponseUserOptionsLockPasswordEnum];
export declare const UserGetResponseUserOptionsIgnoreUserInactivityEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type UserGetResponseUserOptionsIgnoreUserInactivityEnum = typeof UserGetResponseUserOptionsIgnoreUserInactivityEnum[keyof typeof UserGetResponseUserOptionsIgnoreUserInactivityEnum];
export declare const UserGetResponseUserOptionsMultiFactorAuthEnabledEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type UserGetResponseUserOptionsMultiFactorAuthEnabledEnum = typeof UserGetResponseUserOptionsMultiFactorAuthEnabledEnum[keyof typeof UserGetResponseUserOptionsMultiFactorAuthEnabledEnum];
/**
 *
 * @export
 * @interface UserPatchRequest
 */
export interface UserPatchRequest {
    /**
     *
     * @type {UserPatchRequestUser}
     * @memberof UserPatchRequest
     */
    'user'?: UserPatchRequestUser;
}
/**
 *
 * @export
 * @interface UserPatchRequestUser
 */
export interface UserPatchRequestUser {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UserPatchRequestUser
     */
    'default_project_id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserPatchRequestUser
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UserPatchRequestUser
     */
    'domain_id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UserPatchRequestUser
     */
    'enabled'?: UserPatchRequestUserEnabledEnum;
    /**
     *
     * @type {any}
     * @memberof UserPatchRequestUser
     */
    'federated'?: any;
    /**
     *
     * @type {string}
     * @memberof UserPatchRequestUser
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof UserPatchRequestUser
     */
    'password'?: string | null;
    /**
     *
     * @type {UserGetResponseUserOptions}
     * @memberof UserPatchRequestUser
     */
    'options'?: UserGetResponseUserOptions;
}
export declare const UserPatchRequestUserEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type UserPatchRequestUserEnabledEnum = typeof UserPatchRequestUserEnabledEnum[keyof typeof UserPatchRequestUserEnabledEnum];
/**
 *
 * @export
 * @interface UserPatchResponse
 */
export interface UserPatchResponse {
    /**
     *
     * @type {UserGetResponseUser}
     * @memberof UserPatchResponse
     */
    'user'?: UserGetResponseUser;
}
/**
 *
 * @export
 * @interface UsersAccessRuleGetResponse
 */
export interface UsersAccessRuleGetResponse {
    /**
     *
     * @type {UsersAccessRuleGetResponseAccessRule}
     * @memberof UsersAccessRuleGetResponse
     */
    'access_rule'?: UsersAccessRuleGetResponseAccessRule;
}
/**
 *
 * @export
 * @interface UsersAccessRuleGetResponseAccessRule
 */
export interface UsersAccessRuleGetResponseAccessRule {
    [key: string]: any;
    /**
     *
     * @type {any}
     * @memberof UsersAccessRuleGetResponseAccessRule
     */
    'path'?: any;
    /**
     *
     * @type {any}
     * @memberof UsersAccessRuleGetResponseAccessRule
     */
    'method'?: any;
    /**
     *
     * @type {any}
     * @memberof UsersAccessRuleGetResponseAccessRule
     */
    'service'?: any;
    /**
     *
     * @type {any}
     * @memberof UsersAccessRuleGetResponseAccessRule
     */
    'id'?: any;
}
/**
 *
 * @export
 * @interface UsersAccessRulesGetResponse
 */
export interface UsersAccessRulesGetResponse {
    /**
     *
     * @type {any}
     * @memberof UsersAccessRulesGetResponse
     */
    'access_rules'?: any;
    /**
     * Links to the resources in question. See [API Guide / Links and References](https://docs.openstack.org/api-guide/compute/links_and_references.html) for more info.
     * @type {any}
     * @memberof UsersAccessRulesGetResponse
     */
    'links'?: any;
}
/**
 *
 * @export
 * @interface UsersApplicationCredentialGetResponse
 */
export interface UsersApplicationCredentialGetResponse {
    /**
     *
     * @type {UsersApplicationCredentialGetResponseApplicationCredential}
     * @memberof UsersApplicationCredentialGetResponse
     */
    'application_credential'?: UsersApplicationCredentialGetResponseApplicationCredential;
}
/**
 *
 * @export
 * @interface UsersApplicationCredentialGetResponseApplicationCredential
 */
export interface UsersApplicationCredentialGetResponseApplicationCredential {
    /**
     * The ID of the application credential.
     * @type {any}
     * @memberof UsersApplicationCredentialGetResponseApplicationCredential
     */
    'id'?: any;
    /**
     * The ID of the project the application credential was created for and that authentication requests using this application credential will be scoped to.
     * @type {any}
     * @memberof UsersApplicationCredentialGetResponseApplicationCredential
     */
    'project_id'?: any;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialGetResponseApplicationCredential
     */
    'name'?: any;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialGetResponseApplicationCredential
     */
    'description'?: any;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialGetResponseApplicationCredential
     */
    'expires_at'?: any;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialGetResponseApplicationCredential
     */
    'roles'?: any;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialGetResponseApplicationCredential
     */
    'unrestricted'?: UsersApplicationCredentialGetResponseApplicationCredentialUnrestrictedEnum;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialGetResponseApplicationCredential
     */
    'access_rules'?: any;
}
export declare const UsersApplicationCredentialGetResponseApplicationCredentialUnrestrictedEnum: {
    readonly True: "true";
    readonly False: "false";
    readonly Null: "null";
};
export type UsersApplicationCredentialGetResponseApplicationCredentialUnrestrictedEnum = typeof UsersApplicationCredentialGetResponseApplicationCredentialUnrestrictedEnum[keyof typeof UsersApplicationCredentialGetResponseApplicationCredentialUnrestrictedEnum];
/**
 *
 * @export
 * @interface UsersApplicationCredentialsGetResponse
 */
export interface UsersApplicationCredentialsGetResponse {
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialsGetResponse
     */
    'application_credentials'?: any;
}
/**
 *
 * @export
 * @interface UsersApplicationCredentialsPostRequest
 */
export interface UsersApplicationCredentialsPostRequest {
    /**
     *
     * @type {UsersApplicationCredentialsPostRequestApplicationCredential}
     * @memberof UsersApplicationCredentialsPostRequest
     */
    'application_credential'?: UsersApplicationCredentialsPostRequestApplicationCredential;
}
/**
 *
 * @export
 * @interface UsersApplicationCredentialsPostRequestApplicationCredential
 */
export interface UsersApplicationCredentialsPostRequestApplicationCredential {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UsersApplicationCredentialsPostRequestApplicationCredential
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UsersApplicationCredentialsPostRequestApplicationCredential
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersApplicationCredentialsPostRequestApplicationCredential
     */
    'secret'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersApplicationCredentialsPostRequestApplicationCredential
     */
    'expires_at'?: string | null;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialsPostRequestApplicationCredential
     */
    'roles'?: any;
    /**
     *
     * @type {boolean}
     * @memberof UsersApplicationCredentialsPostRequestApplicationCredential
     */
    'unrestricted'?: UsersApplicationCredentialsPostRequestApplicationCredentialUnrestrictedEnum;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialsPostRequestApplicationCredential
     */
    'access_rules'?: any;
}
export declare const UsersApplicationCredentialsPostRequestApplicationCredentialUnrestrictedEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type UsersApplicationCredentialsPostRequestApplicationCredentialUnrestrictedEnum = typeof UsersApplicationCredentialsPostRequestApplicationCredentialUnrestrictedEnum[keyof typeof UsersApplicationCredentialsPostRequestApplicationCredentialUnrestrictedEnum];
/**
 *
 * @export
 * @interface UsersApplicationCredentialsPostResponse
 */
export interface UsersApplicationCredentialsPostResponse {
    /**
     *
     * @type {UsersApplicationCredentialsPostResponseApplicationCredential}
     * @memberof UsersApplicationCredentialsPostResponse
     */
    'application_credential'?: UsersApplicationCredentialsPostResponseApplicationCredential;
}
/**
 *
 * @export
 * @interface UsersApplicationCredentialsPostResponseApplicationCredential
 */
export interface UsersApplicationCredentialsPostResponseApplicationCredential {
    /**
     * The ID of the application credential.
     * @type {any}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'id'?: any;
    /**
     * The ID of the project the application credential was created for and that authentication requests using this application credential will be scoped to.
     * @type {any}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'project_id'?: any;
    /**
     *
     * @type {string}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'expires_at'?: string | null;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'roles'?: any;
    /**
     *
     * @type {boolean}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'unrestricted'?: UsersApplicationCredentialsPostResponseApplicationCredentialUnrestrictedEnum;
    /**
     *
     * @type {any}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'access_rules'?: any;
    /**
     * The secret for the application credential, either generated by the server or provided by the user. This is only ever shown once in the response to a create request. It is not stored nor ever shown again. If the secret is lost, a new application credential must be created.
     * @type {any}
     * @memberof UsersApplicationCredentialsPostResponseApplicationCredential
     */
    'secret'?: any;
}
export declare const UsersApplicationCredentialsPostResponseApplicationCredentialUnrestrictedEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type UsersApplicationCredentialsPostResponseApplicationCredentialUnrestrictedEnum = typeof UsersApplicationCredentialsPostResponseApplicationCredentialUnrestrictedEnum[keyof typeof UsersApplicationCredentialsPostResponseApplicationCredentialUnrestrictedEnum];
/**
 *
 * @export
 * @interface UsersGetResponse
 */
export interface UsersGetResponse {
    /**
     *
     * @type {any}
     * @memberof UsersGetResponse
     */
    'users'?: any;
}
/**
 *
 * @export
 * @interface UsersGroupsGetResponse
 */
export interface UsersGroupsGetResponse {
    /**
     * A list of group objects
     * @type {any}
     * @memberof UsersGroupsGetResponse
     */
    'groups'?: any;
}
/**
 *
 * @export
 * @interface UsersPasswordPostRequest
 */
export interface UsersPasswordPostRequest {
    /**
     *
     * @type {UsersPasswordPostRequestUser}
     * @memberof UsersPasswordPostRequest
     */
    'user'?: UsersPasswordPostRequestUser;
}
/**
 *
 * @export
 * @interface UsersPasswordPostRequestUser
 */
export interface UsersPasswordPostRequestUser {
    [key: string]: any;
    /**
     *
     * @type {any}
     * @memberof UsersPasswordPostRequestUser
     */
    'original_password': any;
    /**
     *
     * @type {any}
     * @memberof UsersPasswordPostRequestUser
     */
    'password': any;
}
/**
 *
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
    /**
     *
     * @type {UsersPostRequestUser}
     * @memberof UsersPostRequest
     */
    'user'?: UsersPostRequestUser;
}
/**
 *
 * @export
 * @interface UsersPostRequestUser
 */
export interface UsersPostRequestUser {
    [key: string]: any;
    /**
     *
     * @type {string}
     * @memberof UsersPostRequestUser
     */
    'default_project_id'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersPostRequestUser
     */
    'description'?: string | null;
    /**
     *
     * @type {string}
     * @memberof UsersPostRequestUser
     */
    'domain_id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof UsersPostRequestUser
     */
    'enabled'?: UsersPostRequestUserEnabledEnum;
    /**
     *
     * @type {any}
     * @memberof UsersPostRequestUser
     */
    'federated'?: any;
    /**
     *
     * @type {string}
     * @memberof UsersPostRequestUser
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof UsersPostRequestUser
     */
    'password'?: string | null;
    /**
     *
     * @type {UserGetResponseUserOptions}
     * @memberof UsersPostRequestUser
     */
    'options'?: UserGetResponseUserOptions;
}
export declare const UsersPostRequestUserEnabledEnum: {
    readonly True: true;
    readonly False: false;
    readonly Null: any;
};
export type UsersPostRequestUserEnabledEnum = typeof UsersPostRequestUserEnabledEnum[keyof typeof UsersPostRequestUserEnabledEnum];
/**
 *
 * @export
 * @interface UsersProjectsGetResponse
 */
export interface UsersProjectsGetResponse {
    /**
     * A list of project objects
     * @type {any}
     * @memberof UsersProjectsGetResponse
     */
    'projects'?: any;
}
/**
 * AuthApi - axios parameter creator
 * @export
 */
export declare const AuthApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCatalogGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCatalogHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDomainsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDomainsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet: (idpId: string, protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead: (idpId: string, protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost: (idpId: string, protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Exchange a scoped token for an ECP assertion.  POST /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {AuthOsFederationSaml2EcpPostRequest} [authOsFederationSaml2EcpPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpPost: (authOsFederationSaml2EcpPostRequest?: AuthOsFederationSaml2EcpPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Get: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Head: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Exchange a scoped token for a SAML assertion.  POST /v3/auth/OS-FEDERATION/saml2
     * @param {AuthOsFederationSaml2PostRequest} [authOsFederationSaml2PostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Post: (authOsFederationSaml2PostRequest?: AuthOsFederationSaml2PostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdGet: (protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdHead: (protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdPost: (protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProjectsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProjectsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSystemGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSystemHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke a token.  DELETE /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensDelete: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {string} xSubjectToken The authentication token. An authentication response returns the token ID in this header rather than in the response body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensGet: (xSubjectToken: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensOSPKIRevokedGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensOSPKIRevokedHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Issue a token.  POST /v3/auth/tokens
     * @param {AuthTokensPostRequest} [authTokensPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensPost: (authTokensPostRequest?: AuthTokensPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AuthApi - functional programming interface
 * @export
 */
export declare const AuthApiFp: (configuration?: Configuration) => {
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCatalogGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthCatalogGetResponse>>;
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCatalogHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDomainsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthDomainsGetResponse>>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDomainsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOsFederationIdentityProvidersProtocolsWebssoGetResponse>>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOsFederationIdentityProvidersProtocolsWebssoPostResponse>>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Exchange a scoped token for an ECP assertion.  POST /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {AuthOsFederationSaml2EcpPostRequest} [authOsFederationSaml2EcpPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpPost(authOsFederationSaml2EcpPostRequest?: AuthOsFederationSaml2EcpPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Get(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Head(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Exchange a scoped token for a SAML assertion.  POST /v3/auth/OS-FEDERATION/saml2
     * @param {AuthOsFederationSaml2PostRequest} [authOsFederationSaml2PostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Post(authOsFederationSaml2PostRequest?: AuthOsFederationSaml2PostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdGet(protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOsFederationWebssoGetResponse>>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdHead(protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdPost(protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthOsFederationWebssoPostResponse>>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProjectsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthProjectsGetResponse>>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProjectsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSystemGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthSystemGetResponse>>;
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSystemHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke a token.  DELETE /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {string} xSubjectToken The authentication token. An authentication response returns the token ID in this header rather than in the response body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensGet(xSubjectToken: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokensGetResponse>>;
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensOSPKIRevokedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensOSPKIRevokedHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Issue a token.  POST /v3/auth/tokens
     * @param {AuthTokensPostRequest} [authTokensPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensPost(authTokensPostRequest?: AuthTokensPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthTokensPostResponse>>;
};
/**
 * AuthApi - factory interface
 * @export
 */
export declare const AuthApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCatalogGet(options?: any): AxiosPromise<AuthCatalogGetResponse>;
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authCatalogHead(options?: any): AxiosPromise<void>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDomainsGet(options?: any): AxiosPromise<AuthDomainsGetResponse>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authDomainsHead(options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet(idpId: string, protocolId: string, options?: any): AxiosPromise<AuthOsFederationIdentityProvidersProtocolsWebssoGetResponse>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead(idpId: string, protocolId: string, options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost(idpId: string, protocolId: string, options?: any): AxiosPromise<AuthOsFederationIdentityProvidersProtocolsWebssoPostResponse>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpGet(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpHead(options?: any): AxiosPromise<void>;
    /**
     * Exchange a scoped token for an ECP assertion.  POST /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {AuthOsFederationSaml2EcpPostRequest} [authOsFederationSaml2EcpPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2EcpPost(authOsFederationSaml2EcpPostRequest?: AuthOsFederationSaml2EcpPostRequest, options?: any): AxiosPromise<string>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Get(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Head(options?: any): AxiosPromise<void>;
    /**
     * Exchange a scoped token for a SAML assertion.  POST /v3/auth/OS-FEDERATION/saml2
     * @param {AuthOsFederationSaml2PostRequest} [authOsFederationSaml2PostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONSaml2Post(authOsFederationSaml2PostRequest?: AuthOsFederationSaml2PostRequest, options?: any): AxiosPromise<string>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdGet(protocolId: string, options?: any): AxiosPromise<AuthOsFederationWebssoGetResponse>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdHead(protocolId: string, options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authOSFEDERATIONWebssoProtocolIdPost(protocolId: string, options?: any): AxiosPromise<AuthOsFederationWebssoPostResponse>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProjectsGet(options?: any): AxiosPromise<AuthProjectsGetResponse>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProjectsHead(options?: any): AxiosPromise<void>;
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSystemGet(options?: any): AxiosPromise<AuthSystemGetResponse>;
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSystemHead(options?: any): AxiosPromise<void>;
    /**
     * Revoke a token.  DELETE /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensDelete(options?: any): AxiosPromise<void>;
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {string} xSubjectToken The authentication token. An authentication response returns the token ID in this header rather than in the response body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensGet(xSubjectToken: string, options?: any): AxiosPromise<AuthTokensGetResponse>;
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensHead(options?: any): AxiosPromise<void>;
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensOSPKIRevokedGet(options?: any): AxiosPromise<object>;
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensOSPKIRevokedHead(options?: any): AxiosPromise<void>;
    /**
     * Issue a token.  POST /v3/auth/tokens
     * @param {AuthTokensPostRequest} [authTokensPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authTokensPost(authTokensPostRequest?: AuthTokensPostRequest, options?: any): AxiosPromise<AuthTokensPostResponse>;
};
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export declare class AuthApi extends BaseAPI {
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authCatalogGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthCatalogGetResponse, any>>;
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authCatalogHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authDomainsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthDomainsGetResponse, any>>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authDomainsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthOsFederationIdentityProvidersProtocolsWebssoGetResponse, any>>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthOsFederationIdentityProvidersProtocolsWebssoPostResponse, any>>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONSaml2EcpGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONSaml2EcpHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Exchange a scoped token for an ECP assertion.  POST /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {AuthOsFederationSaml2EcpPostRequest} [authOsFederationSaml2EcpPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONSaml2EcpPost(authOsFederationSaml2EcpPostRequest?: AuthOsFederationSaml2EcpPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONSaml2Get(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONSaml2Head(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Exchange a scoped token for a SAML assertion.  POST /v3/auth/OS-FEDERATION/saml2
     * @param {AuthOsFederationSaml2PostRequest} [authOsFederationSaml2PostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONSaml2Post(authOsFederationSaml2PostRequest?: AuthOsFederationSaml2PostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * GET operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONWebssoProtocolIdGet(protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthOsFederationWebssoGetResponse, any>>;
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONWebssoProtocolIdHead(protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authOSFEDERATIONWebssoProtocolIdPost(protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthOsFederationWebssoPostResponse, any>>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authProjectsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthProjectsGetResponse, any>>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authProjectsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authSystemGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthSystemGetResponse, any>>;
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authSystemHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke a token.  DELETE /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTokensDelete(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {string} xSubjectToken The authentication token. An authentication response returns the token ID in this header rather than in the response body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTokensGet(xSubjectToken: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthTokensGetResponse, any>>;
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTokensHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTokensOSPKIRevokedGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTokensOSPKIRevokedHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Issue a token.  POST /v3/auth/tokens
     * @param {AuthTokensPostRequest} [authTokensPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    authTokensPost(authTokensPostRequest?: AuthTokensPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthTokensPostResponse, any>>;
}
/**
 * CredentialsApi - axios parameter creator
 * @export
 */
export declare const CredentialsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * DELETE operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdDelete: (credentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdGet: (credentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdHead: (credentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdPatch: (credentialId: string, body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/credentials
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsPost: (body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CredentialsApi - functional programming interface
 * @export
 */
export declare const CredentialsApiFp: (configuration?: Configuration) => {
    /**
     * DELETE operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdDelete(credentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdGet(credentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdHead(credentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdPatch(credentialId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * GET operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/credentials
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsPost(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * CredentialsApi - factory interface
 * @export
 */
export declare const CredentialsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * DELETE operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdDelete(credentialId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdGet(credentialId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdHead(credentialId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsCredentialIdPatch(credentialId: string, body?: object, options?: any): AxiosPromise<object>;
    /**
     * GET operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsGet(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/credentials
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    credentialsPost(body?: object, options?: any): AxiosPromise<object>;
};
/**
 * CredentialsApi - object-oriented interface
 * @export
 * @class CredentialsApi
 * @extends {BaseAPI}
 */
export declare class CredentialsApi extends BaseAPI {
    /**
     * DELETE operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    credentialsCredentialIdDelete(credentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    credentialsCredentialIdGet(credentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    credentialsCredentialIdHead(credentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    credentialsCredentialIdPatch(credentialId: string, body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * GET operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    credentialsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    credentialsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/credentials
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    credentialsPost(body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * DomainConfigurationApi - axios parameter creator
 * @export
 */
export declare const DomainConfigurationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigDefaultGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigDefaultHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupDefaultGet: (group: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupDefaultHead: (group: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupOptionDefaultGet: (group: string, option: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupOptionDefaultHead: (group: string, option: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigDelete: (domainId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGet: (domainId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupDelete: (domainId: string, group: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupGet: (domainId: string, group: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupHead: (domainId: string, group: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionDelete: (domainId: string, group: string, option: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionGet: (domainId: string, group: string, option: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionHead: (domainId: string, group: string, option: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroupOption} [domainConfigGroupOption]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionPatch: (domainId: string, group: string, option: string, domainConfigGroupOption?: DomainConfigGroupOption, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroup} [domainConfigGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupPatch: (domainId: string, group: string, domainConfigGroup?: DomainConfigGroup, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigHead: (domainId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigPatch: (domainId: string, domainConfig?: DomainConfig, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create domain config.  PUT /v3/domains/{domain_id}/config
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigPut: (domainId: string, domainConfig?: DomainConfig, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DomainConfigurationApi - functional programming interface
 * @export
 */
export declare const DomainConfigurationApiFp: (configuration?: Configuration) => {
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigDefaultGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfig>>;
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigDefaultHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupDefaultGet(group: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfigGroup>>;
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupDefaultHead(group: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupOptionDefaultGet(group: string, option: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfigGroupOption>>;
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupOptionDefaultHead(group: string, option: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigDelete(domainId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGet(domainId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfig>>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupDelete(domainId: string, group: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupGet(domainId: string, group: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfigGroup>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupHead(domainId: string, group: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionDelete(domainId: string, group: string, option: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionGet(domainId: string, group: string, option: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfigGroupOption>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionHead(domainId: string, group: string, option: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroupOption} [domainConfigGroupOption]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionPatch(domainId: string, group: string, option: string, domainConfigGroupOption?: DomainConfigGroupOption, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfigGroupOption>>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroup} [domainConfigGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupPatch(domainId: string, group: string, domainConfigGroup?: DomainConfigGroup, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfigGroup>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigHead(domainId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigPatch(domainId: string, domainConfig?: DomainConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfig>>;
    /**
     * Create domain config.  PUT /v3/domains/{domain_id}/config
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigPut(domainId: string, domainConfig?: DomainConfig, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainConfig>>;
};
/**
 * DomainConfigurationApi - factory interface
 * @export
 */
export declare const DomainConfigurationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigDefaultGet(options?: any): AxiosPromise<DomainConfig>;
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigDefaultHead(options?: any): AxiosPromise<void>;
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupDefaultGet(group: string, options?: any): AxiosPromise<DomainConfigGroup>;
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupDefaultHead(group: string, options?: any): AxiosPromise<void>;
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupOptionDefaultGet(group: string, option: string, options?: any): AxiosPromise<DomainConfigGroupOption>;
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsConfigGroupOptionDefaultHead(group: string, option: string, options?: any): AxiosPromise<void>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigDelete(domainId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGet(domainId: string, options?: any): AxiosPromise<DomainConfig>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupDelete(domainId: string, group: string, options?: any): AxiosPromise<void>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupGet(domainId: string, group: string, options?: any): AxiosPromise<DomainConfigGroup>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupHead(domainId: string, group: string, options?: any): AxiosPromise<void>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionDelete(domainId: string, group: string, option: string, options?: any): AxiosPromise<void>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionGet(domainId: string, group: string, option: string, options?: any): AxiosPromise<DomainConfigGroupOption>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionHead(domainId: string, group: string, option: string, options?: any): AxiosPromise<void>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroupOption} [domainConfigGroupOption]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupOptionPatch(domainId: string, group: string, option: string, domainConfigGroupOption?: DomainConfigGroupOption, options?: any): AxiosPromise<DomainConfigGroupOption>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroup} [domainConfigGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigGroupPatch(domainId: string, group: string, domainConfigGroup?: DomainConfigGroup, options?: any): AxiosPromise<DomainConfigGroup>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigHead(domainId: string, options?: any): AxiosPromise<void>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigPatch(domainId: string, domainConfig?: DomainConfig, options?: any): AxiosPromise<DomainConfig>;
    /**
     * Create domain config.  PUT /v3/domains/{domain_id}/config
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdConfigPut(domainId: string, domainConfig?: DomainConfig, options?: any): AxiosPromise<DomainConfig>;
};
/**
 * DomainConfigurationApi - object-oriented interface
 * @export
 * @class DomainConfigurationApi
 * @extends {BaseAPI}
 */
export declare class DomainConfigurationApi extends BaseAPI {
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsConfigDefaultGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfig, any>>;
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsConfigDefaultHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsConfigGroupDefaultGet(group: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfigGroup, any>>;
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsConfigGroupDefaultHead(group: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsConfigGroupOptionDefaultGet(group: string, option: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfigGroupOption, any>>;
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsConfigGroupOptionDefaultHead(group: string, option: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigDelete(domainId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGet(domainId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfig, any>>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGroupDelete(domainId: string, group: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGroupGet(domainId: string, group: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfigGroup, any>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGroupHead(domainId: string, group: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGroupOptionDelete(domainId: string, group: string, option: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGroupOptionGet(domainId: string, group: string, option: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfigGroupOption, any>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGroupOptionHead(domainId: string, group: string, option: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroupOption} [domainConfigGroupOption]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGroupOptionPatch(domainId: string, group: string, option: string, domainConfigGroupOption?: DomainConfigGroupOption, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfigGroupOption, any>>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroup} [domainConfigGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigGroupPatch(domainId: string, group: string, domainConfigGroup?: DomainConfigGroup, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfigGroup, any>>;
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigHead(domainId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigPatch(domainId: string, domainConfig?: DomainConfig, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfig, any>>;
    /**
     * Create domain config.  PUT /v3/domains/{domain_id}/config
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    domainsDomainIdConfigPut(domainId: string, domainConfig?: DomainConfig, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainConfig, any>>;
}
/**
 * DomainsApi - axios parameter creator
 * @export
 */
export declare const DomainsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Delete domain.  DELETE /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdDelete: (domainId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGet: (domainId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdHead: (domainId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update domain.  PATCH /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdPatch: (domainId: string, domain?: Domain, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} [name] Filters the response by a domain name.
     * @param {boolean} [enabled] If set to true, then only domains that are enabled will be returned, if set to false only that are disabled will be returned. Any value other than 0, including no value, will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsGet: (name?: string, enabled?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create domain.  POST /v3/domains
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsPost: (domain?: Domain, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DomainsApi - functional programming interface
 * @export
 */
export declare const DomainsApiFp: (configuration?: Configuration) => {
    /**
     * Delete domain.  DELETE /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdDelete(domainId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGet(domainId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdHead(domainId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update domain.  PATCH /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdPatch(domainId: string, domain?: Domain, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} [name] Filters the response by a domain name.
     * @param {boolean} [enabled] If set to true, then only domains that are enabled will be returned, if set to false only that are disabled will be returned. Any value other than 0, including no value, will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsGet(name?: string, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DomainsGetResponse>>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create domain.  POST /v3/domains
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsPost(domain?: Domain, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Domain>>;
};
/**
 * DomainsApi - factory interface
 * @export
 */
export declare const DomainsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Delete domain.  DELETE /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdDelete(domainId: string, options?: any): AxiosPromise<void>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGet(domainId: string, options?: any): AxiosPromise<Domain>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdHead(domainId: string, options?: any): AxiosPromise<void>;
    /**
     * Update domain.  PATCH /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdPatch(domainId: string, domain?: Domain, options?: any): AxiosPromise<Domain>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} [name] Filters the response by a domain name.
     * @param {boolean} [enabled] If set to true, then only domains that are enabled will be returned, if set to false only that are disabled will be returned. Any value other than 0, including no value, will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsGet(name?: string, enabled?: boolean, options?: any): AxiosPromise<DomainsGetResponse>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsHead(options?: any): AxiosPromise<void>;
    /**
     * Create domain.  POST /v3/domains
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsPost(domain?: Domain, options?: any): AxiosPromise<Domain>;
};
/**
 * DomainsApi - object-oriented interface
 * @export
 * @class DomainsApi
 * @extends {BaseAPI}
 */
export declare class DomainsApi extends BaseAPI {
    /**
     * Delete domain.  DELETE /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    domainsDomainIdDelete(domainId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    domainsDomainIdGet(domainId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Domain, any>>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    domainsDomainIdHead(domainId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update domain.  PATCH /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    domainsDomainIdPatch(domainId: string, domain?: Domain, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Domain, any>>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} [name] Filters the response by a domain name.
     * @param {boolean} [enabled] If set to true, then only domains that are enabled will be returned, if set to false only that are disabled will be returned. Any value other than 0, including no value, will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    domainsGet(name?: string, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DomainsGetResponse, any>>;
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    domainsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create domain.  POST /v3/domains
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    domainsPost(domain?: Domain, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Domain, any>>;
}
/**
 * Ec2tokensApi - axios parameter creator
 * @export
 */
export declare const Ec2tokensApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticate ec2 token.  POST /v3/ec2tokens
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensPost: (body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * Ec2tokensApi - functional programming interface
 * @export
 */
export declare const Ec2tokensApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Authenticate ec2 token.  POST /v3/ec2tokens
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensPost(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * Ec2tokensApi - factory interface
 * @export
 */
export declare const Ec2tokensApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensGet(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensHead(options?: any): AxiosPromise<void>;
    /**
     * Authenticate ec2 token.  POST /v3/ec2tokens
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ec2tokensPost(body?: object, options?: any): AxiosPromise<object>;
};
/**
 * Ec2tokensApi - object-oriented interface
 * @export
 * @class Ec2tokensApi
 * @extends {BaseAPI}
 */
export declare class Ec2tokensApi extends BaseAPI {
    /**
     * GET operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Ec2tokensApi
     */
    ec2tokensGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Ec2tokensApi
     */
    ec2tokensHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Authenticate ec2 token.  POST /v3/ec2tokens
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Ec2tokensApi
     */
    ec2tokensPost(body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * EndpointsApi - axios parameter creator
 * @export
 */
export declare const EndpointsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * DELETE operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdDelete: (endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdGet: (endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdHead: (endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    endpointsEndpointIdOSENDPOINTPOLICYPolicyGet: (endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdOSENDPOINTPOLICYPolicyHead: (endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdPatch: (endpointId: string, body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/endpoints
     * @param {string} [serviceId] Filters the response by a service ID.
     * @param {string} [region] Filters the response by a region ID.
     * @param {EndpointsGetInterfaceEnum} [_interface] Filters the response by an interface.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsGet: (serviceId?: string, region?: string, _interface?: EndpointsGetInterfaceEnum, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/endpoints
     * @param {Endpoint} [endpoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsPost: (endpoint?: Endpoint, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * EndpointsApi - functional programming interface
 * @export
 */
export declare const EndpointsApiFp: (configuration?: Configuration) => {
    /**
     * DELETE operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdDelete(endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdGet(endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>>;
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdHead(endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    endpointsEndpointIdOSENDPOINTPOLICYPolicyGet(endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdOSENDPOINTPOLICYPolicyHead(endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdPatch(endpointId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>>;
    /**
     * GET operation on /v3/endpoints
     * @param {string} [serviceId] Filters the response by a service ID.
     * @param {string} [region] Filters the response by a region ID.
     * @param {EndpointsGetInterfaceEnum} [_interface] Filters the response by an interface.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsGet(serviceId?: string, region?: string, _interface?: EndpointsGetInterfaceEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointsGetResponse>>;
    /**
     * HEAD operation on /v3/endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/endpoints
     * @param {Endpoint} [endpoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsPost(endpoint?: Endpoint, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>>;
};
/**
 * EndpointsApi - factory interface
 * @export
 */
export declare const EndpointsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * DELETE operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdDelete(endpointId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdGet(endpointId: string, options?: any): AxiosPromise<Endpoint>;
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdHead(endpointId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    endpointsEndpointIdOSENDPOINTPOLICYPolicyGet(endpointId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdOSENDPOINTPOLICYPolicyHead(endpointId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsEndpointIdPatch(endpointId: string, body?: object, options?: any): AxiosPromise<Endpoint>;
    /**
     * GET operation on /v3/endpoints
     * @param {string} [serviceId] Filters the response by a service ID.
     * @param {string} [region] Filters the response by a region ID.
     * @param {EndpointsGetInterfaceEnum} [_interface] Filters the response by an interface.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsGet(serviceId?: string, region?: string, _interface?: EndpointsGetInterfaceEnum, options?: any): AxiosPromise<EndpointsGetResponse>;
    /**
     * HEAD operation on /v3/endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/endpoints
     * @param {Endpoint} [endpoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    endpointsPost(endpoint?: Endpoint, options?: any): AxiosPromise<Endpoint>;
};
/**
 * EndpointsApi - object-oriented interface
 * @export
 * @class EndpointsApi
 * @extends {BaseAPI}
 */
export declare class EndpointsApi extends BaseAPI {
    /**
     * DELETE operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsEndpointIdDelete(endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsEndpointIdGet(endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Endpoint, any>>;
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsEndpointIdHead(endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsEndpointIdOSENDPOINTPOLICYPolicyGet(endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsEndpointIdOSENDPOINTPOLICYPolicyHead(endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsEndpointIdPatch(endpointId: string, body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Endpoint, any>>;
    /**
     * GET operation on /v3/endpoints
     * @param {string} [serviceId] Filters the response by a service ID.
     * @param {string} [region] Filters the response by a region ID.
     * @param {EndpointsGetInterfaceEnum} [_interface] Filters the response by an interface.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsGet(serviceId?: string, region?: string, _interface?: EndpointsGetInterfaceEnum, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<EndpointsGetResponse, any>>;
    /**
     * HEAD operation on /v3/endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/endpoints
     * @param {Endpoint} [endpoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    endpointsPost(endpoint?: Endpoint, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Endpoint, any>>;
}
/**
 * @export
 */
export declare const EndpointsGetInterfaceEnum: {
    readonly Public: "public";
    readonly Internal: "internal";
    readonly Admin: "admin";
};
export type EndpointsGetInterfaceEnum = typeof EndpointsGetInterfaceEnum[keyof typeof EndpointsGetInterfaceEnum];
/**
 * GroupsApi - axios parameter creator
 * @export
 */
export declare const GroupsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/groups
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet: (domainId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete group.  DELETE /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDelete: (groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet: (groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdHead: (groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update group.  PATCH /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPatch: (groupId: string, group?: Group, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersGet: (passwordExpiresAt?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersHead: (groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove user from group.  DELETE /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdDelete: (groupId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdGet: (groupId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdHead: (groupId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add user to group.  PUT /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdPut: (groupId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create group.  POST /groups
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost: (group?: Group, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * GroupsApi - functional programming interface
 * @export
 */
export declare const GroupsApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/groups
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(domainId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsGetResponse>>;
    /**
     * Delete group.  DELETE /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDelete(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>>;
    /**
     * HEAD operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdHead(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update group.  PATCH /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPatch(groupId: string, group?: Group, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>>;
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersGet(passwordExpiresAt?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupsUsersGetResponse>>;
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersHead(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Remove user from group.  DELETE /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdDelete(groupId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdGet(groupId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdHead(groupId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Add user to group.  PUT /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdPut(groupId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * HEAD operation on /v3/groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create group.  POST /groups
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(group?: Group, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>>;
};
/**
 * GroupsApi - factory interface
 * @export
 */
export declare const GroupsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/groups
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGet(domainId?: string, options?: any): AxiosPromise<GroupsGetResponse>;
    /**
     * Delete group.  DELETE /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdDelete(groupId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdGet(groupId: string, options?: any): AxiosPromise<Group>;
    /**
     * HEAD operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdHead(groupId: string, options?: any): AxiosPromise<void>;
    /**
     * Update group.  PATCH /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdPatch(groupId: string, group?: Group, options?: any): AxiosPromise<Group>;
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersGet(passwordExpiresAt?: string, options?: any): AxiosPromise<GroupsUsersGetResponse>;
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersHead(groupId: string, options?: any): AxiosPromise<void>;
    /**
     * Remove user from group.  DELETE /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdDelete(groupId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdGet(groupId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdHead(groupId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Add user to group.  PUT /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsGroupIdUsersUserIdPut(groupId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * HEAD operation on /v3/groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsHead(options?: any): AxiosPromise<void>;
    /**
     * Create group.  POST /groups
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    groupsPost(group?: Group, options?: any): AxiosPromise<Group>;
};
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export declare class GroupsApi extends BaseAPI {
    /**
     * GET operation on /v3/groups
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGet(domainId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupsGetResponse, any>>;
    /**
     * Delete group.  DELETE /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdDelete(groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdGet(groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Group, any>>;
    /**
     * HEAD operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdHead(groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update group.  PATCH /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdPatch(groupId: string, group?: Group, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Group, any>>;
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdUsersGet(passwordExpiresAt?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<GroupsUsersGetResponse, any>>;
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdUsersHead(groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Remove user from group.  DELETE /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdUsersUserIdDelete(groupId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdUsersUserIdGet(groupId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdUsersUserIdHead(groupId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Add user to group.  PUT /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsGroupIdUsersUserIdPut(groupId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * HEAD operation on /v3/groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create group.  POST /groups
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    groupsPost(group?: Group, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Group, any>>;
}
/**
 * LimitsApi - axios parameter creator
 * @export
 */
export declare const LimitsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdDelete: (limitId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdGet: (limitId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdHead: (limitId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdPatch: (limitId: string, body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsModelGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsModelHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/limits
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsPost: (body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LimitsApi - functional programming interface
 * @export
 */
export declare const LimitsApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * DELETE operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdDelete(limitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdGet(limitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdHead(limitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdPatch(limitId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * GET operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsModelGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsModelHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/limits
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsPost(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
};
/**
 * LimitsApi - factory interface
 * @export
 */
export declare const LimitsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsGet(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsHead(options?: any): AxiosPromise<void>;
    /**
     * DELETE operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdDelete(limitId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdGet(limitId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdHead(limitId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsLimitIdPatch(limitId: string, body?: object, options?: any): AxiosPromise<object>;
    /**
     * GET operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsModelGet(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsModelHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/limits
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    limitsPost(body?: object, options?: any): AxiosPromise<object>;
};
/**
 * LimitsApi - object-oriented interface
 * @export
 * @class LimitsApi
 * @extends {BaseAPI}
 */
export declare class LimitsApi extends BaseAPI {
    /**
     * GET operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * DELETE operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsLimitIdDelete(limitId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsLimitIdGet(limitId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsLimitIdHead(limitId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsLimitIdPatch(limitId: string, body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * GET operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsModelGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsModelHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/limits
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    limitsPost(body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
}
/**
 * OSEPFILTERApi - axios parameter creator
 * @export
 */
export declare const OSEPFILTERApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdDelete: (endpointGroupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet: (endpointGroupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead: (endpointGroupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdGet: (endpointGroupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdHead: (endpointGroupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdPatch: (endpointGroupId: string, body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet: (endpointGroupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead: (endpointGroupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete: (endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet: (endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead: (endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PUT operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut: (endpointGroupId: string, projectId: string, body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsPost: (body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointsEndpointIdProjectsGet: (endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointsEndpointIdProjectsHead: (endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointGroupsGet: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointGroupsHead: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete: (projectId: string, endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet: (projectId: string, endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead: (projectId: string, endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PUT operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut: (projectId: string, endpointId: string, body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsGet: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsHead: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSEPFILTERApi - functional programming interface
 * @export
 */
export declare const OSEPFILTERApiFp: (configuration?: Configuration) => {
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdDelete(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdGet(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdHead(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdPatch(endpointGroupId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete(endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet(endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead(endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PUT operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut(endpointGroupId: string, projectId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsPost(body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointsEndpointIdProjectsGet(endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointsEndpointIdProjectsHead(endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointGroupsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointGroupsHead(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * DELETE operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete(projectId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet(projectId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead(projectId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PUT operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut(projectId: string, endpointId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsHead(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * OSEPFILTERApi - factory interface
 * @export
 */
export declare const OSEPFILTERApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdDelete(endpointGroupId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet(endpointGroupId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead(endpointGroupId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdGet(endpointGroupId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdHead(endpointGroupId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdPatch(endpointGroupId: string, body?: object, options?: any): AxiosPromise<object>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet(endpointGroupId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead(endpointGroupId: string, options?: any): AxiosPromise<void>;
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete(endpointGroupId: string, projectId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet(endpointGroupId: string, projectId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead(endpointGroupId: string, projectId: string, options?: any): AxiosPromise<void>;
    /**
     * PUT operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut(endpointGroupId: string, projectId: string, body?: object, options?: any): AxiosPromise<object>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsGet(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointGroupsPost(body?: object, options?: any): AxiosPromise<object>;
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointsEndpointIdProjectsGet(endpointId: string, options?: any): AxiosPromise<object>;
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTEREndpointsEndpointIdProjectsHead(endpointId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointGroupsGet(projectId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointGroupsHead(projectId: string, options?: any): AxiosPromise<void>;
    /**
     * DELETE operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete(projectId: string, endpointId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet(projectId: string, endpointId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead(projectId: string, endpointId: string, options?: any): AxiosPromise<void>;
    /**
     * PUT operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut(projectId: string, endpointId: string, body?: object, options?: any): AxiosPromise<object>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsGet(projectId: string, options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSEPFILTERProjectsProjectIdEndpointsHead(projectId: string, options?: any): AxiosPromise<void>;
};
/**
 * OSEPFILTERApi - object-oriented interface
 * @export
 * @class OSEPFILTERApi
 * @extends {BaseAPI}
 */
export declare class OSEPFILTERApi extends BaseAPI {
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdDelete(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdGet(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdHead(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdPatch(endpointGroupId: string, body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead(endpointGroupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete(endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet(endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead(endpointGroupId: string, projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PUT operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut(endpointGroupId: string, projectId: string, body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointGroupsPost(body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointsEndpointIdProjectsGet(endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTEREndpointsEndpointIdProjectsHead(endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTERProjectsProjectIdEndpointGroupsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTERProjectsProjectIdEndpointGroupsHead(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * DELETE operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete(projectId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet(projectId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead(projectId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PUT operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut(projectId: string, endpointId: string, body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTERProjectsProjectIdEndpointsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    oSEPFILTERProjectsProjectIdEndpointsHead(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * OSFEDERATIONApi - axios parameter creator
 * @export
 */
export declare const OSFEDERATIONApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONDomainsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONDomainsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {boolean} [enabled] Filter for Identity Providers’ enabled attribute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersGet: (id?: string, enabled?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdDelete: (idpId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdGet: (idpId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdHead: (idpId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPatchRequest} [osFederationIdentityProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdPatch: (idpId: string, osFederationIdentityProviderPatchRequest?: OsFederationIdentityProviderPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsGet: (idpId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsHead: (idpId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet: (idpId: string, protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead: (idpId: string, protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticate from dedicated uri endpoint.  POST /OS-FEDERATION/identity_providers/      {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost: (idpId: string, protocolId: string, body?: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a protocol from an IDP.  DELETE /OS-FEDERATION/identity_providers/        {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete: (idpId: string, protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet: (idpId: string, protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead: (idpId: string, protocolId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update protocol for an IDP.  PATCH /OS-FEDERATION/identity_providers/       {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPatchRequest} [osFederationIdentityProvidersProtocolPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch: (idpId: string, protocolId: string, osFederationIdentityProvidersProtocolPatchRequest?: OsFederationIdentityProvidersProtocolPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create protocol for an IDP.  PUT /OS-Federation/identity_providers/{idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPutRequest} [osFederationIdentityProvidersProtocolPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut: (idpId: string, protocolId: string, osFederationIdentityProvidersProtocolPutRequest?: OsFederationIdentityProvidersProtocolPutRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an idp resource for federated authentication.  PUT /OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPutRequest} [osFederationIdentityProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdPut: (idpId: string, osFederationIdentityProviderPutRequest?: OsFederationIdentityProviderPutRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a mapping.  DELETE /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdDelete: (mappingId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdGet: (mappingId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdHead: (mappingId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update an attribute mapping for identity federation.  PATCH /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPatchRequest} [osFederationMappingPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdPatch: (mappingId: string, osFederationMappingPatchRequest?: OsFederationMappingPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a mapping.  PUT /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPutRequest} [osFederationMappingPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdPut: (mappingId: string, osFederationMappingPutRequest?: OsFederationMappingPutRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONProjectsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONProjectsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONSaml2MetadataGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONSaml2MetadataHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a service provider.  DELETE /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdDelete: (spId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdGet: (spId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdHead: (spId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a service provider.  PATCH /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPatchRequest} [osFederationServiceProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdPatch: (spId: string, osFederationServiceProviderPatchRequest?: OsFederationServiceProviderPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a service provider.  PUT /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPutRequest} [osFederationServiceProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdPut: (spId: string, osFederationServiceProviderPutRequest?: OsFederationServiceProviderPutRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSFEDERATIONApi - functional programming interface
 * @export
 */
export declare const OSFEDERATIONApiFp: (configuration?: Configuration) => {
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONDomainsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationDomainsGetResponse>>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONDomainsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {boolean} [enabled] Filter for Identity Providers’ enabled attribute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersGet(id?: string, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProvidersGetResponse>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * DELETE operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdDelete(idpId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdGet(idpId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProviderGetResponse>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdHead(idpId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPatchRequest} [osFederationIdentityProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdPatch(idpId: string, osFederationIdentityProviderPatchRequest?: OsFederationIdentityProviderPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProviderPatchResponse>>;
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsGet(idpId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProvidersProtocolsGetResponse>>;
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsHead(idpId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProvidersProtocolsAuthGetResponse>>;
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Authenticate from dedicated uri endpoint.  POST /OS-FEDERATION/identity_providers/      {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost(idpId: string, protocolId: string, body?: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProvidersProtocolsAuthPostResponse>>;
    /**
     * Delete a protocol from an IDP.  DELETE /OS-FEDERATION/identity_providers/        {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProvidersProtocolGetResponse>>;
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update protocol for an IDP.  PATCH /OS-FEDERATION/identity_providers/       {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPatchRequest} [osFederationIdentityProvidersProtocolPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch(idpId: string, protocolId: string, osFederationIdentityProvidersProtocolPatchRequest?: OsFederationIdentityProvidersProtocolPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProvidersProtocolPatchResponse>>;
    /**
     * Create protocol for an IDP.  PUT /OS-Federation/identity_providers/{idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPutRequest} [osFederationIdentityProvidersProtocolPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut(idpId: string, protocolId: string, osFederationIdentityProvidersProtocolPutRequest?: OsFederationIdentityProvidersProtocolPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProvidersProtocolPutResponse>>;
    /**
     * Create an idp resource for federated authentication.  PUT /OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPutRequest} [osFederationIdentityProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdPut(idpId: string, osFederationIdentityProviderPutRequest?: OsFederationIdentityProviderPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationIdentityProviderPutResponse>>;
    /**
     * GET operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationMappingsGetResponse>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a mapping.  DELETE /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdDelete(mappingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdGet(mappingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationMappingGetResponse>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdHead(mappingId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update an attribute mapping for identity federation.  PATCH /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPatchRequest} [osFederationMappingPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdPatch(mappingId: string, osFederationMappingPatchRequest?: OsFederationMappingPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationMappingPatchResponse>>;
    /**
     * Create a mapping.  PUT /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPutRequest} [osFederationMappingPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdPut(mappingId: string, osFederationMappingPutRequest?: OsFederationMappingPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationMappingPutResponse>>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONProjectsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationProjectsGetResponse>>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONProjectsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONSaml2MetadataGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONSaml2MetadataHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationServiceProvidersGetResponse>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete a service provider.  DELETE /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdDelete(spId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdGet(spId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationServiceProviderGetResponse>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdHead(spId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a service provider.  PATCH /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPatchRequest} [osFederationServiceProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdPatch(spId: string, osFederationServiceProviderPatchRequest?: OsFederationServiceProviderPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationServiceProviderPatchResponse>>;
    /**
     * Create a service provider.  PUT /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPutRequest} [osFederationServiceProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdPut(spId: string, osFederationServiceProviderPutRequest?: OsFederationServiceProviderPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsFederationServiceProviderPutResponse>>;
};
/**
 * OSFEDERATIONApi - factory interface
 * @export
 */
export declare const OSFEDERATIONApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONDomainsGet(options?: any): AxiosPromise<OsFederationDomainsGetResponse>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONDomainsHead(options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {boolean} [enabled] Filter for Identity Providers’ enabled attribute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersGet(id?: string, enabled?: boolean, options?: any): AxiosPromise<OsFederationIdentityProvidersGetResponse>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersHead(options?: any): AxiosPromise<void>;
    /**
     * DELETE operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdDelete(idpId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdGet(idpId: string, options?: any): AxiosPromise<OsFederationIdentityProviderGetResponse>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdHead(idpId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPatchRequest} [osFederationIdentityProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdPatch(idpId: string, osFederationIdentityProviderPatchRequest?: OsFederationIdentityProviderPatchRequest, options?: any): AxiosPromise<OsFederationIdentityProviderPatchResponse>;
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsGet(idpId: string, options?: any): AxiosPromise<OsFederationIdentityProvidersProtocolsGetResponse>;
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsHead(idpId: string, options?: any): AxiosPromise<void>;
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet(idpId: string, protocolId: string, options?: any): AxiosPromise<OsFederationIdentityProvidersProtocolsAuthGetResponse>;
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead(idpId: string, protocolId: string, options?: any): AxiosPromise<void>;
    /**
     * Authenticate from dedicated uri endpoint.  POST /OS-FEDERATION/identity_providers/      {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost(idpId: string, protocolId: string, body?: object, options?: any): AxiosPromise<OsFederationIdentityProvidersProtocolsAuthPostResponse>;
    /**
     * Delete a protocol from an IDP.  DELETE /OS-FEDERATION/identity_providers/        {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete(idpId: string, protocolId: string, options?: any): AxiosPromise<void>;
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet(idpId: string, protocolId: string, options?: any): AxiosPromise<OsFederationIdentityProvidersProtocolGetResponse>;
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead(idpId: string, protocolId: string, options?: any): AxiosPromise<void>;
    /**
     * Update protocol for an IDP.  PATCH /OS-FEDERATION/identity_providers/       {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPatchRequest} [osFederationIdentityProvidersProtocolPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch(idpId: string, protocolId: string, osFederationIdentityProvidersProtocolPatchRequest?: OsFederationIdentityProvidersProtocolPatchRequest, options?: any): AxiosPromise<OsFederationIdentityProvidersProtocolPatchResponse>;
    /**
     * Create protocol for an IDP.  PUT /OS-Federation/identity_providers/{idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPutRequest} [osFederationIdentityProvidersProtocolPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut(idpId: string, protocolId: string, osFederationIdentityProvidersProtocolPutRequest?: OsFederationIdentityProvidersProtocolPutRequest, options?: any): AxiosPromise<OsFederationIdentityProvidersProtocolPutResponse>;
    /**
     * Create an idp resource for federated authentication.  PUT /OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPutRequest} [osFederationIdentityProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONIdentityProvidersIdpIdPut(idpId: string, osFederationIdentityProviderPutRequest?: OsFederationIdentityProviderPutRequest, options?: any): AxiosPromise<OsFederationIdentityProviderPutResponse>;
    /**
     * GET operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsGet(options?: any): AxiosPromise<OsFederationMappingsGetResponse>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsHead(options?: any): AxiosPromise<void>;
    /**
     * Delete a mapping.  DELETE /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdDelete(mappingId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdGet(mappingId: string, options?: any): AxiosPromise<OsFederationMappingGetResponse>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdHead(mappingId: string, options?: any): AxiosPromise<void>;
    /**
     * Update an attribute mapping for identity federation.  PATCH /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPatchRequest} [osFederationMappingPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdPatch(mappingId: string, osFederationMappingPatchRequest?: OsFederationMappingPatchRequest, options?: any): AxiosPromise<OsFederationMappingPatchResponse>;
    /**
     * Create a mapping.  PUT /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPutRequest} [osFederationMappingPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONMappingsMappingIdPut(mappingId: string, osFederationMappingPutRequest?: OsFederationMappingPutRequest, options?: any): AxiosPromise<OsFederationMappingPutResponse>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONProjectsGet(options?: any): AxiosPromise<OsFederationProjectsGetResponse>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    oSFEDERATIONProjectsHead(options?: any): AxiosPromise<void>;
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONSaml2MetadataGet(options?: any): AxiosPromise<string>;
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONSaml2MetadataHead(options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersGet(options?: any): AxiosPromise<OsFederationServiceProvidersGetResponse>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersHead(options?: any): AxiosPromise<void>;
    /**
     * Delete a service provider.  DELETE /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdDelete(spId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdGet(spId: string, options?: any): AxiosPromise<OsFederationServiceProviderGetResponse>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdHead(spId: string, options?: any): AxiosPromise<void>;
    /**
     * Update a service provider.  PATCH /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPatchRequest} [osFederationServiceProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdPatch(spId: string, osFederationServiceProviderPatchRequest?: OsFederationServiceProviderPatchRequest, options?: any): AxiosPromise<OsFederationServiceProviderPatchResponse>;
    /**
     * Create a service provider.  PUT /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPutRequest} [osFederationServiceProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSFEDERATIONServiceProvidersSpIdPut(spId: string, osFederationServiceProviderPutRequest?: OsFederationServiceProviderPutRequest, options?: any): AxiosPromise<OsFederationServiceProviderPutResponse>;
};
/**
 * OSFEDERATIONApi - object-oriented interface
 * @export
 * @class OSFEDERATIONApi
 * @extends {BaseAPI}
 */
export declare class OSFEDERATIONApi extends BaseAPI {
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONDomainsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationDomainsGetResponse, any>>;
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONDomainsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {boolean} [enabled] Filter for Identity Providers’ enabled attribute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersGet(id?: string, enabled?: boolean, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProvidersGetResponse, any>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * DELETE operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdDelete(idpId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdGet(idpId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProviderGetResponse, any>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdHead(idpId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPatchRequest} [osFederationIdentityProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdPatch(idpId: string, osFederationIdentityProviderPatchRequest?: OsFederationIdentityProviderPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProviderPatchResponse, any>>;
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsGet(idpId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProvidersProtocolsGetResponse, any>>;
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsHead(idpId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProvidersProtocolsAuthGetResponse, any>>;
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Authenticate from dedicated uri endpoint.  POST /OS-FEDERATION/identity_providers/      {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost(idpId: string, protocolId: string, body?: object, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProvidersProtocolsAuthPostResponse, any>>;
    /**
     * Delete a protocol from an IDP.  DELETE /OS-FEDERATION/identity_providers/        {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProvidersProtocolGetResponse, any>>;
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead(idpId: string, protocolId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update protocol for an IDP.  PATCH /OS-FEDERATION/identity_providers/       {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPatchRequest} [osFederationIdentityProvidersProtocolPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch(idpId: string, protocolId: string, osFederationIdentityProvidersProtocolPatchRequest?: OsFederationIdentityProvidersProtocolPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProvidersProtocolPatchResponse, any>>;
    /**
     * Create protocol for an IDP.  PUT /OS-Federation/identity_providers/{idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPutRequest} [osFederationIdentityProvidersProtocolPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut(idpId: string, protocolId: string, osFederationIdentityProvidersProtocolPutRequest?: OsFederationIdentityProvidersProtocolPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProvidersProtocolPutResponse, any>>;
    /**
     * Create an idp resource for federated authentication.  PUT /OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPutRequest} [osFederationIdentityProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONIdentityProvidersIdpIdPut(idpId: string, osFederationIdentityProviderPutRequest?: OsFederationIdentityProviderPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationIdentityProviderPutResponse, any>>;
    /**
     * GET operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONMappingsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationMappingsGetResponse, any>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONMappingsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a mapping.  DELETE /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONMappingsMappingIdDelete(mappingId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONMappingsMappingIdGet(mappingId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationMappingGetResponse, any>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONMappingsMappingIdHead(mappingId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update an attribute mapping for identity federation.  PATCH /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPatchRequest} [osFederationMappingPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONMappingsMappingIdPatch(mappingId: string, osFederationMappingPatchRequest?: OsFederationMappingPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationMappingPatchResponse, any>>;
    /**
     * Create a mapping.  PUT /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPutRequest} [osFederationMappingPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONMappingsMappingIdPut(mappingId: string, osFederationMappingPutRequest?: OsFederationMappingPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationMappingPutResponse, any>>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONProjectsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationProjectsGetResponse, any>>;
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONProjectsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONSaml2MetadataGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONSaml2MetadataHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONServiceProvidersGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationServiceProvidersGetResponse, any>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONServiceProvidersHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete a service provider.  DELETE /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONServiceProvidersSpIdDelete(spId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONServiceProvidersSpIdGet(spId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationServiceProviderGetResponse, any>>;
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONServiceProvidersSpIdHead(spId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a service provider.  PATCH /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPatchRequest} [osFederationServiceProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONServiceProvidersSpIdPatch(spId: string, osFederationServiceProviderPatchRequest?: OsFederationServiceProviderPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationServiceProviderPatchResponse, any>>;
    /**
     * Create a service provider.  PUT /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPutRequest} [osFederationServiceProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    oSFEDERATIONServiceProvidersSpIdPut(spId: string, osFederationServiceProviderPutRequest?: OsFederationServiceProviderPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OsFederationServiceProviderPutResponse, any>>;
}
/**
 * OSINHERITApi - axios parameter creator
 * @export
 */
export declare const OSINHERITApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet: (domainId: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead: (domainId: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke an inherited grant for a group on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete: (domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet: (domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead: (domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an inherited grant for a group on a domain.  PUT /OS-INHERIT/domains/{domain_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut: (domainId: string, groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet: (domainId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead: (domainId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke a grant from a user on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles        /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete: (domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet: (domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead: (domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an inherited grant for a user on a domain.  PUT /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}     /inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut: (domainId: string, userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke an inherited grant for a group on a project.  DELETE /OS-INHERIT/projects/{project_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete: (projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet: (projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead: (projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an inherited grant for a group on a project.  PUT /OS-INHERIT/projects/{project_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut: (projectId: string, groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke an inherited grant for a user on a project.  DELETE /OS-INHERIT/projects/{project_id}/users/{user_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete: (projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet: (projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead: (projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create an inherited grant for a user on a project.  PUT /OS-INHERIT/projects/{project_id}/users/{user_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut: (projectId: string, userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSINHERITApi - functional programming interface
 * @export
 */
export declare const OSINHERITApiFp: (configuration?: Configuration) => {
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet(domainId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead(domainId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke an inherited grant for a group on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create an inherited grant for a group on a domain.  PUT /OS-INHERIT/domains/{domain_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(domainId: string, groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet(domainId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead(domainId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke a grant from a user on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles        /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create an inherited grant for a user on a domain.  PUT /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}     /inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut(domainId: string, userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Revoke an inherited grant for a group on a project.  DELETE /OS-INHERIT/projects/{project_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create an inherited grant for a group on a project.  PUT /OS-INHERIT/projects/{project_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(projectId: string, groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Revoke an inherited grant for a user on a project.  DELETE /OS-INHERIT/projects/{project_id}/users/{user_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create an inherited grant for a user on a project.  PUT /OS-INHERIT/projects/{project_id}/users/{user_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut(projectId: string, userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * OSINHERITApi - factory interface
 * @export
 */
export declare const OSINHERITApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet(domainId: string, groupId: string, options?: any): AxiosPromise<any>;
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead(domainId: string, groupId: string, options?: any): AxiosPromise<void>;
    /**
     * Revoke an inherited grant for a group on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(domainId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(domainId: string, groupId: string, roleId: string, options?: any): AxiosPromise<any>;
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(domainId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Create an inherited grant for a group on a domain.  PUT /OS-INHERIT/domains/{domain_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(domainId: string, groupId: string, roleId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet(domainId: string, userId: string, options?: any): AxiosPromise<any>;
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead(domainId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Revoke a grant from a user on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles        /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(domainId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet(domainId: string, userId: string, roleId: string, options?: any): AxiosPromise<any>;
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead(domainId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Create an inherited grant for a user on a domain.  PUT /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}     /inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut(domainId: string, userId: string, roleId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * Revoke an inherited grant for a group on a project.  DELETE /OS-INHERIT/projects/{project_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(projectId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(projectId: string, groupId: string, roleId: string, options?: any): AxiosPromise<any>;
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(projectId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Create an inherited grant for a group on a project.  PUT /OS-INHERIT/projects/{project_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(projectId: string, groupId: string, roleId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * Revoke an inherited grant for a user on a project.  DELETE /OS-INHERIT/projects/{project_id}/users/{user_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(projectId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet(projectId: string, userId: string, roleId: string, options?: any): AxiosPromise<any>;
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead(projectId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Create an inherited grant for a user on a project.  PUT /OS-INHERIT/projects/{project_id}/users/{user_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut(projectId: string, userId: string, roleId: string, body?: any, options?: any): AxiosPromise<any>;
};
/**
 * OSINHERITApi - object-oriented interface
 * @export
 * @class OSINHERITApi
 * @extends {BaseAPI}
 */
export declare class OSINHERITApi extends BaseAPI {
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet(domainId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead(domainId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke an inherited grant for a group on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create an inherited grant for a group on a domain.  PUT /OS-INHERIT/domains/{domain_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(domainId: string, groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet(domainId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead(domainId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke a grant from a user on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles        /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create an inherited grant for a user on a domain.  PUT /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}     /inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut(domainId: string, userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Revoke an inherited grant for a group on a project.  DELETE /OS-INHERIT/projects/{project_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create an inherited grant for a group on a project.  PUT /OS-INHERIT/projects/{project_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(projectId: string, groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Revoke an inherited grant for a user on a project.  DELETE /OS-INHERIT/projects/{project_id}/users/{user_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create an inherited grant for a user on a project.  PUT /OS-INHERIT/projects/{project_id}/users/{user_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut(projectId: string, userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * OSOAUTH1Api - axios parameter creator
 * @export
 */
export declare const OSOAUTH1ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/OS-OAUTH1/access_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenPost: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PUT operation on /v3/OS-OAUTH1/authorize/{request_token_id}
     * @param {string} requestTokenId request_token_id parameter for /v3/OS-OAUTH1/authorize/{request_token_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AuthorizeRequestTokenIdPut: (requestTokenId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdDelete: (consumerId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdGet: (consumerId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdHead: (consumerId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdPatch: (consumerId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/OS-OAUTH1/consumers
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersPost: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/OS-OAUTH1/request_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenPost: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSOAUTH1Api - functional programming interface
 * @export
 */
export declare const OSOAUTH1ApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/OS-OAUTH1/access_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * PUT operation on /v3/OS-OAUTH1/authorize/{request_token_id}
     * @param {string} requestTokenId request_token_id parameter for /v3/OS-OAUTH1/authorize/{request_token_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AuthorizeRequestTokenIdPut(requestTokenId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * DELETE operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdDelete(consumerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdGet(consumerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdHead(consumerId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdPatch(consumerId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * GET operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/OS-OAUTH1/consumers
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * GET operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/OS-OAUTH1/request_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * OSOAUTH1Api - factory interface
 * @export
 */
export declare const OSOAUTH1ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/OS-OAUTH1/access_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AccessTokenPost(body?: any, options?: any): AxiosPromise<any>;
    /**
     * PUT operation on /v3/OS-OAUTH1/authorize/{request_token_id}
     * @param {string} requestTokenId request_token_id parameter for /v3/OS-OAUTH1/authorize/{request_token_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1AuthorizeRequestTokenIdPut(requestTokenId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * DELETE operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdDelete(consumerId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdGet(consumerId: string, options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdHead(consumerId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersConsumerIdPatch(consumerId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * GET operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/OS-OAUTH1/consumers
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1ConsumersPost(body?: any, options?: any): AxiosPromise<any>;
    /**
     * GET operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/OS-OAUTH1/request_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH1RequestTokenPost(body?: any, options?: any): AxiosPromise<any>;
};
/**
 * OSOAUTH1Api - object-oriented interface
 * @export
 * @class OSOAUTH1Api
 * @extends {BaseAPI}
 */
export declare class OSOAUTH1Api extends BaseAPI {
    /**
     * GET operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1AccessTokenGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1AccessTokenHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/OS-OAUTH1/access_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1AccessTokenPost(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * PUT operation on /v3/OS-OAUTH1/authorize/{request_token_id}
     * @param {string} requestTokenId request_token_id parameter for /v3/OS-OAUTH1/authorize/{request_token_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1AuthorizeRequestTokenIdPut(requestTokenId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * DELETE operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1ConsumersConsumerIdDelete(consumerId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1ConsumersConsumerIdGet(consumerId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1ConsumersConsumerIdHead(consumerId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1ConsumersConsumerIdPatch(consumerId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * GET operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1ConsumersGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1ConsumersHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/OS-OAUTH1/consumers
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1ConsumersPost(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * GET operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1RequestTokenGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1RequestTokenHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/OS-OAUTH1/request_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    oSOAUTH1RequestTokenPost(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * OSOAUTH2Api - axios parameter creator
 * @export
 */
export declare const OSOAUTH2ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenDelete: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPatch: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get an OAuth2.0 Access Token.  POST /v3/OS-OAUTH2/token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPost: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPut: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSOAUTH2Api - functional programming interface
 * @export
 */
export declare const OSOAUTH2ApiFp: (configuration?: Configuration) => {
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPatch(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get an OAuth2.0 Access Token.  POST /v3/OS-OAUTH2/token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPut(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * OSOAUTH2Api - factory interface
 * @export
 */
export declare const OSOAUTH2ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenDelete(options?: any): AxiosPromise<void>;
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenGet(options?: any): AxiosPromise<any>;
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenHead(options?: any): AxiosPromise<void>;
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPatch(body?: any, options?: any): AxiosPromise<any>;
    /**
     * Get an OAuth2.0 Access Token.  POST /v3/OS-OAUTH2/token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPost(body?: any, options?: any): AxiosPromise<any>;
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSOAUTH2TokenPut(body?: any, options?: any): AxiosPromise<any>;
};
/**
 * OSOAUTH2Api - object-oriented interface
 * @export
 * @class OSOAUTH2Api
 * @extends {BaseAPI}
 */
export declare class OSOAUTH2Api extends BaseAPI {
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    oSOAUTH2TokenDelete(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    oSOAUTH2TokenGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    oSOAUTH2TokenHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    oSOAUTH2TokenPatch(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get an OAuth2.0 Access Token.  POST /v3/OS-OAUTH2/token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    oSOAUTH2TokenPost(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    oSOAUTH2TokenPut(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * OSREVOKEApi - axios parameter creator
 * @export
 */
export declare const OSREVOKEApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSREVOKEEventsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSREVOKEEventsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSREVOKEApi - functional programming interface
 * @export
 */
export declare const OSREVOKEApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSREVOKEEventsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSREVOKEEventsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * OSREVOKEApi - factory interface
 * @export
 */
export declare const OSREVOKEApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSREVOKEEventsGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSREVOKEEventsHead(options?: any): AxiosPromise<void>;
};
/**
 * OSREVOKEApi - object-oriented interface
 * @export
 * @class OSREVOKEApi
 * @extends {BaseAPI}
 */
export declare class OSREVOKEApi extends BaseAPI {
    /**
     * GET operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSREVOKEApi
     */
    oSREVOKEEventsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSREVOKEApi
     */
    oSREVOKEEventsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * OSSIMPLECERTApi - axios parameter creator
 * @export
 */
export declare const OSSIMPLECERTApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCaGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCaHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCertificatesGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCertificatesHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSSIMPLECERTApi - functional programming interface
 * @export
 */
export declare const OSSIMPLECERTApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCaGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCaHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCertificatesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCertificatesHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * OSSIMPLECERTApi - factory interface
 * @export
 */
export declare const OSSIMPLECERTApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCaGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCaHead(options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCertificatesGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSSIMPLECERTCertificatesHead(options?: any): AxiosPromise<void>;
};
/**
 * OSSIMPLECERTApi - object-oriented interface
 * @export
 * @class OSSIMPLECERTApi
 * @extends {BaseAPI}
 */
export declare class OSSIMPLECERTApi extends BaseAPI {
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSIMPLECERTApi
     */
    oSSIMPLECERTCaGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSIMPLECERTApi
     */
    oSSIMPLECERTCaHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSIMPLECERTApi
     */
    oSSIMPLECERTCertificatesGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSIMPLECERTApi
     */
    oSSIMPLECERTCertificatesHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * OSTRUSTApi - axios parameter creator
 * @export
 */
export declare const OSTRUSTApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a new trust.  The User creating the trust must be the trustor.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsPost: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/OS-TRUST/trusts/{trust_id}
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdDelete: (trustId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdGet: (trustId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdHead: (trustId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesGet: (trustId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesHead: (trustId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesRoleIdGet: (trustId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesRoleIdHead: (trustId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OSTRUSTApi - functional programming interface
 * @export
 */
export declare const OSTRUSTApiFp: (configuration?: Configuration) => {
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a new trust.  The User creating the trust must be the trustor.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * DELETE operation on /v3/OS-TRUST/trusts/{trust_id}
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdDelete(trustId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdGet(trustId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdHead(trustId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesGet(trustId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesHead(trustId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesRoleIdGet(trustId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesRoleIdHead(trustId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * OSTRUSTApi - factory interface
 * @export
 */
export declare const OSTRUSTApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsGet(options?: any): AxiosPromise<any>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsHead(options?: any): AxiosPromise<void>;
    /**
     * Create a new trust.  The User creating the trust must be the trustor.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsPost(body?: any, options?: any): AxiosPromise<any>;
    /**
     * DELETE operation on /v3/OS-TRUST/trusts/{trust_id}
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdDelete(trustId: string, options?: any): AxiosPromise<void>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdGet(trustId: string, options?: any): AxiosPromise<any>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdHead(trustId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesGet(trustId: string, options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesHead(trustId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesRoleIdGet(trustId: string, roleId: string, options?: any): AxiosPromise<any>;
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    oSTRUSTTrustsTrustIdRolesRoleIdHead(trustId: string, roleId: string, options?: any): AxiosPromise<void>;
};
/**
 * OSTRUSTApi - object-oriented interface
 * @export
 * @class OSTRUSTApi
 * @extends {BaseAPI}
 */
export declare class OSTRUSTApi extends BaseAPI {
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a new trust.  The User creating the trust must be the trustor.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsPost(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * DELETE operation on /v3/OS-TRUST/trusts/{trust_id}
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsTrustIdDelete(trustId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsTrustIdGet(trustId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsTrustIdHead(trustId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsTrustIdRolesGet(trustId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsTrustIdRolesHead(trustId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsTrustIdRolesRoleIdGet(trustId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    oSTRUSTTrustsTrustIdRolesRoleIdHead(trustId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PoliciesApi - axios parameter creator
 * @export
 */
export declare const PoliciesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdDelete: (policyId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdGet: (policyId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdHead: (policyId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete: (policyId: string, endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet: (policyId: string, endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead: (policyId: string, endpointId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut: (policyId: string, endpointId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsGet: (policyId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsHead: (policyId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete: (policyId: string, serviceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet: (policyId: string, serviceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead: (policyId: string, serviceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut: (policyId: string, serviceId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete: (policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet: (policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead: (policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut: (policyId: string, serviceId: string, regionId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPatch: (policyId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/policies
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPost: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PoliciesApi - functional programming interface
 * @export
 */
export declare const PoliciesApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * DELETE operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdDelete(policyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdGet(policyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdHead(policyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete(policyId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet(policyId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead(policyId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut(policyId: string, endpointId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsGet(policyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsHead(policyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete(policyId: string, serviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet(policyId: string, serviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead(policyId: string, serviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut(policyId: string, serviceId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete(policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet(policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead(policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut(policyId: string, serviceId: string, regionId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * PATCH operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPatch(policyId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * POST operation on /v3/policies
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * PoliciesApi - factory interface
 * @export
 */
export declare const PoliciesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesHead(options?: any): AxiosPromise<void>;
    /**
     * DELETE operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdDelete(policyId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdGet(policyId: string, options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdHead(policyId: string, options?: any): AxiosPromise<void>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete(policyId: string, endpointId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet(policyId: string, endpointId: string, options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead(policyId: string, endpointId: string, options?: any): AxiosPromise<void>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut(policyId: string, endpointId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsGet(policyId: string, options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsHead(policyId: string, options?: any): AxiosPromise<void>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete(policyId: string, serviceId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet(policyId: string, serviceId: string, options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead(policyId: string, serviceId: string, options?: any): AxiosPromise<void>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut(policyId: string, serviceId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete(policyId: string, serviceId: string, regionId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet(policyId: string, serviceId: string, regionId: string, options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead(policyId: string, serviceId: string, regionId: string, options?: any): AxiosPromise<void>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut(policyId: string, serviceId: string, regionId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * PATCH operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPolicyIdPatch(policyId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * POST operation on /v3/policies
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    policiesPost(body?: any, options?: any): AxiosPromise<any>;
};
/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
export declare class PoliciesApi extends BaseAPI {
    /**
     * GET operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * DELETE operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdDelete(policyId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdGet(policyId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdHead(policyId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete(policyId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet(policyId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead(policyId: string, endpointId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut(policyId: string, endpointId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsGet(policyId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYEndpointsHead(policyId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete(policyId: string, serviceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet(policyId: string, serviceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead(policyId: string, serviceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut(policyId: string, serviceId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete(policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet(policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead(policyId: string, serviceId: string, regionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut(policyId: string, serviceId: string, regionId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * PATCH operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPolicyIdPatch(policyId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * POST operation on /v3/policies
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    policiesPost(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
export declare const ProjectsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {boolean} [isDomain] If this is specified as true, then only projects acting as a domain are included. Otherwise, only projects that are not acting as a domain are included.
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [parentId] Filters the response by a parent ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsGet: (domainId?: string, enabled?: boolean, isDomain?: boolean, name?: string, parentId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create project.  POST /v3/projects
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsPost: (project?: Project, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete project.  DELETE /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdDelete: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGet: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesGet: (projectId: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesHead: (projectId: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete grant of role for group on project.  DELETE /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdDelete: (projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdGet: (projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdHead: (projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Grant role for group on project.  PUT /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdPut: (projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdHead: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update project.  PATCH /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdPatch: (projectId: string, project?: Project, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete all tags associated with a given project.  DELETE /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsDelete: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsGet: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsHead: (projectId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update all tags associated with a given project.  PUT /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsPut: (projectId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a single tag from a project.  /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueDelete: (projectId: string, value: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueGet: (projectId: string, value: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueHead: (projectId: string, value: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add a single tag to a project.  PUT /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValuePut: (projectId: string, value: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesGet: (projectId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesHead: (projectId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete grant of role for user on project.  DELETE /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdDelete: (projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdGet: (projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdHead: (projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Grant role for user on project.  PUT /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdPut: (projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ProjectsApi - functional programming interface
 * @export
 */
export declare const ProjectsApiFp: (configuration?: Configuration) => {
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {boolean} [isDomain] If this is specified as true, then only projects acting as a domain are included. Otherwise, only projects that are not acting as a domain are included.
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [parentId] Filters the response by a parent ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsGet(domainId?: string, enabled?: boolean, isDomain?: boolean, name?: string, parentId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsGetResponse>>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create project.  POST /v3/projects
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsPost(project?: Project, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     * Delete project.  DELETE /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdDelete(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesGet(projectId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesInfos>>;
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesHead(projectId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete grant of role for group on project.  DELETE /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdDelete(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdGet(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdHead(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Grant role for group on project.  PUT /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdPut(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdHead(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update project.  PATCH /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdPatch(projectId: string, project?: Project, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>>;
    /**
     * Delete all tags associated with a given project.  DELETE /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsDelete(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsTagsGetResponse>>;
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsHead(projectId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update all tags associated with a given project.  PUT /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsPut(projectId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectsTagsPutResponse>>;
    /**
     * Delete a single tag from a project.  /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueDelete(projectId: string, value: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueGet(projectId: string, value: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueHead(projectId: string, value: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Add a single tag to a project.  PUT /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValuePut(projectId: string, value: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesGet(projectId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesInfos>>;
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesHead(projectId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete grant of role for user on project.  DELETE /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdDelete(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdGet(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdHead(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Grant role for user on project.  PUT /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdPut(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ProjectsApi - factory interface
 * @export
 */
export declare const ProjectsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {boolean} [isDomain] If this is specified as true, then only projects acting as a domain are included. Otherwise, only projects that are not acting as a domain are included.
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [parentId] Filters the response by a parent ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsGet(domainId?: string, enabled?: boolean, isDomain?: boolean, name?: string, parentId?: string, options?: any): AxiosPromise<ProjectsGetResponse>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsHead(options?: any): AxiosPromise<void>;
    /**
     * Create project.  POST /v3/projects
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsPost(project?: Project, options?: any): AxiosPromise<Project>;
    /**
     * Delete project.  DELETE /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdDelete(projectId: string, options?: any): AxiosPromise<void>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGet(projectId: string, options?: any): AxiosPromise<Project>;
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesGet(projectId: string, groupId: string, options?: any): AxiosPromise<RolesInfos>;
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesHead(projectId: string, groupId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete grant of role for group on project.  DELETE /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdDelete(projectId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdGet(projectId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdHead(projectId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Grant role for group on project.  PUT /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdPut(projectId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdHead(projectId: string, options?: any): AxiosPromise<void>;
    /**
     * Update project.  PATCH /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdPatch(projectId: string, project?: Project, options?: any): AxiosPromise<Project>;
    /**
     * Delete all tags associated with a given project.  DELETE /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsDelete(projectId: string, options?: any): AxiosPromise<void>;
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsGet(projectId: string, options?: any): AxiosPromise<ProjectsTagsGetResponse>;
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsHead(projectId: string, options?: any): AxiosPromise<void>;
    /**
     * Update all tags associated with a given project.  PUT /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsPut(projectId: string, body?: any, options?: any): AxiosPromise<ProjectsTagsPutResponse>;
    /**
     * Delete a single tag from a project.  /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueDelete(projectId: string, value: string, options?: any): AxiosPromise<void>;
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueGet(projectId: string, value: string, options?: any): AxiosPromise<void>;
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValueHead(projectId: string, value: string, options?: any): AxiosPromise<void>;
    /**
     * Add a single tag to a project.  PUT /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdTagsValuePut(projectId: string, value: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesGet(projectId: string, userId: string, options?: any): AxiosPromise<RolesInfos>;
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesHead(projectId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete grant of role for user on project.  DELETE /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdDelete(projectId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdGet(projectId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdHead(projectId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Grant role for user on project.  PUT /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    projectsProjectIdUsersUserIdRolesRoleIdPut(projectId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
};
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
export declare class ProjectsApi extends BaseAPI {
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {boolean} [isDomain] If this is specified as true, then only projects acting as a domain are included. Otherwise, only projects that are not acting as a domain are included.
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [parentId] Filters the response by a parent ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsGet(domainId?: string, enabled?: boolean, isDomain?: boolean, name?: string, parentId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectsGetResponse, any>>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create project.  POST /v3/projects
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsPost(project?: Project, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Project, any>>;
    /**
     * Delete project.  DELETE /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdDelete(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdGet(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Project, any>>;
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdGroupsGroupIdRolesGet(projectId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RolesInfos, any>>;
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdGroupsGroupIdRolesHead(projectId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete grant of role for group on project.  DELETE /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdDelete(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdGet(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdHead(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Grant role for group on project.  PUT /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdGroupsGroupIdRolesRoleIdPut(projectId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdHead(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update project.  PATCH /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdPatch(projectId: string, project?: Project, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Project, any>>;
    /**
     * Delete all tags associated with a given project.  DELETE /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdTagsDelete(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdTagsGet(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectsTagsGetResponse, any>>;
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdTagsHead(projectId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update all tags associated with a given project.  PUT /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdTagsPut(projectId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ProjectsTagsPutResponse, any>>;
    /**
     * Delete a single tag from a project.  /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdTagsValueDelete(projectId: string, value: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdTagsValueGet(projectId: string, value: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdTagsValueHead(projectId: string, value: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Add a single tag to a project.  PUT /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdTagsValuePut(projectId: string, value: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdUsersUserIdRolesGet(projectId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RolesInfos, any>>;
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdUsersUserIdRolesHead(projectId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete grant of role for user on project.  DELETE /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdUsersUserIdRolesRoleIdDelete(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdUsersUserIdRolesRoleIdGet(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdUsersUserIdRolesRoleIdHead(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Grant role for user on project.  PUT /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    projectsProjectIdUsersUserIdRolesRoleIdPut(projectId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * RegionsApi - axios parameter creator
 * @export
 */
export declare const RegionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/regions
     * @param {string} [parentRegionId] Filters the response by a parent region, by ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsGet: (parentRegionId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/regions
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPost: (region?: Region, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdDelete: (regionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdGet: (regionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdHead: (regionId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdPatch: (regionId: string, region?: Region, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PUT operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdPut: (regionId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RegionsApi - functional programming interface
 * @export
 */
export declare const RegionsApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/regions
     * @param {string} [parentRegionId] Filters the response by a parent region, by ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsGet(parentRegionId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionsGetResponse>>;
    /**
     * HEAD operation on /v3/regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/regions
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPost(region?: Region, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>>;
    /**
     * DELETE operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdDelete(regionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdGet(regionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>>;
    /**
     * HEAD operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdHead(regionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdPatch(regionId: string, region?: Region, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Region>>;
    /**
     * PUT operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdPut(regionId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * RegionsApi - factory interface
 * @export
 */
export declare const RegionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/regions
     * @param {string} [parentRegionId] Filters the response by a parent region, by ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsGet(parentRegionId?: string, options?: any): AxiosPromise<RegionsGetResponse>;
    /**
     * HEAD operation on /v3/regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/regions
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsPost(region?: Region, options?: any): AxiosPromise<Region>;
    /**
     * DELETE operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdDelete(regionId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdGet(regionId: string, options?: any): AxiosPromise<Region>;
    /**
     * HEAD operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdHead(regionId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdPatch(regionId: string, region?: Region, options?: any): AxiosPromise<Region>;
    /**
     * PUT operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regionsRegionIdPut(regionId: string, body?: any, options?: any): AxiosPromise<any>;
};
/**
 * RegionsApi - object-oriented interface
 * @export
 * @class RegionsApi
 * @extends {BaseAPI}
 */
export declare class RegionsApi extends BaseAPI {
    /**
     * GET operation on /v3/regions
     * @param {string} [parentRegionId] Filters the response by a parent region, by ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    regionsGet(parentRegionId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RegionsGetResponse, any>>;
    /**
     * HEAD operation on /v3/regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    regionsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/regions
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    regionsPost(region?: Region, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Region, any>>;
    /**
     * DELETE operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    regionsRegionIdDelete(regionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    regionsRegionIdGet(regionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Region, any>>;
    /**
     * HEAD operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    regionsRegionIdHead(regionId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    regionsRegionIdPatch(regionId: string, region?: Region, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Region, any>>;
    /**
     * PUT operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    regionsRegionIdPut(regionId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * RegisteredLimitsApi - axios parameter creator
 * @export
 */
export declare const RegisteredLimitsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/registered_limits
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsPost: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdDelete: (registeredLimitId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdGet: (registeredLimitId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdHead: (registeredLimitId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdPatch: (registeredLimitId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RegisteredLimitsApi - functional programming interface
 * @export
 */
export declare const RegisteredLimitsApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/registered_limits
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * DELETE operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdDelete(registeredLimitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdGet(registeredLimitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdHead(registeredLimitId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdPatch(registeredLimitId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * RegisteredLimitsApi - factory interface
 * @export
 */
export declare const RegisteredLimitsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/registered_limits
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsPost(body?: any, options?: any): AxiosPromise<any>;
    /**
     * DELETE operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdDelete(registeredLimitId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdGet(registeredLimitId: string, options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdHead(registeredLimitId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registeredLimitsRegisteredLimitIdPatch(registeredLimitId: string, body?: any, options?: any): AxiosPromise<any>;
};
/**
 * RegisteredLimitsApi - object-oriented interface
 * @export
 * @class RegisteredLimitsApi
 * @extends {BaseAPI}
 */
export declare class RegisteredLimitsApi extends BaseAPI {
    /**
     * GET operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    registeredLimitsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    registeredLimitsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/registered_limits
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    registeredLimitsPost(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * DELETE operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    registeredLimitsRegisteredLimitIdDelete(registeredLimitId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    registeredLimitsRegisteredLimitIdGet(registeredLimitId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    registeredLimitsRegisteredLimitIdHead(registeredLimitId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    registeredLimitsRegisteredLimitIdPatch(registeredLimitId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * RoleAssignmentsApi - axios parameter creator
 * @export
 */
export declare const RoleAssignmentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {any | null} [effective] Returns the effective assignments, including any assignments gained by virtue of group membership.
     * @param {any | null} [includeNames] If set, then the names of any entities returned will be include as well as their IDs. Any value other than 0 (including no value) will be interpreted as true.
     * @param {any | null} [includeSubtree] If set, then relevant assignments in the project hierarchy below the project specified in the scope.project_id query parameter are also included in the response. Any value other than 0 (including no value) for include_subtree will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleAssignmentsGet: (groupId?: string, roleId?: string, userId?: string, scopeDomainId?: string, scopeProjectId?: string, scopeOSINHERITinheritedTo?: string, effective?: any | null, includeNames?: any | null, includeSubtree?: any | null, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleAssignmentsHead: (groupId?: string, roleId?: string, userId?: string, scopeDomainId?: string, scopeProjectId?: string, scopeOSINHERITinheritedTo?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoleAssignmentsApi - functional programming interface
 * @export
 */
export declare const RoleAssignmentsApiFp: (configuration?: Configuration) => {
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {any | null} [effective] Returns the effective assignments, including any assignments gained by virtue of group membership.
     * @param {any | null} [includeNames] If set, then the names of any entities returned will be include as well as their IDs. Any value other than 0 (including no value) will be interpreted as true.
     * @param {any | null} [includeSubtree] If set, then relevant assignments in the project hierarchy below the project specified in the scope.project_id query parameter are also included in the response. Any value other than 0 (including no value) for include_subtree will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleAssignmentsGet(groupId?: string, roleId?: string, userId?: string, scopeDomainId?: string, scopeProjectId?: string, scopeOSINHERITinheritedTo?: string, effective?: any | null, includeNames?: any | null, includeSubtree?: any | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleAssignmentsGetResponse>>;
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleAssignmentsHead(groupId?: string, roleId?: string, userId?: string, scopeDomainId?: string, scopeProjectId?: string, scopeOSINHERITinheritedTo?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * RoleAssignmentsApi - factory interface
 * @export
 */
export declare const RoleAssignmentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {any | null} [effective] Returns the effective assignments, including any assignments gained by virtue of group membership.
     * @param {any | null} [includeNames] If set, then the names of any entities returned will be include as well as their IDs. Any value other than 0 (including no value) will be interpreted as true.
     * @param {any | null} [includeSubtree] If set, then relevant assignments in the project hierarchy below the project specified in the scope.project_id query parameter are also included in the response. Any value other than 0 (including no value) for include_subtree will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleAssignmentsGet(groupId?: string, roleId?: string, userId?: string, scopeDomainId?: string, scopeProjectId?: string, scopeOSINHERITinheritedTo?: string, effective?: any | null, includeNames?: any | null, includeSubtree?: any | null, options?: any): AxiosPromise<RoleAssignmentsGetResponse>;
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleAssignmentsHead(groupId?: string, roleId?: string, userId?: string, scopeDomainId?: string, scopeProjectId?: string, scopeOSINHERITinheritedTo?: string, options?: any): AxiosPromise<void>;
};
/**
 * RoleAssignmentsApi - object-oriented interface
 * @export
 * @class RoleAssignmentsApi
 * @extends {BaseAPI}
 */
export declare class RoleAssignmentsApi extends BaseAPI {
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {any | null} [effective] Returns the effective assignments, including any assignments gained by virtue of group membership.
     * @param {any | null} [includeNames] If set, then the names of any entities returned will be include as well as their IDs. Any value other than 0 (including no value) will be interpreted as true.
     * @param {any | null} [includeSubtree] If set, then relevant assignments in the project hierarchy below the project specified in the scope.project_id query parameter are also included in the response. Any value other than 0 (including no value) for include_subtree will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    roleAssignmentsGet(groupId?: string, roleId?: string, userId?: string, scopeDomainId?: string, scopeProjectId?: string, scopeOSINHERITinheritedTo?: string, effective?: any | null, includeNames?: any | null, includeSubtree?: any | null, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleAssignmentsGetResponse, any>>;
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    roleAssignmentsHead(groupId?: string, roleId?: string, userId?: string, scopeDomainId?: string, scopeProjectId?: string, scopeOSINHERITinheritedTo?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * RoleInferencesApi - axios parameter creator
 * @export
 */
export declare const RoleInferencesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleInferencesGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleInferencesHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RoleInferencesApi - functional programming interface
 * @export
 */
export declare const RoleInferencesApiFp: (configuration?: Configuration) => {
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleInferencesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleInferencesGetResponse>>;
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleInferencesHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * RoleInferencesApi - factory interface
 * @export
 */
export declare const RoleInferencesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleInferencesGet(options?: any): AxiosPromise<RoleInferencesGetResponse>;
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    roleInferencesHead(options?: any): AxiosPromise<void>;
};
/**
 * RoleInferencesApi - object-oriented interface
 * @export
 * @class RoleInferencesApi
 * @extends {BaseAPI}
 */
export declare class RoleInferencesApi extends BaseAPI {
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInferencesApi
     */
    roleInferencesGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleInferencesGetResponse, any>>;
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInferencesApi
     */
    roleInferencesHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * RolesApi - axios parameter creator
 * @export
 */
export declare const RolesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesGet: (domainId: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesHead: (domainId: string, groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke a role from a group on a domain.  DELETE /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdDelete: (domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdGet: (domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdHead: (domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Grant a role to a group on a domain.  PUT /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdPut: (domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesGet: (domainId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesHead: (domainId: string, userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke a role from user on a domain.  DELETE /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdDelete: (domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdGet: (domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdHead: (domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a role to a user on a domain.  PUT /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdPut: (domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesGet: (domainId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create role.  POST /v3/roles
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPost: (role?: Role, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesGet: (priorRoleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesHead: (priorRoleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete implied role.  DELETE /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdDelete: (priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdGet: (priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdHead: (priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create implied role.  PUT /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdPut: (priorRoleId: string, impliedRoleId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete role.  DELETE /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdDelete: (roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdGet: (roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdHead: (roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update role.  PATCH /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdPatch: (roleId: string, role?: Role, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * RolesApi - functional programming interface
 * @export
 */
export declare const RolesApiFp: (configuration?: Configuration) => {
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesGet(domainId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesInfos>>;
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesHead(domainId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke a role from a group on a domain.  DELETE /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdDelete(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdGet(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdHead(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Grant a role to a group on a domain.  PUT /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdPut(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesGet(domainId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesInfos>>;
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesHead(domainId: string, userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke a role from user on a domain.  DELETE /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdDelete(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdGet(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdHead(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a role to a user on a domain.  PUT /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdPut(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesGet(domainId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesGetResponse>>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create role.  POST /v3/roles
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPost(role?: Role, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesGet(priorRoleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesImpliesGetResponse>>;
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesHead(priorRoleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete implied role.  DELETE /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdDelete(priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdGet(priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesImplyGetResponse>>;
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdHead(priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create implied role.  PUT /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdPut(priorRoleId: string, impliedRoleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolesImplyPutResponse>>;
    /**
     * Delete role.  DELETE /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdDelete(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdGet(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdHead(roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update role.  PATCH /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdPatch(roleId: string, role?: Role, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>>;
};
/**
 * RolesApi - factory interface
 * @export
 */
export declare const RolesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesGet(domainId: string, groupId: string, options?: any): AxiosPromise<RolesInfos>;
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesHead(domainId: string, groupId: string, options?: any): AxiosPromise<void>;
    /**
     * Revoke a role from a group on a domain.  DELETE /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdDelete(domainId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdGet(domainId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdHead(domainId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Grant a role to a group on a domain.  PUT /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdPut(domainId: string, groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesGet(domainId: string, userId: string, options?: any): AxiosPromise<RolesInfos>;
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesHead(domainId: string, userId: string, options?: any): AxiosPromise<void>;
    /**
     * Revoke a role from user on a domain.  DELETE /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdDelete(domainId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdGet(domainId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdHead(domainId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Create a role to a user on a domain.  PUT /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    domainsDomainIdUsersUserIdRolesRoleIdPut(domainId: string, userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesGet(domainId?: string, options?: any): AxiosPromise<RolesGetResponse>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesHead(options?: any): AxiosPromise<void>;
    /**
     * Create role.  POST /v3/roles
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPost(role?: Role, options?: any): AxiosPromise<Role>;
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesGet(priorRoleId: string, options?: any): AxiosPromise<RolesImpliesGetResponse>;
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesHead(priorRoleId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete implied role.  DELETE /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdDelete(priorRoleId: string, impliedRoleId: string, options?: any): AxiosPromise<void>;
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdGet(priorRoleId: string, impliedRoleId: string, options?: any): AxiosPromise<RolesImplyGetResponse>;
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdHead(priorRoleId: string, impliedRoleId: string, options?: any): AxiosPromise<void>;
    /**
     * Create implied role.  PUT /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesPriorRoleIdImpliesImpliedRoleIdPut(priorRoleId: string, impliedRoleId: string, body?: any, options?: any): AxiosPromise<RolesImplyPutResponse>;
    /**
     * Delete role.  DELETE /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdDelete(roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdGet(roleId: string, options?: any): AxiosPromise<Role>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdHead(roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Update role.  PATCH /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rolesRoleIdPatch(roleId: string, role?: Role, options?: any): AxiosPromise<Role>;
};
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
export declare class RolesApi extends BaseAPI {
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdGroupsGroupIdRolesGet(domainId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RolesInfos, any>>;
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdGroupsGroupIdRolesHead(domainId: string, groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke a role from a group on a domain.  DELETE /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdDelete(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdGet(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdHead(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Grant a role to a group on a domain.  PUT /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdGroupsGroupIdRolesRoleIdPut(domainId: string, groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdUsersUserIdRolesGet(domainId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RolesInfos, any>>;
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdUsersUserIdRolesHead(domainId: string, userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke a role from user on a domain.  DELETE /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdUsersUserIdRolesRoleIdDelete(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdUsersUserIdRolesRoleIdGet(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdUsersUserIdRolesRoleIdHead(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a role to a user on a domain.  PUT /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    domainsDomainIdUsersUserIdRolesRoleIdPut(domainId: string, userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesGet(domainId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RolesGetResponse, any>>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create role.  POST /v3/roles
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesPost(role?: Role, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesPriorRoleIdImpliesGet(priorRoleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RolesImpliesGetResponse, any>>;
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesPriorRoleIdImpliesHead(priorRoleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete implied role.  DELETE /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesPriorRoleIdImpliesImpliedRoleIdDelete(priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesPriorRoleIdImpliesImpliedRoleIdGet(priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RolesImplyGetResponse, any>>;
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesPriorRoleIdImpliesImpliedRoleIdHead(priorRoleId: string, impliedRoleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create implied role.  PUT /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesPriorRoleIdImpliesImpliedRoleIdPut(priorRoleId: string, impliedRoleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RolesImplyPutResponse, any>>;
    /**
     * Delete role.  DELETE /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesRoleIdDelete(roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesRoleIdGet(roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesRoleIdHead(roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update role.  PATCH /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    rolesRoleIdPatch(roleId: string, role?: Role, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Role, any>>;
}
/**
 * S3tokensApi - axios parameter creator
 * @export
 */
export declare const S3tokensApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Authenticate s3token.  POST /v3/s3tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensPost: (body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * S3tokensApi - functional programming interface
 * @export
 */
export declare const S3tokensApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * HEAD operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Authenticate s3token.  POST /v3/s3tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * S3tokensApi - factory interface
 * @export
 */
export declare const S3tokensApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensGet(options?: any): AxiosPromise<any>;
    /**
     * HEAD operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensHead(options?: any): AxiosPromise<void>;
    /**
     * Authenticate s3token.  POST /v3/s3tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    s3tokensPost(body?: any, options?: any): AxiosPromise<any>;
};
/**
 * S3tokensApi - object-oriented interface
 * @export
 * @class S3tokensApi
 * @extends {BaseAPI}
 */
export declare class S3tokensApi extends BaseAPI {
    /**
     * GET operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3tokensApi
     */
    s3tokensGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * HEAD operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3tokensApi
     */
    s3tokensHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Authenticate s3token.  POST /v3/s3tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3tokensApi
     */
    s3tokensPost(body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * ServicesApi - axios parameter creator
 * @export
 */
export declare const ServicesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/services
     * @param {string} [service] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesGet: (service?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/services
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesPost: (service?: Service, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * DELETE operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdDelete: (serviceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdGet: (serviceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdHead: (serviceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * PATCH operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdPatch: (serviceId: string, service?: Service, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ServicesApi - functional programming interface
 * @export
 */
export declare const ServicesApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3/services
     * @param {string} [service] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesGet(service?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesGetResponse>>;
    /**
     * HEAD operation on /v3/services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/services
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesPost(service?: Service, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Service>>;
    /**
     * DELETE operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdDelete(serviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * GET operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdGet(serviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Service>>;
    /**
     * HEAD operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdHead(serviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * PATCH operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdPatch(serviceId: string, service?: Service, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Service>>;
};
/**
 * ServicesApi - factory interface
 * @export
 */
export declare const ServicesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3/services
     * @param {string} [service] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesGet(service?: string, options?: any): AxiosPromise<ServicesGetResponse>;
    /**
     * HEAD operation on /v3/services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesHead(options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/services
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesPost(service?: Service, options?: any): AxiosPromise<Service>;
    /**
     * DELETE operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdDelete(serviceId: string, options?: any): AxiosPromise<void>;
    /**
     * GET operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdGet(serviceId: string, options?: any): AxiosPromise<Service>;
    /**
     * HEAD operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdHead(serviceId: string, options?: any): AxiosPromise<void>;
    /**
     * PATCH operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    servicesServiceIdPatch(serviceId: string, service?: Service, options?: any): AxiosPromise<Service>;
};
/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
export declare class ServicesApi extends BaseAPI {
    /**
     * GET operation on /v3/services
     * @param {string} [service] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    servicesGet(service?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ServicesGetResponse, any>>;
    /**
     * HEAD operation on /v3/services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    servicesHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/services
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    servicesPost(service?: Service, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Service, any>>;
    /**
     * DELETE operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    servicesServiceIdDelete(serviceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * GET operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    servicesServiceIdGet(serviceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Service, any>>;
    /**
     * HEAD operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    servicesServiceIdHead(serviceId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * PATCH operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    servicesServiceIdPatch(serviceId: string, service?: Service, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Service, any>>;
}
/**
 * SystemApi - axios parameter creator
 * @export
 */
export declare const SystemApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesGet: (groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesHead: (groupId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke a role from the group on the system.  DELETE /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdDelete: (groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdGet: (groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdHead: (groupId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Grant a role to a group on the system.  PUT /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdPut: (groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesGet: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesHead: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Revoke a role from user on the system.  DELETE /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdDelete: (userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdGet: (userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdHead: (userId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Grant a role to a user on the system.  PUT /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdPut: (userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SystemApi - functional programming interface
 * @export
 */
export declare const SystemApiFp: (configuration?: Configuration) => {
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesGet(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesHead(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke a role from the group on the system.  DELETE /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdDelete(groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdGet(groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdHead(groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Grant a role to a group on the system.  PUT /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdPut(groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesHead(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Revoke a role from user on the system.  DELETE /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdDelete(userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdGet(userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdHead(userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Grant a role to a user on the system.  PUT /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdPut(userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * SystemApi - factory interface
 * @export
 */
export declare const SystemApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesGet(groupId: string, options?: any): AxiosPromise<any>;
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesHead(groupId: string, options?: any): AxiosPromise<void>;
    /**
     * Revoke a role from the group on the system.  DELETE /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdDelete(groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdGet(groupId: string, roleId: string, options?: any): AxiosPromise<any>;
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdHead(groupId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Grant a role to a group on the system.  PUT /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemGroupsGroupIdRolesRoleIdPut(groupId: string, roleId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesGet(userId: string, options?: any): AxiosPromise<any>;
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesHead(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Revoke a role from user on the system.  DELETE /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdDelete(userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdGet(userId: string, roleId: string, options?: any): AxiosPromise<any>;
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdHead(userId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * Grant a role to a user on the system.  PUT /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemUsersUserIdRolesRoleIdPut(userId: string, roleId: string, body?: any, options?: any): AxiosPromise<any>;
};
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export declare class SystemApi extends BaseAPI {
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemGroupsGroupIdRolesGet(groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemGroupsGroupIdRolesHead(groupId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke a role from the group on the system.  DELETE /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemGroupsGroupIdRolesRoleIdDelete(groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemGroupsGroupIdRolesRoleIdGet(groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemGroupsGroupIdRolesRoleIdHead(groupId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Grant a role to a group on the system.  PUT /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemGroupsGroupIdRolesRoleIdPut(groupId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemUsersUserIdRolesGet(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemUsersUserIdRolesHead(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Revoke a role from user on the system.  DELETE /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemUsersUserIdRolesRoleIdDelete(userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemUsersUserIdRolesRoleIdGet(userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemUsersUserIdRolesRoleIdHead(userId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Grant a role to a user on the system.  PUT /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemUsersUserIdRolesRoleIdPut(userId: string, roleId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
/**
 * UsersApi - axios parameter creator
 * @export
 */
export declare const UsersApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {string} [protocolId] Filters the response by a protocol ID.
     * @param {string} [uniqueId] Filters the response by a unique ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet: (domainId?: string, enabled?: boolean, id?: string, name?: string, passwordExpiresAt?: string, protocolId?: string, uniqueId?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create a user.  POST /v3/users
     * @param {UsersPostRequest} [usersPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost: (usersPostRequest?: UsersPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete access rule resource.  DELETE /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdDelete: (userId: string, accessRuleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdGet: (userId: string, accessRuleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdHead: (userId: string, accessRuleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesGet: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesHead: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete application credential resource.  DELETE /v3/users/{user_id}/application_credentials/        {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdDelete: (userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdGet: (userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdHead: (userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} [name] The name of the application credential. Must be unique to a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsGet: (name?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsHead: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create application credential.  POST /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {UsersApplicationCredentialsPostRequest} [usersApplicationCredentialsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsPost: (userId: string, usersApplicationCredentialsPostRequest?: UsersApplicationCredentialsPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a specific EC2 credential.  DELETE /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdDelete: (userId: string, credentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdGet: (userId: string, credentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdHead: (userId: string, credentialId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Get: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Head: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Create EC2 Credential for user.  POST /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Post: (userId: string, body?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete a user.  DELETE /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdDelete: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGet: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsGet: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsHead: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdHead: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Delete specific access token.  DELETE /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete: (userId: string, accessTokenId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet: (userId: string, accessTokenId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead: (userId: string, accessTokenId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet: (userId: string, accessTokenId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead: (userId: string, accessTokenId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet: (userId: string, accessTokenId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead: (userId: string, accessTokenId: string, roleId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensGet: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensHead: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * POST operation on /v3/users/{user_id}/password
     * @param {string} userId user_id parameter for /v3/users/{user_id}/password API
     * @param {UsersPasswordPostRequest} [usersPasswordPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPasswordPost: (userId: string, usersPasswordPostRequest?: UsersPasswordPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update a user.  PATCH /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {UserPatchRequest} [userPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPatch: (userId: string, userPatchRequest?: UserPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * GET operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdProjectsGet: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdProjectsHead: (userId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsersApi - functional programming interface
 * @export
 */
export declare const UsersApiFp: (configuration?: Configuration) => {
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {string} [protocolId] Filters the response by a protocol ID.
     * @param {string} [uniqueId] Filters the response by a unique ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(domainId?: string, enabled?: boolean, id?: string, name?: string, passwordExpiresAt?: string, protocolId?: string, uniqueId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGetResponse>>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create a user.  POST /v3/users
     * @param {UsersPostRequest} [usersPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(usersPostRequest?: UsersPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Delete access rule resource.  DELETE /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdDelete(userId: string, accessRuleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdGet(userId: string, accessRuleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersAccessRuleGetResponse>>;
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdHead(userId: string, accessRuleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersAccessRulesGetResponse>>;
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesHead(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete application credential resource.  DELETE /v3/users/{user_id}/application_credentials/        {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdDelete(userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdGet(userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersApplicationCredentialGetResponse>>;
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdHead(userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} [name] The name of the application credential. Must be unique to a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersApplicationCredentialsGetResponse>>;
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsHead(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create application credential.  POST /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {UsersApplicationCredentialsPostRequest} [usersApplicationCredentialsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsPost(userId: string, usersApplicationCredentialsPostRequest?: UsersApplicationCredentialsPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersApplicationCredentialsPostResponse>>;
    /**
     * Delete a specific EC2 credential.  DELETE /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdDelete(userId: string, credentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdGet(userId: string, credentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdHead(userId: string, credentialId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Get(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Head(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Create EC2 Credential for user.  POST /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Post(userId: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Delete a user.  DELETE /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGetResponse>>;
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersGroupsGetResponse>>;
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsHead(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdHead(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Delete specific access token.  DELETE /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet(userId: string, accessTokenId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead(userId: string, accessTokenId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensHead(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * POST operation on /v3/users/{user_id}/password
     * @param {string} userId user_id parameter for /v3/users/{user_id}/password API
     * @param {UsersPasswordPostRequest} [usersPasswordPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPasswordPost(userId: string, usersPasswordPostRequest?: UsersPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Update a user.  PATCH /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {UserPatchRequest} [userPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPatch(userId: string, userPatchRequest?: UserPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPatchResponse>>;
    /**
     * GET operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdProjectsGet(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersProjectsGetResponse>>;
    /**
     * HEAD operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdProjectsHead(userId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UsersApi - factory interface
 * @export
 */
export declare const UsersApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {string} [protocolId] Filters the response by a protocol ID.
     * @param {string} [uniqueId] Filters the response by a unique ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(domainId?: string, enabled?: boolean, id?: string, name?: string, passwordExpiresAt?: string, protocolId?: string, uniqueId?: string, options?: any): AxiosPromise<UsersGetResponse>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersHead(options?: any): AxiosPromise<void>;
    /**
     * Create a user.  POST /v3/users
     * @param {UsersPostRequest} [usersPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(usersPostRequest?: UsersPostRequest, options?: any): AxiosPromise<any>;
    /**
     * Delete access rule resource.  DELETE /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdDelete(userId: string, accessRuleId: string, options?: any): AxiosPromise<void>;
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdGet(userId: string, accessRuleId: string, options?: any): AxiosPromise<UsersAccessRuleGetResponse>;
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesAccessRuleIdHead(userId: string, accessRuleId: string, options?: any): AxiosPromise<void>;
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesGet(userId: string, options?: any): AxiosPromise<UsersAccessRulesGetResponse>;
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdAccessRulesHead(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete application credential resource.  DELETE /v3/users/{user_id}/application_credentials/        {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdDelete(userId: string, applicationCredentialId: string, options?: any): AxiosPromise<void>;
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdGet(userId: string, applicationCredentialId: string, options?: any): AxiosPromise<UsersApplicationCredentialGetResponse>;
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdHead(userId: string, applicationCredentialId: string, options?: any): AxiosPromise<void>;
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} [name] The name of the application credential. Must be unique to a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsGet(name?: string, options?: any): AxiosPromise<UsersApplicationCredentialsGetResponse>;
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsHead(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Create application credential.  POST /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {UsersApplicationCredentialsPostRequest} [usersApplicationCredentialsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdApplicationCredentialsPost(userId: string, usersApplicationCredentialsPostRequest?: UsersApplicationCredentialsPostRequest, options?: any): AxiosPromise<UsersApplicationCredentialsPostResponse>;
    /**
     * Delete a specific EC2 credential.  DELETE /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdDelete(userId: string, credentialId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdGet(userId: string, credentialId: string, options?: any): AxiosPromise<any>;
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2CredentialIdHead(userId: string, credentialId: string, options?: any): AxiosPromise<void>;
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Get(userId: string, options?: any): AxiosPromise<any>;
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Head(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Create EC2 Credential for user.  POST /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdCredentialsOSEC2Post(userId: string, body?: any, options?: any): AxiosPromise<any>;
    /**
     * Delete a user.  DELETE /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdDelete(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGet(userId: string, options?: any): AxiosPromise<UserGetResponse>;
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsGet(userId: string, options?: any): AxiosPromise<UsersGroupsGetResponse>;
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdGroupsHead(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdHead(userId: string, options?: any): AxiosPromise<void>;
    /**
     * Delete specific access token.  DELETE /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete(userId: string, accessTokenId: string, options?: any): AxiosPromise<void>;
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet(userId: string, accessTokenId: string, options?: any): AxiosPromise<any>;
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead(userId: string, accessTokenId: string, options?: any): AxiosPromise<void>;
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet(userId: string, accessTokenId: string, options?: any): AxiosPromise<any>;
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead(userId: string, accessTokenId: string, options?: any): AxiosPromise<void>;
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet(userId: string, accessTokenId: string, roleId: string, options?: any): AxiosPromise<any>;
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead(userId: string, accessTokenId: string, roleId: string, options?: any): AxiosPromise<void>;
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensGet(userId: string, options?: any): AxiosPromise<any>;
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdOSOAUTH1AccessTokensHead(userId: string, options?: any): AxiosPromise<void>;
    /**
     * POST operation on /v3/users/{user_id}/password
     * @param {string} userId user_id parameter for /v3/users/{user_id}/password API
     * @param {UsersPasswordPostRequest} [usersPasswordPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPasswordPost(userId: string, usersPasswordPostRequest?: UsersPasswordPostRequest, options?: any): AxiosPromise<void>;
    /**
     * Update a user.  PATCH /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {UserPatchRequest} [userPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdPatch(userId: string, userPatchRequest?: UserPatchRequest, options?: any): AxiosPromise<UserPatchResponse>;
    /**
     * GET operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdProjectsGet(userId: string, options?: any): AxiosPromise<UsersProjectsGetResponse>;
    /**
     * HEAD operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersUserIdProjectsHead(userId: string, options?: any): AxiosPromise<void>;
};
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export declare class UsersApi extends BaseAPI {
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {string} [protocolId] Filters the response by a protocol ID.
     * @param {string} [uniqueId] Filters the response by a unique ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersGet(domainId?: string, enabled?: boolean, id?: string, name?: string, passwordExpiresAt?: string, protocolId?: string, uniqueId?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersGetResponse, any>>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create a user.  POST /v3/users
     * @param {UsersPostRequest} [usersPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersPost(usersPostRequest?: UsersPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Delete access rule resource.  DELETE /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdAccessRulesAccessRuleIdDelete(userId: string, accessRuleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdAccessRulesAccessRuleIdGet(userId: string, accessRuleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersAccessRuleGetResponse, any>>;
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdAccessRulesAccessRuleIdHead(userId: string, accessRuleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdAccessRulesGet(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersAccessRulesGetResponse, any>>;
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdAccessRulesHead(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete application credential resource.  DELETE /v3/users/{user_id}/application_credentials/        {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdDelete(userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdGet(userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersApplicationCredentialGetResponse, any>>;
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdApplicationCredentialsApplicationCredentialIdHead(userId: string, applicationCredentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} [name] The name of the application credential. Must be unique to a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdApplicationCredentialsGet(name?: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersApplicationCredentialsGetResponse, any>>;
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdApplicationCredentialsHead(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create application credential.  POST /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {UsersApplicationCredentialsPostRequest} [usersApplicationCredentialsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdApplicationCredentialsPost(userId: string, usersApplicationCredentialsPostRequest?: UsersApplicationCredentialsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersApplicationCredentialsPostResponse, any>>;
    /**
     * Delete a specific EC2 credential.  DELETE /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdCredentialsOSEC2CredentialIdDelete(userId: string, credentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdCredentialsOSEC2CredentialIdGet(userId: string, credentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdCredentialsOSEC2CredentialIdHead(userId: string, credentialId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdCredentialsOSEC2Get(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdCredentialsOSEC2Head(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Create EC2 Credential for user.  POST /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdCredentialsOSEC2Post(userId: string, body?: any, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Delete a user.  DELETE /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdDelete(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdGet(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserGetResponse, any>>;
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdGroupsGet(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersGroupsGetResponse, any>>;
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdGroupsHead(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdHead(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Delete specific access token.  DELETE /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead(userId: string, accessTokenId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet(userId: string, accessTokenId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead(userId: string, accessTokenId: string, roleId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensGet(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdOSOAUTH1AccessTokensHead(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * POST operation on /v3/users/{user_id}/password
     * @param {string} userId user_id parameter for /v3/users/{user_id}/password API
     * @param {UsersPasswordPostRequest} [usersPasswordPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdPasswordPost(userId: string, usersPasswordPostRequest?: UsersPasswordPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Update a user.  PATCH /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {UserPatchRequest} [userPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdPatch(userId: string, userPatchRequest?: UserPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserPatchResponse, any>>;
    /**
     * GET operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdProjectsGet(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersProjectsGetResponse, any>>;
    /**
     * HEAD operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    usersUserIdProjectsHead(userId: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * V3Api - axios parameter creator
 * @export
 */
export declare const V3ApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * V3Api - functional programming interface
 * @export
 */
export declare const V3ApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * V3Api - factory interface
 * @export
 */
export declare const V3ApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionGet(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionHead(options?: any): AxiosPromise<void>;
};
/**
 * V3Api - object-oriented interface
 * @export
 * @class V3Api
 * @extends {BaseAPI}
 */
export declare class V3Api extends BaseAPI {
    /**
     * GET operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V3Api
     */
    versionGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V3Api
     */
    versionHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * VersionApi - axios parameter creator
 * @export
 */
export declare const VersionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * GET operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * HEAD operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionsHead: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VersionApi - functional programming interface
 * @export
 */
export declare const VersionApiFp: (configuration?: Configuration) => {
    /**
     * GET operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * HEAD operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionsHead(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * VersionApi - factory interface
 * @export
 */
export declare const VersionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * GET operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionsGet(options?: any): AxiosPromise<object>;
    /**
     * HEAD operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    versionsHead(options?: any): AxiosPromise<void>;
};
/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
export declare class VersionApi extends BaseAPI {
    /**
     * GET operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    versionsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * HEAD operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    versionsHead(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
