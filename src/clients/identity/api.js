"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * OpenStack Identity API
 * Identity API provided by Keystone service
 *
 * The version of the OpenAPI document: 3.14
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ec2tokensApi = exports.Ec2tokensApiFactory = exports.Ec2tokensApiFp = exports.Ec2tokensApiAxiosParamCreator = exports.DomainsApi = exports.DomainsApiFactory = exports.DomainsApiFp = exports.DomainsApiAxiosParamCreator = exports.DomainConfigurationApi = exports.DomainConfigurationApiFactory = exports.DomainConfigurationApiFp = exports.DomainConfigurationApiAxiosParamCreator = exports.CredentialsApi = exports.CredentialsApiFactory = exports.CredentialsApiFp = exports.CredentialsApiAxiosParamCreator = exports.AuthApi = exports.AuthApiFactory = exports.AuthApiFp = exports.AuthApiAxiosParamCreator = exports.UsersPostRequestUserEnabledEnum = exports.UsersApplicationCredentialsPostResponseApplicationCredentialUnrestrictedEnum = exports.UsersApplicationCredentialsPostRequestApplicationCredentialUnrestrictedEnum = exports.UsersApplicationCredentialGetResponseApplicationCredentialUnrestrictedEnum = exports.UserPatchRequestUserEnabledEnum = exports.UserGetResponseUserOptionsMultiFactorAuthEnabledEnum = exports.UserGetResponseUserOptionsIgnoreUserInactivityEnum = exports.UserGetResponseUserOptionsLockPasswordEnum = exports.UserGetResponseUserOptionsIgnoreLockoutFailureAttemptsEnum = exports.UserGetResponseUserOptionsIgnorePasswordExpiryEnum = exports.UserGetResponseUserOptionsIgnoreChangePasswordUponFirstUseEnum = exports.UserGetResponseUserEnabledEnum = exports.RoleRoleOptionsImmutableEnum = exports.ProjectProjectOptionsImmutableEnum = exports.ProjectProjectIsDomainEnum = exports.ProjectProjectEnabledEnum = exports.OsFederationServiceProviderPutRequestServiceProviderEnabledEnum = exports.OsFederationServiceProviderPatchRequestServiceProviderEnabledEnum = exports.OsFederationIdentityProviderPutRequestIdentityProviderEnabledEnum = exports.OsFederationIdentityProviderPatchRequestIdentityProviderEnabledEnum = exports.GroupsUsersGetResponseUsersInnerOptionsMultiFactorAuthEnabledEnum = exports.GroupsUsersGetResponseUsersInnerOptionsIgnoreUserInactivityEnum = exports.GroupsUsersGetResponseUsersInnerOptionsLockPasswordEnum = exports.GroupsUsersGetResponseUsersInnerOptionsIgnoreLockoutFailureAttemptsEnum = exports.GroupsUsersGetResponseUsersInnerOptionsIgnorePasswordExpiryEnum = exports.GroupsUsersGetResponseUsersInnerOptionsIgnoreChangePasswordUponFirstUseEnum = exports.GroupsUsersGetResponseUsersInnerEnabledEnum = exports.EndpointEndpointInterfaceEnum = exports.AuthTokensPostRequestAuthIdentityMethodsEnum = exports.AuthCatalogGetResponseCatalogInnerEndpointsInnerInterfaceEnum = void 0;
exports.ProjectsApiAxiosParamCreator = exports.PoliciesApi = exports.PoliciesApiFactory = exports.PoliciesApiFp = exports.PoliciesApiAxiosParamCreator = exports.OSTRUSTApi = exports.OSTRUSTApiFactory = exports.OSTRUSTApiFp = exports.OSTRUSTApiAxiosParamCreator = exports.OSSIMPLECERTApi = exports.OSSIMPLECERTApiFactory = exports.OSSIMPLECERTApiFp = exports.OSSIMPLECERTApiAxiosParamCreator = exports.OSREVOKEApi = exports.OSREVOKEApiFactory = exports.OSREVOKEApiFp = exports.OSREVOKEApiAxiosParamCreator = exports.OSOAUTH2Api = exports.OSOAUTH2ApiFactory = exports.OSOAUTH2ApiFp = exports.OSOAUTH2ApiAxiosParamCreator = exports.OSOAUTH1Api = exports.OSOAUTH1ApiFactory = exports.OSOAUTH1ApiFp = exports.OSOAUTH1ApiAxiosParamCreator = exports.OSINHERITApi = exports.OSINHERITApiFactory = exports.OSINHERITApiFp = exports.OSINHERITApiAxiosParamCreator = exports.OSFEDERATIONApi = exports.OSFEDERATIONApiFactory = exports.OSFEDERATIONApiFp = exports.OSFEDERATIONApiAxiosParamCreator = exports.OSEPFILTERApi = exports.OSEPFILTERApiFactory = exports.OSEPFILTERApiFp = exports.OSEPFILTERApiAxiosParamCreator = exports.LimitsApi = exports.LimitsApiFactory = exports.LimitsApiFp = exports.LimitsApiAxiosParamCreator = exports.GroupsApi = exports.GroupsApiFactory = exports.GroupsApiFp = exports.GroupsApiAxiosParamCreator = exports.EndpointsGetInterfaceEnum = exports.EndpointsApi = exports.EndpointsApiFactory = exports.EndpointsApiFp = exports.EndpointsApiAxiosParamCreator = void 0;
exports.VersionApi = exports.VersionApiFactory = exports.VersionApiFp = exports.VersionApiAxiosParamCreator = exports.V3Api = exports.V3ApiFactory = exports.V3ApiFp = exports.V3ApiAxiosParamCreator = exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = exports.SystemApi = exports.SystemApiFactory = exports.SystemApiFp = exports.SystemApiAxiosParamCreator = exports.ServicesApi = exports.ServicesApiFactory = exports.ServicesApiFp = exports.ServicesApiAxiosParamCreator = exports.S3tokensApi = exports.S3tokensApiFactory = exports.S3tokensApiFp = exports.S3tokensApiAxiosParamCreator = exports.RolesApi = exports.RolesApiFactory = exports.RolesApiFp = exports.RolesApiAxiosParamCreator = exports.RoleInferencesApi = exports.RoleInferencesApiFactory = exports.RoleInferencesApiFp = exports.RoleInferencesApiAxiosParamCreator = exports.RoleAssignmentsApi = exports.RoleAssignmentsApiFactory = exports.RoleAssignmentsApiFp = exports.RoleAssignmentsApiAxiosParamCreator = exports.RegisteredLimitsApi = exports.RegisteredLimitsApiFactory = exports.RegisteredLimitsApiFp = exports.RegisteredLimitsApiAxiosParamCreator = exports.RegionsApi = exports.RegionsApiFactory = exports.RegionsApiFp = exports.RegionsApiAxiosParamCreator = exports.ProjectsApi = exports.ProjectsApiFactory = exports.ProjectsApiFp = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.AuthCatalogGetResponseCatalogInnerEndpointsInnerInterfaceEnum = {
    Public: 'public',
    Internal: 'internal',
    Admin: 'admin'
};
exports.AuthTokensPostRequestAuthIdentityMethodsEnum = {
    Password: 'password',
    Token: 'token',
    Totp: 'totp',
    ApplicationCredential: 'application_credential'
};
exports.EndpointEndpointInterfaceEnum = {
    Internal: 'internal',
    Admin: 'admin',
    Public: 'public'
};
exports.GroupsUsersGetResponseUsersInnerEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
exports.GroupsUsersGetResponseUsersInnerOptionsIgnoreChangePasswordUponFirstUseEnum = {
    True: true,
    False: false,
    Null: null
};
exports.GroupsUsersGetResponseUsersInnerOptionsIgnorePasswordExpiryEnum = {
    True: true,
    False: false,
    Null: null
};
exports.GroupsUsersGetResponseUsersInnerOptionsIgnoreLockoutFailureAttemptsEnum = {
    True: true,
    False: false,
    Null: null
};
exports.GroupsUsersGetResponseUsersInnerOptionsLockPasswordEnum = {
    True: true,
    False: false,
    Null: null
};
exports.GroupsUsersGetResponseUsersInnerOptionsIgnoreUserInactivityEnum = {
    True: true,
    False: false,
    Null: null
};
exports.GroupsUsersGetResponseUsersInnerOptionsMultiFactorAuthEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
exports.OsFederationIdentityProviderPatchRequestIdentityProviderEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
exports.OsFederationIdentityProviderPutRequestIdentityProviderEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
exports.OsFederationServiceProviderPatchRequestServiceProviderEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
exports.OsFederationServiceProviderPutRequestServiceProviderEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
exports.ProjectProjectEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
exports.ProjectProjectIsDomainEnum = {
    True: true,
    False: false,
    Null: null
};
exports.ProjectProjectOptionsImmutableEnum = {
    True: true,
    False: false,
    Null: null
};
exports.RoleRoleOptionsImmutableEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UserGetResponseUserEnabledEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UserGetResponseUserOptionsIgnoreChangePasswordUponFirstUseEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UserGetResponseUserOptionsIgnorePasswordExpiryEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UserGetResponseUserOptionsIgnoreLockoutFailureAttemptsEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UserGetResponseUserOptionsLockPasswordEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UserGetResponseUserOptionsIgnoreUserInactivityEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UserGetResponseUserOptionsMultiFactorAuthEnabledEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UserPatchRequestUserEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
exports.UsersApplicationCredentialGetResponseApplicationCredentialUnrestrictedEnum = {
    True: 'true',
    False: 'false',
    Null: 'null'
};
exports.UsersApplicationCredentialsPostRequestApplicationCredentialUnrestrictedEnum = {
    True: true,
    False: false,
    Null: null
};
exports.UsersApplicationCredentialsPostResponseApplicationCredentialUnrestrictedEnum = {
    True: true,
    False: false,
    Null: null
};
exports.UsersPostRequestUserEnabledEnum = {
    True: true,
    False: false,
    Null: null
};
/**
 * AuthApi - axios parameter creator
 * @export
 */
var AuthApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get service catalog for token.  GET/HEAD /v3/auth/catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCatalogGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/catalog";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get service catalog for token.  GET/HEAD /v3/auth/catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCatalogHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/catalog";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDomainsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDomainsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet: function (idpId_1, protocolId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1], args_1, true), void 0, function (idpId, protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet', 'protocolId', protocolId);
                            localVarPath = "/v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead: function (idpId_1, protocolId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1], args_1, true), void 0, function (idpId, protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead', 'protocolId', protocolId);
                            localVarPath = "/v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost: function (idpId_1, protocolId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1], args_1, true), void 0, function (idpId, protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost', 'protocolId', protocolId);
                            localVarPath = "/v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/OS-FEDERATION/saml2/ecp";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/OS-FEDERATION/saml2/ecp";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Exchange a scoped token for an ECP assertion.  POST /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {AuthOsFederationSaml2EcpPostRequest} [authOsFederationSaml2EcpPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpPost: function (authOsFederationSaml2EcpPostRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([authOsFederationSaml2EcpPostRequest_1], args_1, true), void 0, function (authOsFederationSaml2EcpPostRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/OS-FEDERATION/saml2/ecp";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authOsFederationSaml2EcpPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/saml2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Get: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/OS-FEDERATION/saml2";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/saml2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Head: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/OS-FEDERATION/saml2";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Exchange a scoped token for a SAML assertion.  POST /v3/auth/OS-FEDERATION/saml2
         * @param {AuthOsFederationSaml2PostRequest} [authOsFederationSaml2PostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Post: function (authOsFederationSaml2PostRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([authOsFederationSaml2PostRequest_1], args_1, true), void 0, function (authOsFederationSaml2PostRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/OS-FEDERATION/saml2";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authOsFederationSaml2PostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdGet: function (protocolId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([protocolId_1], args_1, true), void 0, function (protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONWebssoProtocolIdGet', 'protocolId', protocolId);
                            localVarPath = "/v3/auth/OS-FEDERATION/websso/{protocol_id}"
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdHead: function (protocolId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([protocolId_1], args_1, true), void 0, function (protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONWebssoProtocolIdHead', 'protocolId', protocolId);
                            localVarPath = "/v3/auth/OS-FEDERATION/websso/{protocol_id}"
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdPost: function (protocolId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([protocolId_1], args_1, true), void 0, function (protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('authOSFEDERATIONWebssoProtocolIdPost', 'protocolId', protocolId);
                            localVarPath = "/v3/auth/OS-FEDERATION/websso/{protocol_id}"
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProjectsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProjectsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible system scopes for token.  GET/HEAD /v3/auth/system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSystemGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/system";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible system scopes for token.  GET/HEAD /v3/auth/system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSystemHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/system";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke a token.  DELETE /v3/auth/tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensDelete: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Validate a token.  HEAD/GET /v3/auth/tokens
         * @param {string} xSubjectToken The authentication token. An authentication response returns the token ID in this header rather than in the response body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensGet: function (xSubjectToken_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([xSubjectToken_1], args_1, true), void 0, function (xSubjectToken, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'xSubjectToken' is not null or undefined
                            (0, common_1.assertParamExists)('authTokensGet', 'xSubjectToken', xSubjectToken);
                            localVarPath = "/v3/auth/tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (xSubjectToken != null) {
                                localVarHeaderParameter['X-Subject-Token'] = String(xSubjectToken);
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Validate a token.  HEAD/GET /v3/auth/tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensOSPKIRevokedGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/tokens/OS-PKI/revoked";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensOSPKIRevokedHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/auth/tokens/OS-PKI/revoked";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Issue a token.  POST /v3/auth/tokens
         * @param {AuthTokensPostRequest} [authTokensPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensPost: function (authTokensPostRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([authTokensPostRequest_1], args_1, true), void 0, function (authTokensPostRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    localVarPath = "/v3/auth/tokens";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(authTokensPostRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.AuthApiAxiosParamCreator = AuthApiAxiosParamCreator;
/**
 * AuthApi - functional programming interface
 * @export
 */
var AuthApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.AuthApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get service catalog for token.  GET/HEAD /v3/auth/catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCatalogGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authCatalogGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authCatalogGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get service catalog for token.  GET/HEAD /v3/auth/catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCatalogHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authCatalogHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authCatalogHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDomainsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authDomainsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authDomainsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDomainsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authDomainsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authDomainsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet: function (idpId, protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet(idpId, protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead: function (idpId, protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead(idpId, protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost: function (idpId, protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost(idpId, protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONSaml2EcpGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONSaml2EcpGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONSaml2EcpHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONSaml2EcpHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Exchange a scoped token for an ECP assertion.  POST /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {AuthOsFederationSaml2EcpPostRequest} [authOsFederationSaml2EcpPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpPost: function (authOsFederationSaml2EcpPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONSaml2EcpPost(authOsFederationSaml2EcpPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONSaml2EcpPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/saml2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Get: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONSaml2Get(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONSaml2Get']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/saml2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Head: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONSaml2Head(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONSaml2Head']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Exchange a scoped token for a SAML assertion.  POST /v3/auth/OS-FEDERATION/saml2
         * @param {AuthOsFederationSaml2PostRequest} [authOsFederationSaml2PostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Post: function (authOsFederationSaml2PostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONSaml2Post(authOsFederationSaml2PostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONSaml2Post']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdGet: function (protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONWebssoProtocolIdGet(protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONWebssoProtocolIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdHead: function (protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONWebssoProtocolIdHead(protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONWebssoProtocolIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdPost: function (protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authOSFEDERATIONWebssoProtocolIdPost(protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authOSFEDERATIONWebssoProtocolIdPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProjectsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authProjectsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProjectsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authProjectsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible system scopes for token.  GET/HEAD /v3/auth/system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSystemGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authSystemGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authSystemGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible system scopes for token.  GET/HEAD /v3/auth/system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSystemHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authSystemHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authSystemHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke a token.  DELETE /v3/auth/tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensDelete: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensDelete(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authTokensDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Validate a token.  HEAD/GET /v3/auth/tokens
         * @param {string} xSubjectToken The authentication token. An authentication response returns the token ID in this header rather than in the response body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensGet: function (xSubjectToken, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensGet(xSubjectToken, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authTokensGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Validate a token.  HEAD/GET /v3/auth/tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authTokensHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensOSPKIRevokedGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensOSPKIRevokedGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authTokensOSPKIRevokedGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensOSPKIRevokedHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensOSPKIRevokedHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authTokensOSPKIRevokedHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Issue a token.  POST /v3/auth/tokens
         * @param {AuthTokensPostRequest} [authTokensPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensPost: function (authTokensPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.authTokensPost(authTokensPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['AuthApi.authTokensPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.AuthApiFp = AuthApiFp;
/**
 * AuthApi - factory interface
 * @export
 */
var AuthApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.AuthApiFp)(configuration);
    return {
        /**
         * Get service catalog for token.  GET/HEAD /v3/auth/catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCatalogGet: function (options) {
            return localVarFp.authCatalogGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get service catalog for token.  GET/HEAD /v3/auth/catalog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authCatalogHead: function (options) {
            return localVarFp.authCatalogHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDomainsGet: function (options) {
            return localVarFp.authDomainsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authDomainsHead: function (options) {
            return localVarFp.authDomainsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet: function (idpId, protocolId, options) {
            return localVarFp.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet(idpId, protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead: function (idpId, protocolId, options) {
            return localVarFp.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead(idpId, protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
         * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost: function (idpId, protocolId, options) {
            return localVarFp.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost(idpId, protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpGet: function (options) {
            return localVarFp.authOSFEDERATIONSaml2EcpGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpHead: function (options) {
            return localVarFp.authOSFEDERATIONSaml2EcpHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Exchange a scoped token for an ECP assertion.  POST /v3/auth/OS-FEDERATION/saml2/ecp
         * @param {AuthOsFederationSaml2EcpPostRequest} [authOsFederationSaml2EcpPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2EcpPost: function (authOsFederationSaml2EcpPostRequest, options) {
            return localVarFp.authOSFEDERATIONSaml2EcpPost(authOsFederationSaml2EcpPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/saml2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Get: function (options) {
            return localVarFp.authOSFEDERATIONSaml2Get(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/saml2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Head: function (options) {
            return localVarFp.authOSFEDERATIONSaml2Head(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Exchange a scoped token for a SAML assertion.  POST /v3/auth/OS-FEDERATION/saml2
         * @param {AuthOsFederationSaml2PostRequest} [authOsFederationSaml2PostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONSaml2Post: function (authOsFederationSaml2PostRequest, options) {
            return localVarFp.authOSFEDERATIONSaml2Post(authOsFederationSaml2PostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdGet: function (protocolId, options) {
            return localVarFp.authOSFEDERATIONWebssoProtocolIdGet(protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdHead: function (protocolId, options) {
            return localVarFp.authOSFEDERATIONWebssoProtocolIdHead(protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
         * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authOSFEDERATIONWebssoProtocolIdPost: function (protocolId, options) {
            return localVarFp.authOSFEDERATIONWebssoProtocolIdPost(protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProjectsGet: function (options) {
            return localVarFp.authProjectsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authProjectsHead: function (options) {
            return localVarFp.authProjectsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible system scopes for token.  GET/HEAD /v3/auth/system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSystemGet: function (options) {
            return localVarFp.authSystemGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible system scopes for token.  GET/HEAD /v3/auth/system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSystemHead: function (options) {
            return localVarFp.authSystemHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke a token.  DELETE /v3/auth/tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensDelete: function (options) {
            return localVarFp.authTokensDelete(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Validate a token.  HEAD/GET /v3/auth/tokens
         * @param {string} xSubjectToken The authentication token. An authentication response returns the token ID in this header rather than in the response body.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensGet: function (xSubjectToken, options) {
            return localVarFp.authTokensGet(xSubjectToken, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Validate a token.  HEAD/GET /v3/auth/tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensHead: function (options) {
            return localVarFp.authTokensHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensOSPKIRevokedGet: function (options) {
            return localVarFp.authTokensOSPKIRevokedGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensOSPKIRevokedHead: function (options) {
            return localVarFp.authTokensOSPKIRevokedHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Issue a token.  POST /v3/auth/tokens
         * @param {AuthTokensPostRequest} [authTokensPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTokensPost: function (authTokensPostRequest, options) {
            return localVarFp.authTokensPost(authTokensPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.AuthApiFactory = AuthApiFactory;
/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
var AuthApi = /** @class */ (function (_super) {
    __extends(AuthApi, _super);
    function AuthApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authCatalogGet = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authCatalogGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get service catalog for token.  GET/HEAD /v3/auth/catalog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authCatalogHead = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authCatalogHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authDomainsGet = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authDomainsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authDomainsHead = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authDomainsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet = function (idpId, protocolId, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoGet(idpId, protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead = function (idpId, protocolId, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoHead(idpId, protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso
     * @param {string} idpId idp_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/websso API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost = function (idpId, protocolId, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdWebssoPost(idpId, protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONSaml2EcpGet = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONSaml2EcpGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONSaml2EcpHead = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONSaml2EcpHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Exchange a scoped token for an ECP assertion.  POST /v3/auth/OS-FEDERATION/saml2/ecp
     * @param {AuthOsFederationSaml2EcpPostRequest} [authOsFederationSaml2EcpPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONSaml2EcpPost = function (authOsFederationSaml2EcpPostRequest, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONSaml2EcpPost(authOsFederationSaml2EcpPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONSaml2Get = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONSaml2Get(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/saml2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONSaml2Head = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONSaml2Head(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Exchange a scoped token for a SAML assertion.  POST /v3/auth/OS-FEDERATION/saml2
     * @param {AuthOsFederationSaml2PostRequest} [authOsFederationSaml2PostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONSaml2Post = function (authOsFederationSaml2PostRequest, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONSaml2Post(authOsFederationSaml2PostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONWebssoProtocolIdGet = function (protocolId, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONWebssoProtocolIdGet(protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONWebssoProtocolIdHead = function (protocolId, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONWebssoProtocolIdHead(protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/auth/OS-FEDERATION/websso/{protocol_id}
     * @param {string} protocolId protocol_id parameter for /v3/auth/OS-FEDERATION/websso/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authOSFEDERATIONWebssoProtocolIdPost = function (protocolId, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authOSFEDERATIONWebssoProtocolIdPost(protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authProjectsGet = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authProjectsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authProjectsHead = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authProjectsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authSystemGet = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authSystemGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible system scopes for token.  GET/HEAD /v3/auth/system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authSystemHead = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authSystemHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke a token.  DELETE /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authTokensDelete = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authTokensDelete(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {string} xSubjectToken The authentication token. An authentication response returns the token ID in this header rather than in the response body.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authTokensGet = function (xSubjectToken, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authTokensGet(xSubjectToken, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Validate a token.  HEAD/GET /v3/auth/tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authTokensHead = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authTokensHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authTokensOSPKIRevokedGet = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authTokensOSPKIRevokedGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Deprecated; get revoked token list.  GET/HEAD /v3/auth/tokens/OS-PKI/revoked
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authTokensOSPKIRevokedHead = function (options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authTokensOSPKIRevokedHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Issue a token.  POST /v3/auth/tokens
     * @param {AuthTokensPostRequest} [authTokensPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    AuthApi.prototype.authTokensPost = function (authTokensPostRequest, options) {
        var _this = this;
        return (0, exports.AuthApiFp)(this.configuration).authTokensPost(authTokensPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AuthApi;
}(base_1.BaseAPI));
exports.AuthApi = AuthApi;
/**
 * CredentialsApi - axios parameter creator
 * @export
 */
var CredentialsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * DELETE operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdDelete: function (credentialId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([credentialId_1], args_1, true), void 0, function (credentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'credentialId' is not null or undefined
                            (0, common_1.assertParamExists)('credentialsCredentialIdDelete', 'credentialId', credentialId);
                            localVarPath = "/v3/credentials/{credential_id}"
                                .replace("{".concat("credential_id", "}"), encodeURIComponent(String(credentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdGet: function (credentialId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([credentialId_1], args_1, true), void 0, function (credentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'credentialId' is not null or undefined
                            (0, common_1.assertParamExists)('credentialsCredentialIdGet', 'credentialId', credentialId);
                            localVarPath = "/v3/credentials/{credential_id}"
                                .replace("{".concat("credential_id", "}"), encodeURIComponent(String(credentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdHead: function (credentialId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([credentialId_1], args_1, true), void 0, function (credentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'credentialId' is not null or undefined
                            (0, common_1.assertParamExists)('credentialsCredentialIdHead', 'credentialId', credentialId);
                            localVarPath = "/v3/credentials/{credential_id}"
                                .replace("{".concat("credential_id", "}"), encodeURIComponent(String(credentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdPatch: function (credentialId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([credentialId_1, body_1], args_1, true), void 0, function (credentialId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'credentialId' is not null or undefined
                            (0, common_1.assertParamExists)('credentialsCredentialIdPatch', 'credentialId', credentialId);
                            localVarPath = "/v3/credentials/{credential_id}"
                                .replace("{".concat("credential_id", "}"), encodeURIComponent(String(credentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/credentials";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/credentials";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/credentials
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/credentials";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CredentialsApiAxiosParamCreator = CredentialsApiAxiosParamCreator;
/**
 * CredentialsApi - functional programming interface
 * @export
 */
var CredentialsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CredentialsApiAxiosParamCreator)(configuration);
    return {
        /**
         * DELETE operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdDelete: function (credentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.credentialsCredentialIdDelete(credentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CredentialsApi.credentialsCredentialIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdGet: function (credentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.credentialsCredentialIdGet(credentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CredentialsApi.credentialsCredentialIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdHead: function (credentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.credentialsCredentialIdHead(credentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CredentialsApi.credentialsCredentialIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdPatch: function (credentialId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.credentialsCredentialIdPatch(credentialId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CredentialsApi.credentialsCredentialIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.credentialsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CredentialsApi.credentialsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.credentialsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CredentialsApi.credentialsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/credentials
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.credentialsPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['CredentialsApi.credentialsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.CredentialsApiFp = CredentialsApiFp;
/**
 * CredentialsApi - factory interface
 * @export
 */
var CredentialsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CredentialsApiFp)(configuration);
    return {
        /**
         * DELETE operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdDelete: function (credentialId, options) {
            return localVarFp.credentialsCredentialIdDelete(credentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdGet: function (credentialId, options) {
            return localVarFp.credentialsCredentialIdGet(credentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdHead: function (credentialId, options) {
            return localVarFp.credentialsCredentialIdHead(credentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/credentials/{credential_id}
         * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsCredentialIdPatch: function (credentialId, body, options) {
            return localVarFp.credentialsCredentialIdPatch(credentialId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsGet: function (options) {
            return localVarFp.credentialsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsHead: function (options) {
            return localVarFp.credentialsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/credentials
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        credentialsPost: function (body, options) {
            return localVarFp.credentialsPost(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CredentialsApiFactory = CredentialsApiFactory;
/**
 * CredentialsApi - object-oriented interface
 * @export
 * @class CredentialsApi
 * @extends {BaseAPI}
 */
var CredentialsApi = /** @class */ (function (_super) {
    __extends(CredentialsApi, _super);
    function CredentialsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * DELETE operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    CredentialsApi.prototype.credentialsCredentialIdDelete = function (credentialId, options) {
        var _this = this;
        return (0, exports.CredentialsApiFp)(this.configuration).credentialsCredentialIdDelete(credentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    CredentialsApi.prototype.credentialsCredentialIdGet = function (credentialId, options) {
        var _this = this;
        return (0, exports.CredentialsApiFp)(this.configuration).credentialsCredentialIdGet(credentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    CredentialsApi.prototype.credentialsCredentialIdHead = function (credentialId, options) {
        var _this = this;
        return (0, exports.CredentialsApiFp)(this.configuration).credentialsCredentialIdHead(credentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/credentials/{credential_id}
     * @param {string} credentialId credential_id parameter for /v3/credentials/{credential_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    CredentialsApi.prototype.credentialsCredentialIdPatch = function (credentialId, body, options) {
        var _this = this;
        return (0, exports.CredentialsApiFp)(this.configuration).credentialsCredentialIdPatch(credentialId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    CredentialsApi.prototype.credentialsGet = function (options) {
        var _this = this;
        return (0, exports.CredentialsApiFp)(this.configuration).credentialsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    CredentialsApi.prototype.credentialsHead = function (options) {
        var _this = this;
        return (0, exports.CredentialsApiFp)(this.configuration).credentialsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/credentials
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CredentialsApi
     */
    CredentialsApi.prototype.credentialsPost = function (body, options) {
        var _this = this;
        return (0, exports.CredentialsApiFp)(this.configuration).credentialsPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CredentialsApi;
}(base_1.BaseAPI));
exports.CredentialsApi = CredentialsApi;
/**
 * DomainConfigurationApi - axios parameter creator
 * @export
 */
var DomainConfigurationApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get default domain config.  GET/HEAD /v3/domains/config/default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigDefaultGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/domains/config/default";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get default domain config.  GET/HEAD /v3/domains/config/default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigDefaultHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/domains/config/default";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupDefaultGet: function (group_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([group_1], args_1, true), void 0, function (group, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsConfigGroupDefaultGet', 'group', group);
                            localVarPath = "/v3/domains/config/{group}/default"
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupDefaultHead: function (group_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([group_1], args_1, true), void 0, function (group, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsConfigGroupDefaultHead', 'group', group);
                            localVarPath = "/v3/domains/config/{group}/default"
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupOptionDefaultGet: function (group_1, option_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([group_1, option_1], args_1, true), void 0, function (group, option, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsConfigGroupOptionDefaultGet', 'group', group);
                            // verify required parameter 'option' is not null or undefined
                            (0, common_1.assertParamExists)('domainsConfigGroupOptionDefaultGet', 'option', option);
                            localVarPath = "/v3/domains/config/{group}/{option}/default"
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)))
                                .replace("{".concat("option", "}"), encodeURIComponent(String(option)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupOptionDefaultHead: function (group_1, option_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([group_1, option_1], args_1, true), void 0, function (group, option, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsConfigGroupOptionDefaultHead', 'group', group);
                            // verify required parameter 'option' is not null or undefined
                            (0, common_1.assertParamExists)('domainsConfigGroupOptionDefaultHead', 'option', option);
                            localVarPath = "/v3/domains/config/{group}/{option}/default"
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)))
                                .replace("{".concat("option", "}"), encodeURIComponent(String(option)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigDelete: function (domainId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1], args_1, true), void 0, function (domainId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigDelete', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}/config"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGet: function (domainId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1], args_1, true), void 0, function (domainId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGet', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}/config"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupDelete: function (domainId_1, group_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, group_1], args_1, true), void 0, function (domainId, group, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupDelete', 'domainId', domainId);
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupDelete', 'group', group);
                            localVarPath = "/v3/domains/{domain_id}/config/{group}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupGet: function (domainId_1, group_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, group_1], args_1, true), void 0, function (domainId, group, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupGet', 'domainId', domainId);
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupGet', 'group', group);
                            localVarPath = "/v3/domains/{domain_id}/config/{group}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupHead: function (domainId_1, group_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, group_1], args_1, true), void 0, function (domainId, group, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupHead', 'domainId', domainId);
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupHead', 'group', group);
                            localVarPath = "/v3/domains/{domain_id}/config/{group}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionDelete: function (domainId_1, group_1, option_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, group_1, option_1], args_1, true), void 0, function (domainId, group, option, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionDelete', 'domainId', domainId);
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionDelete', 'group', group);
                            // verify required parameter 'option' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionDelete', 'option', option);
                            localVarPath = "/v3/domains/{domain_id}/config/{group}/{option}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)))
                                .replace("{".concat("option", "}"), encodeURIComponent(String(option)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionGet: function (domainId_1, group_1, option_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, group_1, option_1], args_1, true), void 0, function (domainId, group, option, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionGet', 'domainId', domainId);
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionGet', 'group', group);
                            // verify required parameter 'option' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionGet', 'option', option);
                            localVarPath = "/v3/domains/{domain_id}/config/{group}/{option}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)))
                                .replace("{".concat("option", "}"), encodeURIComponent(String(option)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionHead: function (domainId_1, group_1, option_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, group_1, option_1], args_1, true), void 0, function (domainId, group, option, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionHead', 'domainId', domainId);
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionHead', 'group', group);
                            // verify required parameter 'option' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionHead', 'option', option);
                            localVarPath = "/v3/domains/{domain_id}/config/{group}/{option}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)))
                                .replace("{".concat("option", "}"), encodeURIComponent(String(option)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfigGroupOption} [domainConfigGroupOption]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionPatch: function (domainId_1, group_1, option_1, domainConfigGroupOption_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, group_1, option_1, domainConfigGroupOption_1], args_1, true), void 0, function (domainId, group, option, domainConfigGroupOption, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionPatch', 'domainId', domainId);
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionPatch', 'group', group);
                            // verify required parameter 'option' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupOptionPatch', 'option', option);
                            localVarPath = "/v3/domains/{domain_id}/config/{group}/{option}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)))
                                .replace("{".concat("option", "}"), encodeURIComponent(String(option)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainConfigGroupOption, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfigGroup} [domainConfigGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupPatch: function (domainId_1, group_1, domainConfigGroup_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, group_1, domainConfigGroup_1], args_1, true), void 0, function (domainId, group, domainConfigGroup, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupPatch', 'domainId', domainId);
                            // verify required parameter 'group' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigGroupPatch', 'group', group);
                            localVarPath = "/v3/domains/{domain_id}/config/{group}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group", "}"), encodeURIComponent(String(group)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainConfigGroup, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigHead: function (domainId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1], args_1, true), void 0, function (domainId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigHead', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}/config"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfig} [domainConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigPatch: function (domainId_1, domainConfig_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, domainConfig_1], args_1, true), void 0, function (domainId, domainConfig, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigPatch', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}/config"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainConfig, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create domain config.  PUT /v3/domains/{domain_id}/config
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfig} [domainConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigPut: function (domainId_1, domainConfig_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, domainConfig_1], args_1, true), void 0, function (domainId, domainConfig, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdConfigPut', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}/config"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domainConfig, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DomainConfigurationApiAxiosParamCreator = DomainConfigurationApiAxiosParamCreator;
/**
 * DomainConfigurationApi - functional programming interface
 * @export
 */
var DomainConfigurationApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DomainConfigurationApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get default domain config.  GET/HEAD /v3/domains/config/default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigDefaultGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsConfigDefaultGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsConfigDefaultGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get default domain config.  GET/HEAD /v3/domains/config/default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigDefaultHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsConfigDefaultHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsConfigDefaultHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupDefaultGet: function (group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsConfigGroupDefaultGet(group, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsConfigGroupDefaultGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupDefaultHead: function (group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsConfigGroupDefaultHead(group, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsConfigGroupDefaultHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupOptionDefaultGet: function (group, option, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsConfigGroupOptionDefaultGet(group, option, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsConfigGroupOptionDefaultGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupOptionDefaultHead: function (group, option, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsConfigGroupOptionDefaultHead(group, option, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsConfigGroupOptionDefaultHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigDelete: function (domainId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigDelete(domainId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGet: function (domainId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGet(domainId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupDelete: function (domainId, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGroupDelete(domainId, group, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGroupDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupGet: function (domainId, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGroupGet(domainId, group, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGroupGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupHead: function (domainId, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGroupHead(domainId, group, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGroupHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionDelete: function (domainId, group, option, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGroupOptionDelete(domainId, group, option, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGroupOptionDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionGet: function (domainId, group, option, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGroupOptionGet(domainId, group, option, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGroupOptionGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionHead: function (domainId, group, option, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGroupOptionHead(domainId, group, option, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGroupOptionHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfigGroupOption} [domainConfigGroupOption]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionPatch: function (domainId, group, option, domainConfigGroupOption, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGroupOptionPatch(domainId, group, option, domainConfigGroupOption, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGroupOptionPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfigGroup} [domainConfigGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupPatch: function (domainId, group, domainConfigGroup, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigGroupPatch(domainId, group, domainConfigGroup, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigGroupPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigHead: function (domainId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigHead(domainId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfig} [domainConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigPatch: function (domainId, domainConfig, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigPatch(domainId, domainConfig, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create domain config.  PUT /v3/domains/{domain_id}/config
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfig} [domainConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigPut: function (domainId, domainConfig, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdConfigPut(domainId, domainConfig, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainConfigurationApi.domainsDomainIdConfigPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DomainConfigurationApiFp = DomainConfigurationApiFp;
/**
 * DomainConfigurationApi - factory interface
 * @export
 */
var DomainConfigurationApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DomainConfigurationApiFp)(configuration);
    return {
        /**
         * Get default domain config.  GET/HEAD /v3/domains/config/default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigDefaultGet: function (options) {
            return localVarFp.domainsConfigDefaultGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get default domain config.  GET/HEAD /v3/domains/config/default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigDefaultHead: function (options) {
            return localVarFp.domainsConfigDefaultHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupDefaultGet: function (group, options) {
            return localVarFp.domainsConfigGroupDefaultGet(group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupDefaultHead: function (group, options) {
            return localVarFp.domainsConfigGroupDefaultHead(group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupOptionDefaultGet: function (group, option, options) {
            return localVarFp.domainsConfigGroupOptionDefaultGet(group, option, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
         * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
         * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsConfigGroupOptionDefaultHead: function (group, option, options) {
            return localVarFp.domainsConfigGroupOptionDefaultHead(group, option, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigDelete: function (domainId, options) {
            return localVarFp.domainsDomainIdConfigDelete(domainId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGet: function (domainId, options) {
            return localVarFp.domainsDomainIdConfigGet(domainId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupDelete: function (domainId, group, options) {
            return localVarFp.domainsDomainIdConfigGroupDelete(domainId, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupGet: function (domainId, group, options) {
            return localVarFp.domainsDomainIdConfigGroupGet(domainId, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupHead: function (domainId, group, options) {
            return localVarFp.domainsDomainIdConfigGroupHead(domainId, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionDelete: function (domainId, group, option, options) {
            return localVarFp.domainsDomainIdConfigGroupOptionDelete(domainId, group, option, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionGet: function (domainId, group, option, options) {
            return localVarFp.domainsDomainIdConfigGroupOptionGet(domainId, group, option, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionHead: function (domainId, group, option, options) {
            return localVarFp.domainsDomainIdConfigGroupOptionHead(domainId, group, option, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfigGroupOption} [domainConfigGroupOption]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupOptionPatch: function (domainId, group, option, domainConfigGroupOption, options) {
            return localVarFp.domainsDomainIdConfigGroupOptionPatch(domainId, group, option, domainConfigGroupOption, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfigGroup} [domainConfigGroup]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigGroupPatch: function (domainId, group, domainConfigGroup, options) {
            return localVarFp.domainsDomainIdConfigGroupPatch(domainId, group, domainConfigGroup, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigHead: function (domainId, options) {
            return localVarFp.domainsDomainIdConfigHead(domainId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfig} [domainConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigPatch: function (domainId, domainConfig, options) {
            return localVarFp.domainsDomainIdConfigPatch(domainId, domainConfig, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create domain config.  PUT /v3/domains/{domain_id}/config
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
         * @param {DomainConfig} [domainConfig]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdConfigPut: function (domainId, domainConfig, options) {
            return localVarFp.domainsDomainIdConfigPut(domainId, domainConfig, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DomainConfigurationApiFactory = DomainConfigurationApiFactory;
/**
 * DomainConfigurationApi - object-oriented interface
 * @export
 * @class DomainConfigurationApi
 * @extends {BaseAPI}
 */
var DomainConfigurationApi = /** @class */ (function (_super) {
    __extends(DomainConfigurationApi, _super);
    function DomainConfigurationApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsConfigDefaultGet = function (options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsConfigDefaultGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get default domain config.  GET/HEAD /v3/domains/config/default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsConfigDefaultHead = function (options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsConfigDefaultHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsConfigGroupDefaultGet = function (group, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsConfigGroupDefaultGet(group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get default domain group config.  GET/HEAD /v3/domains/config/{group}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsConfigGroupDefaultHead = function (group, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsConfigGroupDefaultHead(group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsConfigGroupOptionDefaultGet = function (group, option, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsConfigGroupOptionDefaultGet(group, option, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get default domain group option config.  GET/HEAD /v3/domains/config/{group}/{option}/default
     * @param {string} group group parameter for /v3/domains/config/{group}/{option}/default API
     * @param {string} option option parameter for /v3/domains/config/{group}/{option}/default API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsConfigGroupOptionDefaultHead = function (group, option, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsConfigGroupOptionDefaultHead(group, option, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigDelete = function (domainId, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigDelete(domainId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGet = function (domainId, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGet(domainId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGroupDelete = function (domainId, group, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGroupDelete(domainId, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGroupGet = function (domainId, group, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGroupGet(domainId, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGroupHead = function (domainId, group, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGroupHead(domainId, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete domain config.  DELETE /v3/domains/{domain_id}/config DELETE /v3/domains/{domain_id}/config/{group} DELETE /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGroupOptionDelete = function (domainId, group, option, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGroupOptionDelete(domainId, group, option, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGroupOptionGet = function (domainId, group, option, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGroupOptionGet(domainId, group, option, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGroupOptionHead = function (domainId, group, option, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGroupOptionHead(domainId, group, option, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} option option parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroupOption} [domainConfigGroupOption]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGroupOptionPatch = function (domainId, group, option, domainConfigGroupOption, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGroupOptionPatch(domainId, group, option, domainConfigGroupOption, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {string} group group parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfigGroup} [domainConfigGroup]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigGroupPatch = function (domainId, group, domainConfigGroup, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigGroupPatch(domainId, group, domainConfigGroup, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if config option exists.  GET/HEAD /v3/domains/{domain_id}/config GET/HEAD /v3/domains/{domain_id}/config/{group} GET/HEAD /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigHead = function (domainId, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigHead(domainId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update domain config option.  PATCH /v3/domains/{domain_id}/config PATCH /v3/domains/{domain_id}/config/{group} PATCH /v3/domains/{domain_id}/config/{group}/{option}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigPatch = function (domainId, domainConfig, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigPatch(domainId, domainConfig, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create domain config.  PUT /v3/domains/{domain_id}/config
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/config/{group}/{option} API
     * @param {DomainConfig} [domainConfig]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainConfigurationApi
     */
    DomainConfigurationApi.prototype.domainsDomainIdConfigPut = function (domainId, domainConfig, options) {
        var _this = this;
        return (0, exports.DomainConfigurationApiFp)(this.configuration).domainsDomainIdConfigPut(domainId, domainConfig, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DomainConfigurationApi;
}(base_1.BaseAPI));
exports.DomainConfigurationApi = DomainConfigurationApi;
/**
 * DomainsApi - axios parameter creator
 * @export
 */
var DomainsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Delete domain.  DELETE /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdDelete: function (domainId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1], args_1, true), void 0, function (domainId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdDelete', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGet: function (domainId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1], args_1, true), void 0, function (domainId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGet', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdHead: function (domainId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1], args_1, true), void 0, function (domainId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdHead', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update domain.  PATCH /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {Domain} [domain]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdPatch: function (domainId_1, domain_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, domain_1], args_1, true), void 0, function (domainId, domain, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdPatch', 'domainId', domainId);
                            localVarPath = "/v3/domains/{domain_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domain, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} [name] Filters the response by a domain name.
         * @param {boolean} [enabled] If set to true, then only domains that are enabled will be returned, if set to false only that are disabled will be returned. Any value other than 0, including no value, will be interpreted as true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsGet: function (name_1, enabled_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([name_1, enabled_1], args_1, true), void 0, function (name, enabled, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (enabled !== undefined) {
                                localVarQueryParameter['enabled'] = enabled;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create domain.  POST /v3/domains
         * @param {Domain} [domain]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsPost: function (domain_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domain_1], args_1, true), void 0, function (domain, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(domain, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.DomainsApiAxiosParamCreator = DomainsApiAxiosParamCreator;
/**
 * DomainsApi - functional programming interface
 * @export
 */
var DomainsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.DomainsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Delete domain.  DELETE /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdDelete: function (domainId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdDelete(domainId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainsApi.domainsDomainIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGet: function (domainId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdGet(domainId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainsApi.domainsDomainIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdHead: function (domainId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdHead(domainId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainsApi.domainsDomainIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update domain.  PATCH /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {Domain} [domain]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdPatch: function (domainId, domain, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdPatch(domainId, domain, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainsApi.domainsDomainIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} [name] Filters the response by a domain name.
         * @param {boolean} [enabled] If set to true, then only domains that are enabled will be returned, if set to false only that are disabled will be returned. Any value other than 0, including no value, will be interpreted as true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsGet: function (name, enabled, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsGet(name, enabled, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainsApi.domainsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainsApi.domainsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create domain.  POST /v3/domains
         * @param {Domain} [domain]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsPost: function (domain, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsPost(domain, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['DomainsApi.domainsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.DomainsApiFp = DomainsApiFp;
/**
 * DomainsApi - factory interface
 * @export
 */
var DomainsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.DomainsApiFp)(configuration);
    return {
        /**
         * Delete domain.  DELETE /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdDelete: function (domainId, options) {
            return localVarFp.domainsDomainIdDelete(domainId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGet: function (domainId, options) {
            return localVarFp.domainsDomainIdGet(domainId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdHead: function (domainId, options) {
            return localVarFp.domainsDomainIdHead(domainId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update domain.  PATCH /v3/domains/{domain_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
         * @param {Domain} [domain]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdPatch: function (domainId, domain, options) {
            return localVarFp.domainsDomainIdPatch(domainId, domain, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {string} [name] Filters the response by a domain name.
         * @param {boolean} [enabled] If set to true, then only domains that are enabled will be returned, if set to false only that are disabled will be returned. Any value other than 0, including no value, will be interpreted as true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsGet: function (name, enabled, options) {
            return localVarFp.domainsGet(name, enabled, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsHead: function (options) {
            return localVarFp.domainsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create domain.  POST /v3/domains
         * @param {Domain} [domain]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsPost: function (domain, options) {
            return localVarFp.domainsPost(domain, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.DomainsApiFactory = DomainsApiFactory;
/**
 * DomainsApi - object-oriented interface
 * @export
 * @class DomainsApi
 * @extends {BaseAPI}
 */
var DomainsApi = /** @class */ (function (_super) {
    __extends(DomainsApi, _super);
    function DomainsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Delete domain.  DELETE /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    DomainsApi.prototype.domainsDomainIdDelete = function (domainId, options) {
        var _this = this;
        return (0, exports.DomainsApiFp)(this.configuration).domainsDomainIdDelete(domainId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    DomainsApi.prototype.domainsDomainIdGet = function (domainId, options) {
        var _this = this;
        return (0, exports.DomainsApiFp)(this.configuration).domainsDomainIdGet(domainId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    DomainsApi.prototype.domainsDomainIdHead = function (domainId, options) {
        var _this = this;
        return (0, exports.DomainsApiFp)(this.configuration).domainsDomainIdHead(domainId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update domain.  PATCH /v3/domains/{domain_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id} API
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    DomainsApi.prototype.domainsDomainIdPatch = function (domainId, domain, options) {
        var _this = this;
        return (0, exports.DomainsApiFp)(this.configuration).domainsDomainIdPatch(domainId, domain, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {string} [name] Filters the response by a domain name.
     * @param {boolean} [enabled] If set to true, then only domains that are enabled will be returned, if set to false only that are disabled will be returned. Any value other than 0, including no value, will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    DomainsApi.prototype.domainsGet = function (name, enabled, options) {
        var _this = this;
        return (0, exports.DomainsApiFp)(this.configuration).domainsGet(name, enabled, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get domain or list domains.  GET/HEAD /v3/domains GET/HEAD /v3/domains/{domain_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    DomainsApi.prototype.domainsHead = function (options) {
        var _this = this;
        return (0, exports.DomainsApiFp)(this.configuration).domainsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create domain.  POST /v3/domains
     * @param {Domain} [domain]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainsApi
     */
    DomainsApi.prototype.domainsPost = function (domain, options) {
        var _this = this;
        return (0, exports.DomainsApiFp)(this.configuration).domainsPost(domain, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DomainsApi;
}(base_1.BaseAPI));
exports.DomainsApi = DomainsApi;
/**
 * Ec2tokensApi - axios parameter creator
 * @export
 */
var Ec2tokensApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/ec2tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/ec2tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/ec2tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/ec2tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Authenticate ec2 token.  POST /v3/ec2tokens
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/ec2tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.Ec2tokensApiAxiosParamCreator = Ec2tokensApiAxiosParamCreator;
/**
 * Ec2tokensApi - functional programming interface
 * @export
 */
var Ec2tokensApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.Ec2tokensApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/ec2tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ec2tokensGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['Ec2tokensApi.ec2tokensGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/ec2tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ec2tokensHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['Ec2tokensApi.ec2tokensHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Authenticate ec2 token.  POST /v3/ec2tokens
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.ec2tokensPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['Ec2tokensApi.ec2tokensPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.Ec2tokensApiFp = Ec2tokensApiFp;
/**
 * Ec2tokensApi - factory interface
 * @export
 */
var Ec2tokensApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.Ec2tokensApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/ec2tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensGet: function (options) {
            return localVarFp.ec2tokensGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/ec2tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensHead: function (options) {
            return localVarFp.ec2tokensHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Authenticate ec2 token.  POST /v3/ec2tokens
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ec2tokensPost: function (body, options) {
            return localVarFp.ec2tokensPost(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.Ec2tokensApiFactory = Ec2tokensApiFactory;
/**
 * Ec2tokensApi - object-oriented interface
 * @export
 * @class Ec2tokensApi
 * @extends {BaseAPI}
 */
var Ec2tokensApi = /** @class */ (function (_super) {
    __extends(Ec2tokensApi, _super);
    function Ec2tokensApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Ec2tokensApi
     */
    Ec2tokensApi.prototype.ec2tokensGet = function (options) {
        var _this = this;
        return (0, exports.Ec2tokensApiFp)(this.configuration).ec2tokensGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/ec2tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Ec2tokensApi
     */
    Ec2tokensApi.prototype.ec2tokensHead = function (options) {
        var _this = this;
        return (0, exports.Ec2tokensApiFp)(this.configuration).ec2tokensHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Authenticate ec2 token.  POST /v3/ec2tokens
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Ec2tokensApi
     */
    Ec2tokensApi.prototype.ec2tokensPost = function (body, options) {
        var _this = this;
        return (0, exports.Ec2tokensApiFp)(this.configuration).ec2tokensPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return Ec2tokensApi;
}(base_1.BaseAPI));
exports.Ec2tokensApi = Ec2tokensApi;
/**
 * EndpointsApi - axios parameter creator
 * @export
 */
var EndpointsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * DELETE operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdDelete: function (endpointId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointId_1], args_1, true), void 0, function (endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('endpointsEndpointIdDelete', 'endpointId', endpointId);
                            localVarPath = "/v3/endpoints/{endpoint_id}"
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdGet: function (endpointId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointId_1], args_1, true), void 0, function (endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('endpointsEndpointIdGet', 'endpointId', endpointId);
                            localVarPath = "/v3/endpoints/{endpoint_id}"
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdHead: function (endpointId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointId_1], args_1, true), void 0, function (endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('endpointsEndpointIdHead', 'endpointId', endpointId);
                            localVarPath = "/v3/endpoints/{endpoint_id}"
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        endpointsEndpointIdOSENDPOINTPOLICYPolicyGet: function (endpointId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointId_1], args_1, true), void 0, function (endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('endpointsEndpointIdOSENDPOINTPOLICYPolicyGet', 'endpointId', endpointId);
                            localVarPath = "/v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy"
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdOSENDPOINTPOLICYPolicyHead: function (endpointId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointId_1], args_1, true), void 0, function (endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('endpointsEndpointIdOSENDPOINTPOLICYPolicyHead', 'endpointId', endpointId);
                            localVarPath = "/v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy"
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdPatch: function (endpointId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointId_1, body_1], args_1, true), void 0, function (endpointId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('endpointsEndpointIdPatch', 'endpointId', endpointId);
                            localVarPath = "/v3/endpoints/{endpoint_id}"
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/endpoints
         * @param {string} [serviceId] Filters the response by a service ID.
         * @param {string} [region] Filters the response by a region ID.
         * @param {EndpointsGetInterfaceEnum} [_interface] Filters the response by an interface.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsGet: function (serviceId_1, region_1, _interface_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([serviceId_1, region_1, _interface_1], args_1, true), void 0, function (serviceId, region, _interface, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/endpoints";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (serviceId !== undefined) {
                                localVarQueryParameter['service_id'] = serviceId;
                            }
                            if (region !== undefined) {
                                localVarQueryParameter['region'] = region;
                            }
                            if (_interface !== undefined) {
                                localVarQueryParameter['interface'] = _interface;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/endpoints";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/endpoints
         * @param {Endpoint} [endpoint]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsPost: function (endpoint_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpoint_1], args_1, true), void 0, function (endpoint, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/endpoints";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(endpoint, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.EndpointsApiAxiosParamCreator = EndpointsApiAxiosParamCreator;
/**
 * EndpointsApi - functional programming interface
 * @export
 */
var EndpointsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.EndpointsApiAxiosParamCreator)(configuration);
    return {
        /**
         * DELETE operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdDelete: function (endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsEndpointIdDelete(endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsEndpointIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdGet: function (endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsEndpointIdGet(endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsEndpointIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdHead: function (endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsEndpointIdHead(endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsEndpointIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        endpointsEndpointIdOSENDPOINTPOLICYPolicyGet: function (endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsEndpointIdOSENDPOINTPOLICYPolicyGet(endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsEndpointIdOSENDPOINTPOLICYPolicyGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdOSENDPOINTPOLICYPolicyHead: function (endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsEndpointIdOSENDPOINTPOLICYPolicyHead(endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsEndpointIdOSENDPOINTPOLICYPolicyHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdPatch: function (endpointId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsEndpointIdPatch(endpointId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsEndpointIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/endpoints
         * @param {string} [serviceId] Filters the response by a service ID.
         * @param {string} [region] Filters the response by a region ID.
         * @param {EndpointsGetInterfaceEnum} [_interface] Filters the response by an interface.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsGet: function (serviceId, region, _interface, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsGet(serviceId, region, _interface, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/endpoints
         * @param {Endpoint} [endpoint]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsPost: function (endpoint, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.endpointsPost(endpoint, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['EndpointsApi.endpointsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.EndpointsApiFp = EndpointsApiFp;
/**
 * EndpointsApi - factory interface
 * @export
 */
var EndpointsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.EndpointsApiFp)(configuration);
    return {
        /**
         * DELETE operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdDelete: function (endpointId, options) {
            return localVarFp.endpointsEndpointIdDelete(endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdGet: function (endpointId, options) {
            return localVarFp.endpointsEndpointIdGet(endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdHead: function (endpointId, options) {
            return localVarFp.endpointsEndpointIdHead(endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        endpointsEndpointIdOSENDPOINTPOLICYPolicyGet: function (endpointId, options) {
            return localVarFp.endpointsEndpointIdOSENDPOINTPOLICYPolicyGet(endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdOSENDPOINTPOLICYPolicyHead: function (endpointId, options) {
            return localVarFp.endpointsEndpointIdOSENDPOINTPOLICYPolicyHead(endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/endpoints/{endpoint_id}
         * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsEndpointIdPatch: function (endpointId, body, options) {
            return localVarFp.endpointsEndpointIdPatch(endpointId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/endpoints
         * @param {string} [serviceId] Filters the response by a service ID.
         * @param {string} [region] Filters the response by a region ID.
         * @param {EndpointsGetInterfaceEnum} [_interface] Filters the response by an interface.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsGet: function (serviceId, region, _interface, options) {
            return localVarFp.endpointsGet(serviceId, region, _interface, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/endpoints
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsHead: function (options) {
            return localVarFp.endpointsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/endpoints
         * @param {Endpoint} [endpoint]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointsPost: function (endpoint, options) {
            return localVarFp.endpointsPost(endpoint, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.EndpointsApiFactory = EndpointsApiFactory;
/**
 * EndpointsApi - object-oriented interface
 * @export
 * @class EndpointsApi
 * @extends {BaseAPI}
 */
var EndpointsApi = /** @class */ (function (_super) {
    __extends(EndpointsApi, _super);
    function EndpointsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * DELETE operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsEndpointIdDelete = function (endpointId, options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsEndpointIdDelete(endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsEndpointIdGet = function (endpointId, options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsEndpointIdGet(endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsEndpointIdHead = function (endpointId, options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsEndpointIdHead(endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsEndpointIdOSENDPOINTPOLICYPolicyGet = function (endpointId, options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsEndpointIdOSENDPOINTPOLICYPolicyGet(endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id}/OS-ENDPOINT-POLICY/policy API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsEndpointIdOSENDPOINTPOLICYPolicyHead = function (endpointId, options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsEndpointIdOSENDPOINTPOLICYPolicyHead(endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/endpoints/{endpoint_id}
     * @param {string} endpointId endpoint_id parameter for /v3/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsEndpointIdPatch = function (endpointId, body, options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsEndpointIdPatch(endpointId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/endpoints
     * @param {string} [serviceId] Filters the response by a service ID.
     * @param {string} [region] Filters the response by a region ID.
     * @param {EndpointsGetInterfaceEnum} [_interface] Filters the response by an interface.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsGet = function (serviceId, region, _interface, options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsGet(serviceId, region, _interface, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/endpoints
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsHead = function (options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/endpoints
     * @param {Endpoint} [endpoint]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointsApi
     */
    EndpointsApi.prototype.endpointsPost = function (endpoint, options) {
        var _this = this;
        return (0, exports.EndpointsApiFp)(this.configuration).endpointsPost(endpoint, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return EndpointsApi;
}(base_1.BaseAPI));
exports.EndpointsApi = EndpointsApi;
/**
 * @export
 */
exports.EndpointsGetInterfaceEnum = {
    Public: 'public',
    Internal: 'internal',
    Admin: 'admin'
};
/**
 * GroupsApi - axios parameter creator
 * @export
 */
var GroupsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/groups
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: function (domainId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1], args_1, true), void 0, function (domainId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (domainId !== undefined) {
                                localVarQueryParameter['domain_id'] = domainId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete group.  DELETE /groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDelete: function (groupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1], args_1, true), void 0, function (groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdDelete', 'groupId', groupId);
                            localVarPath = "/v3/groups/{group_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet: function (groupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1], args_1, true), void 0, function (groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdGet', 'groupId', groupId);
                            localVarPath = "/v3/groups/{group_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdHead: function (groupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1], args_1, true), void 0, function (groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdHead', 'groupId', groupId);
                            localVarPath = "/v3/groups/{group_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update group.  PATCH /groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {Group} [group]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPatch: function (groupId_1, group_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, group_1], args_1, true), void 0, function (groupId, group, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdPatch', 'groupId', groupId);
                            localVarPath = "/v3/groups/{group_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(group, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get list of users in group.  GET/HEAD /groups/{group_id}/users
         * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersGet: function (passwordExpiresAt_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([passwordExpiresAt_1], args_1, true), void 0, function (passwordExpiresAt, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/groups/{group_id}/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (passwordExpiresAt !== undefined) {
                                localVarQueryParameter['password_expires_at'] = (passwordExpiresAt instanceof Date) ?
                                    passwordExpiresAt.toISOString() :
                                    passwordExpiresAt;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get list of users in group.  GET/HEAD /groups/{group_id}/users
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersHead: function (groupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1], args_1, true), void 0, function (groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersHead', 'groupId', groupId);
                            localVarPath = "/v3/groups/{group_id}/users"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Remove user from group.  DELETE /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdDelete: function (groupId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, userId_1], args_1, true), void 0, function (groupId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersUserIdDelete', 'groupId', groupId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersUserIdDelete', 'userId', userId);
                            localVarPath = "/v3/groups/{group_id}/users/{user_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdGet: function (groupId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, userId_1], args_1, true), void 0, function (groupId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersUserIdGet', 'groupId', groupId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersUserIdGet', 'userId', userId);
                            localVarPath = "/v3/groups/{group_id}/users/{user_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdHead: function (groupId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, userId_1], args_1, true), void 0, function (groupId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersUserIdHead', 'groupId', groupId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersUserIdHead', 'userId', userId);
                            localVarPath = "/v3/groups/{group_id}/users/{user_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Add user to group.  PUT /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdPut: function (groupId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, userId_1], args_1, true), void 0, function (groupId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersUserIdPut', 'groupId', groupId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('groupsGroupIdUsersUserIdPut', 'userId', userId);
                            localVarPath = "/v3/groups/{group_id}/users/{user_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create group.  POST /groups
         * @param {Group} [group]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost: function (group_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([group_1], args_1, true), void 0, function (group, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(group, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.GroupsApiAxiosParamCreator = GroupsApiAxiosParamCreator;
/**
 * GroupsApi - functional programming interface
 * @export
 */
var GroupsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.GroupsApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/groups
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: function (domainId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGet(domainId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete group.  DELETE /groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDelete: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdDelete(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdGet(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdHead: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdHead(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update group.  PATCH /groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {Group} [group]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPatch: function (groupId, group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdPatch(groupId, group, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get list of users in group.  GET/HEAD /groups/{group_id}/users
         * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersGet: function (passwordExpiresAt, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdUsersGet(passwordExpiresAt, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdUsersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get list of users in group.  GET/HEAD /groups/{group_id}/users
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersHead: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdUsersHead(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdUsersHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Remove user from group.  DELETE /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdDelete: function (groupId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdUsersUserIdDelete(groupId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdUsersUserIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdGet: function (groupId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdUsersUserIdGet(groupId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdUsersUserIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdHead: function (groupId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdUsersUserIdHead(groupId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdUsersUserIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Add user to group.  PUT /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdPut: function (groupId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsGroupIdUsersUserIdPut(groupId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsGroupIdUsersUserIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create group.  POST /groups
         * @param {Group} [group]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost: function (group, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.groupsPost(group, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['GroupsApi.groupsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.GroupsApiFp = GroupsApiFp;
/**
 * GroupsApi - factory interface
 * @export
 */
var GroupsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.GroupsApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/groups
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: function (domainId, options) {
            return localVarFp.groupsGet(domainId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete group.  DELETE /groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdDelete: function (groupId, options) {
            return localVarFp.groupsGroupIdDelete(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdGet: function (groupId, options) {
            return localVarFp.groupsGroupIdGet(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdHead: function (groupId, options) {
            return localVarFp.groupsGroupIdHead(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update group.  PATCH /groups/{group_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
         * @param {Group} [group]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdPatch: function (groupId, group, options) {
            return localVarFp.groupsGroupIdPatch(groupId, group, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get list of users in group.  GET/HEAD /groups/{group_id}/users
         * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersGet: function (passwordExpiresAt, options) {
            return localVarFp.groupsGroupIdUsersGet(passwordExpiresAt, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get list of users in group.  GET/HEAD /groups/{group_id}/users
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersHead: function (groupId, options) {
            return localVarFp.groupsGroupIdUsersHead(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Remove user from group.  DELETE /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdDelete: function (groupId, userId, options) {
            return localVarFp.groupsGroupIdUsersUserIdDelete(groupId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdGet: function (groupId, userId, options) {
            return localVarFp.groupsGroupIdUsersUserIdGet(groupId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdHead: function (groupId, userId, options) {
            return localVarFp.groupsGroupIdUsersUserIdHead(groupId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Add user to group.  PUT /groups/{group_id}/users/{user_id}
         * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIdUsersUserIdPut: function (groupId, userId, options) {
            return localVarFp.groupsGroupIdUsersUserIdPut(groupId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsHead: function (options) {
            return localVarFp.groupsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create group.  POST /groups
         * @param {Group} [group]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost: function (group, options) {
            return localVarFp.groupsPost(group, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.GroupsApiFactory = GroupsApiFactory;
/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
var GroupsApi = /** @class */ (function (_super) {
    __extends(GroupsApi, _super);
    function GroupsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/groups
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGet = function (domainId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGet(domainId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete group.  DELETE /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdDelete = function (groupId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdDelete(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdGet = function (groupId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdGet(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdHead = function (groupId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdHead(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update group.  PATCH /groups/{group_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id} API
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdPatch = function (groupId, group, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdPatch(groupId, group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdUsersGet = function (passwordExpiresAt, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdUsersGet(passwordExpiresAt, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get list of users in group.  GET/HEAD /groups/{group_id}/users
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdUsersHead = function (groupId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdUsersHead(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Remove user from group.  DELETE /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdUsersUserIdDelete = function (groupId, userId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdUsersUserIdDelete(groupId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdUsersUserIdGet = function (groupId, userId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdUsersUserIdGet(groupId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a user is in a group.  GET/HEAD /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdUsersUserIdHead = function (groupId, userId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdUsersUserIdHead(groupId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Add user to group.  PUT /groups/{group_id}/users/{user_id}
     * @param {string} groupId group_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {string} userId user_id parameter for /v3/groups/{group_id}/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsGroupIdUsersUserIdPut = function (groupId, userId, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsGroupIdUsersUserIdPut(groupId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsHead = function (options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create group.  POST /groups
     * @param {Group} [group]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    GroupsApi.prototype.groupsPost = function (group, options) {
        var _this = this;
        return (0, exports.GroupsApiFp)(this.configuration).groupsPost(group, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return GroupsApi;
}(base_1.BaseAPI));
exports.GroupsApi = GroupsApi;
/**
 * LimitsApi - axios parameter creator
 * @export
 */
var LimitsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/limits";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/limits";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdDelete: function (limitId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([limitId_1], args_1, true), void 0, function (limitId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'limitId' is not null or undefined
                            (0, common_1.assertParamExists)('limitsLimitIdDelete', 'limitId', limitId);
                            localVarPath = "/v3/limits/{limit_id}"
                                .replace("{".concat("limit_id", "}"), encodeURIComponent(String(limitId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdGet: function (limitId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([limitId_1], args_1, true), void 0, function (limitId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'limitId' is not null or undefined
                            (0, common_1.assertParamExists)('limitsLimitIdGet', 'limitId', limitId);
                            localVarPath = "/v3/limits/{limit_id}"
                                .replace("{".concat("limit_id", "}"), encodeURIComponent(String(limitId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdHead: function (limitId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([limitId_1], args_1, true), void 0, function (limitId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'limitId' is not null or undefined
                            (0, common_1.assertParamExists)('limitsLimitIdHead', 'limitId', limitId);
                            localVarPath = "/v3/limits/{limit_id}"
                                .replace("{".concat("limit_id", "}"), encodeURIComponent(String(limitId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdPatch: function (limitId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([limitId_1, body_1], args_1, true), void 0, function (limitId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'limitId' is not null or undefined
                            (0, common_1.assertParamExists)('limitsLimitIdPatch', 'limitId', limitId);
                            localVarPath = "/v3/limits/{limit_id}"
                                .replace("{".concat("limit_id", "}"), encodeURIComponent(String(limitId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/limits/model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsModelGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/limits/model";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/limits/model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsModelHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/limits/model";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/limits
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/limits";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.LimitsApiAxiosParamCreator = LimitsApiAxiosParamCreator;
/**
 * LimitsApi - functional programming interface
 * @export
 */
var LimitsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.LimitsApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdDelete: function (limitId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsLimitIdDelete(limitId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsLimitIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdGet: function (limitId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsLimitIdGet(limitId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsLimitIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdHead: function (limitId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsLimitIdHead(limitId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsLimitIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdPatch: function (limitId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsLimitIdPatch(limitId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsLimitIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/limits/model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsModelGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsModelGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsModelGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/limits/model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsModelHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsModelHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsModelHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/limits
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.limitsPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['LimitsApi.limitsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.LimitsApiFp = LimitsApiFp;
/**
 * LimitsApi - factory interface
 * @export
 */
var LimitsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.LimitsApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsGet: function (options) {
            return localVarFp.limitsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsHead: function (options) {
            return localVarFp.limitsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdDelete: function (limitId, options) {
            return localVarFp.limitsLimitIdDelete(limitId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdGet: function (limitId, options) {
            return localVarFp.limitsLimitIdGet(limitId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdHead: function (limitId, options) {
            return localVarFp.limitsLimitIdHead(limitId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/limits/{limit_id}
         * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsLimitIdPatch: function (limitId, body, options) {
            return localVarFp.limitsLimitIdPatch(limitId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/limits/model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsModelGet: function (options) {
            return localVarFp.limitsModelGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/limits/model
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsModelHead: function (options) {
            return localVarFp.limitsModelHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/limits
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        limitsPost: function (body, options) {
            return localVarFp.limitsPost(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.LimitsApiFactory = LimitsApiFactory;
/**
 * LimitsApi - object-oriented interface
 * @export
 * @class LimitsApi
 * @extends {BaseAPI}
 */
var LimitsApi = /** @class */ (function (_super) {
    __extends(LimitsApi, _super);
    function LimitsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsGet = function (options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsHead = function (options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsLimitIdDelete = function (limitId, options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsLimitIdDelete(limitId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsLimitIdGet = function (limitId, options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsLimitIdGet(limitId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsLimitIdHead = function (limitId, options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsLimitIdHead(limitId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/limits/{limit_id}
     * @param {string} limitId limit_id parameter for /v3/limits/{limit_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsLimitIdPatch = function (limitId, body, options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsLimitIdPatch(limitId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsModelGet = function (options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsModelGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/limits/model
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsModelHead = function (options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsModelHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/limits
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LimitsApi
     */
    LimitsApi.prototype.limitsPost = function (body, options) {
        var _this = this;
        return (0, exports.LimitsApiFp)(this.configuration).limitsPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return LimitsApi;
}(base_1.BaseAPI));
exports.LimitsApi = LimitsApi;
/**
 * OSEPFILTERApi - axios parameter creator
 * @export
 */
var OSEPFILTERApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdDelete: function (endpointGroupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1], args_1, true), void 0, function (endpointGroupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdDelete', 'endpointGroupId', endpointGroupId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet: function (endpointGroupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1], args_1, true), void 0, function (endpointGroupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet', 'endpointGroupId', endpointGroupId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead: function (endpointGroupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1], args_1, true), void 0, function (endpointGroupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead', 'endpointGroupId', endpointGroupId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdGet: function (endpointGroupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1], args_1, true), void 0, function (endpointGroupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdGet', 'endpointGroupId', endpointGroupId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdHead: function (endpointGroupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1], args_1, true), void 0, function (endpointGroupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdHead', 'endpointGroupId', endpointGroupId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdPatch: function (endpointGroupId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1, body_1], args_1, true), void 0, function (endpointGroupId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdPatch', 'endpointGroupId', endpointGroupId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet: function (endpointGroupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1], args_1, true), void 0, function (endpointGroupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet', 'endpointGroupId', endpointGroupId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead: function (endpointGroupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1], args_1, true), void 0, function (endpointGroupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead', 'endpointGroupId', endpointGroupId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete: function (endpointGroupId_1, projectId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1, projectId_1], args_1, true), void 0, function (endpointGroupId, projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete', 'endpointGroupId', endpointGroupId);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete', 'projectId', projectId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)))
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet: function (endpointGroupId_1, projectId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1, projectId_1], args_1, true), void 0, function (endpointGroupId, projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet', 'endpointGroupId', endpointGroupId);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet', 'projectId', projectId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)))
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead: function (endpointGroupId_1, projectId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1, projectId_1], args_1, true), void 0, function (endpointGroupId, projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead', 'endpointGroupId', endpointGroupId);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead', 'projectId', projectId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)))
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut: function (endpointGroupId_1, projectId_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointGroupId_1, projectId_1, body_1], args_1, true), void 0, function (endpointGroupId, projectId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointGroupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut', 'endpointGroupId', endpointGroupId);
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut', 'projectId', projectId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}"
                                .replace("{".concat("endpoint_group_id", "}"), encodeURIComponent(String(endpointGroupId)))
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-EP-FILTER/endpoint_groups";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Return a list of projects associated with the endpoint.
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointsEndpointIdProjectsGet: function (endpointId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointId_1], args_1, true), void 0, function (endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointsEndpointIdProjectsGet', 'endpointId', endpointId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects"
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Return a list of projects associated with the endpoint.
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointsEndpointIdProjectsHead: function (endpointId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([endpointId_1], args_1, true), void 0, function (endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTEREndpointsEndpointIdProjectsHead', 'endpointId', endpointId);
                            localVarPath = "/v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects"
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointGroupsGet: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointGroupsGet', 'projectId', projectId);
                            localVarPath = "/v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointGroupsHead: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointGroupsHead', 'projectId', projectId);
                            localVarPath = "/v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete: function (projectId_1, endpointId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, endpointId_1], args_1, true), void 0, function (projectId, endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete', 'projectId', projectId);
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete', 'endpointId', endpointId);
                            localVarPath = "/v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet: function (projectId_1, endpointId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, endpointId_1], args_1, true), void 0, function (projectId, endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet', 'projectId', projectId);
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet', 'endpointId', endpointId);
                            localVarPath = "/v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead: function (projectId_1, endpointId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, endpointId_1], args_1, true), void 0, function (projectId, endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead', 'projectId', projectId);
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead', 'endpointId', endpointId);
                            localVarPath = "/v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut: function (projectId_1, endpointId_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, endpointId_1, body_1], args_1, true), void 0, function (projectId, endpointId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut', 'projectId', projectId);
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut', 'endpointId', endpointId);
                            localVarPath = "/v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsGet: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsGet', 'projectId', projectId);
                            localVarPath = "/v3/OS-EP-FILTER/projects/{project_id}/endpoints"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsHead: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSEPFILTERProjectsProjectIdEndpointsHead', 'projectId', projectId);
                            localVarPath = "/v3/OS-EP-FILTER/projects/{project_id}/endpoints"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSEPFILTERApiAxiosParamCreator = OSEPFILTERApiAxiosParamCreator;
/**
 * OSEPFILTERApi - functional programming interface
 * @export
 */
var OSEPFILTERApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OSEPFILTERApiAxiosParamCreator)(configuration);
    return {
        /**
         * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdDelete: function (endpointGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdDelete(endpointGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet: function (endpointGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet(endpointGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead: function (endpointGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead(endpointGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdGet: function (endpointGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdGet(endpointGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdHead: function (endpointGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdHead(endpointGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdPatch: function (endpointGroupId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdPatch(endpointGroupId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet: function (endpointGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet(endpointGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead: function (endpointGroupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead(endpointGroupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete: function (endpointGroupId, projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete(endpointGroupId, projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet: function (endpointGroupId, projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet(endpointGroupId, projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead: function (endpointGroupId, projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead(endpointGroupId, projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut: function (endpointGroupId, projectId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut(endpointGroupId, projectId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointGroupsPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointGroupsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Return a list of projects associated with the endpoint.
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointsEndpointIdProjectsGet: function (endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointsEndpointIdProjectsGet(endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointsEndpointIdProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Return a list of projects associated with the endpoint.
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointsEndpointIdProjectsHead: function (endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTEREndpointsEndpointIdProjectsHead(endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTEREndpointsEndpointIdProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointGroupsGet: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTERProjectsProjectIdEndpointGroupsGet(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTERProjectsProjectIdEndpointGroupsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointGroupsHead: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTERProjectsProjectIdEndpointGroupsHead(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTERProjectsProjectIdEndpointGroupsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete: function (projectId, endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete(projectId, endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet: function (projectId, endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet(projectId, endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead: function (projectId, endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead(projectId, endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut: function (projectId, endpointId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut(projectId, endpointId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsGet: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTERProjectsProjectIdEndpointsGet(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTERProjectsProjectIdEndpointsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsHead: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSEPFILTERProjectsProjectIdEndpointsHead(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSEPFILTERApi.oSEPFILTERProjectsProjectIdEndpointsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OSEPFILTERApiFp = OSEPFILTERApiFp;
/**
 * OSEPFILTERApi - factory interface
 * @export
 */
var OSEPFILTERApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OSEPFILTERApiFp)(configuration);
    return {
        /**
         * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdDelete: function (endpointGroupId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdDelete(endpointGroupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet: function (endpointGroupId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet(endpointGroupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead: function (endpointGroupId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead(endpointGroupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdGet: function (endpointGroupId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdGet(endpointGroupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdHead: function (endpointGroupId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdHead(endpointGroupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdPatch: function (endpointGroupId, body, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdPatch(endpointGroupId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet: function (endpointGroupId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet(endpointGroupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead: function (endpointGroupId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead(endpointGroupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete: function (endpointGroupId, projectId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete(endpointGroupId, projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet: function (endpointGroupId, projectId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet(endpointGroupId, projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead: function (endpointGroupId, projectId, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead(endpointGroupId, projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PUT operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
         * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut: function (endpointGroupId, projectId, body, options) {
            return localVarFp.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut(endpointGroupId, projectId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsGet: function (options) {
            return localVarFp.oSEPFILTEREndpointGroupsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsHead: function (options) {
            return localVarFp.oSEPFILTEREndpointGroupsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/OS-EP-FILTER/endpoint_groups
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointGroupsPost: function (body, options) {
            return localVarFp.oSEPFILTEREndpointGroupsPost(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Return a list of projects associated with the endpoint.
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointsEndpointIdProjectsGet: function (endpointId, options) {
            return localVarFp.oSEPFILTEREndpointsEndpointIdProjectsGet(endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Return a list of projects associated with the endpoint.
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTEREndpointsEndpointIdProjectsHead: function (endpointId, options) {
            return localVarFp.oSEPFILTEREndpointsEndpointIdProjectsHead(endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointGroupsGet: function (projectId, options) {
            return localVarFp.oSEPFILTERProjectsProjectIdEndpointGroupsGet(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointGroupsHead: function (projectId, options) {
            return localVarFp.oSEPFILTERProjectsProjectIdEndpointGroupsHead(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete: function (projectId, endpointId, options) {
            return localVarFp.oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete(projectId, endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet: function (projectId, endpointId, options) {
            return localVarFp.oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet(projectId, endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead: function (projectId, endpointId, options) {
            return localVarFp.oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead(projectId, endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PUT operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut: function (projectId, endpointId, body, options) {
            return localVarFp.oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut(projectId, endpointId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsGet: function (projectId, options) {
            return localVarFp.oSEPFILTERProjectsProjectIdEndpointsGet(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
         * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSEPFILTERProjectsProjectIdEndpointsHead: function (projectId, options) {
            return localVarFp.oSEPFILTERProjectsProjectIdEndpointsHead(projectId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OSEPFILTERApiFactory = OSEPFILTERApiFactory;
/**
 * OSEPFILTERApi - object-oriented interface
 * @export
 * @class OSEPFILTERApi
 * @extends {BaseAPI}
 */
var OSEPFILTERApi = /** @class */ (function (_super) {
    __extends(OSEPFILTERApi, _super);
    function OSEPFILTERApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdDelete = function (endpointGroupId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdDelete(endpointGroupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet = function (endpointGroupId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsGet(endpointGroupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead = function (endpointGroupId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdEndpointsHead(endpointGroupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdGet = function (endpointGroupId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdGet(endpointGroupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdHead = function (endpointGroupId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdHead(endpointGroupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdPatch = function (endpointGroupId, body, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdPatch(endpointGroupId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet = function (endpointGroupId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdProjectsGet(endpointGroupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead = function (endpointGroupId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdProjectsHead(endpointGroupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete = function (endpointGroupId, projectId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdDelete(endpointGroupId, projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet = function (endpointGroupId, projectId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdGet(endpointGroupId, projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead = function (endpointGroupId, projectId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdHead(endpointGroupId, projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PUT operation on /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id}
     * @param {string} endpointGroupId endpoint_group_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/endpoint_groups/{endpoint_group_id}/projects/{project_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut = function (endpointGroupId, projectId, body, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsEndpointGroupIdProjectsProjectIdPut(endpointGroupId, projectId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsGet = function (options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsHead = function (options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/OS-EP-FILTER/endpoint_groups
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointGroupsPost = function (body, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointGroupsPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointsEndpointIdProjectsGet = function (endpointId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointsEndpointIdProjectsGet(endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Return a list of projects associated with the endpoint.
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/endpoints/{endpoint_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTEREndpointsEndpointIdProjectsHead = function (endpointId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTEREndpointsEndpointIdProjectsHead(endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTERProjectsProjectIdEndpointGroupsGet = function (projectId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTERProjectsProjectIdEndpointGroupsGet(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoint_groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTERProjectsProjectIdEndpointGroupsHead = function (projectId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTERProjectsProjectIdEndpointGroupsHead(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete = function (projectId, endpointId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTERProjectsProjectIdEndpointsEndpointIdDelete(projectId, endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet = function (projectId, endpointId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTERProjectsProjectIdEndpointsEndpointIdGet(projectId, endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead = function (projectId, endpointId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTERProjectsProjectIdEndpointsEndpointIdHead(projectId, endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PUT operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id}
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {string} endpointId endpoint_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints/{endpoint_id} API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut = function (projectId, endpointId, body, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTERProjectsProjectIdEndpointsEndpointIdPut(projectId, endpointId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTERProjectsProjectIdEndpointsGet = function (projectId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTERProjectsProjectIdEndpointsGet(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-EP-FILTER/projects/{project_id}/endpoints
     * @param {string} projectId project_id parameter for /v3/OS-EP-FILTER/projects/{project_id}/endpoints API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSEPFILTERApi
     */
    OSEPFILTERApi.prototype.oSEPFILTERProjectsProjectIdEndpointsHead = function (projectId, options) {
        var _this = this;
        return (0, exports.OSEPFILTERApiFp)(this.configuration).oSEPFILTERProjectsProjectIdEndpointsHead(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OSEPFILTERApi;
}(base_1.BaseAPI));
exports.OSEPFILTERApi = OSEPFILTERApi;
/**
 * OSFEDERATIONApi - axios parameter creator
 * @export
 */
var OSFEDERATIONApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONDomainsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONDomainsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/domains";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/identity_providers
         * @param {string} [id] Filter for Identity Providers’ ID attribute
         * @param {boolean} [enabled] Filter for Identity Providers’ enabled attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersGet: function (id_1, enabled_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([id_1, enabled_1], args_1, true), void 0, function (id, enabled, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/identity_providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (enabled !== undefined) {
                                localVarQueryParameter['enabled'] = enabled;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/identity_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/identity_providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdDelete: function (idpId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1], args_1, true), void 0, function (idpId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdDelete', 'idpId', idpId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdGet: function (idpId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1], args_1, true), void 0, function (idpId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdGet', 'idpId', idpId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdHead: function (idpId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1], args_1, true), void 0, function (idpId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdHead', 'idpId', idpId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {OsFederationIdentityProviderPatchRequest} [osFederationIdentityProviderPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdPatch: function (idpId_1, osFederationIdentityProviderPatchRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, osFederationIdentityProviderPatchRequest_1], args_1, true), void 0, function (idpId, osFederationIdentityProviderPatchRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdPatch', 'idpId', idpId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(osFederationIdentityProviderPatchRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsGet: function (idpId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1], args_1, true), void 0, function (idpId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsGet', 'idpId', idpId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsHead: function (idpId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1], args_1, true), void 0, function (idpId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsHead', 'idpId', idpId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet: function (idpId_1, protocolId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1], args_1, true), void 0, function (idpId, protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet', 'protocolId', protocolId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead: function (idpId_1, protocolId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1], args_1, true), void 0, function (idpId, protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead', 'protocolId', protocolId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Authenticate from dedicated uri endpoint.  POST /OS-FEDERATION/identity_providers/      {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost: function (idpId_1, protocolId_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1, body_1], args_1, true), void 0, function (idpId, protocolId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost', 'protocolId', protocolId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a protocol from an IDP.  DELETE /OS-FEDERATION/identity_providers/        {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete: function (idpId_1, protocolId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1], args_1, true), void 0, function (idpId, protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete', 'protocolId', protocolId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet: function (idpId_1, protocolId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1], args_1, true), void 0, function (idpId, protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet', 'protocolId', protocolId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead: function (idpId_1, protocolId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1], args_1, true), void 0, function (idpId, protocolId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead', 'protocolId', protocolId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update protocol for an IDP.  PATCH /OS-FEDERATION/identity_providers/       {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {OsFederationIdentityProvidersProtocolPatchRequest} [osFederationIdentityProvidersProtocolPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch: function (idpId_1, protocolId_1, osFederationIdentityProvidersProtocolPatchRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1, osFederationIdentityProvidersProtocolPatchRequest_1], args_1, true), void 0, function (idpId, protocolId, osFederationIdentityProvidersProtocolPatchRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch', 'protocolId', protocolId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(osFederationIdentityProvidersProtocolPatchRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create protocol for an IDP.  PUT /OS-Federation/identity_providers/{idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {OsFederationIdentityProvidersProtocolPutRequest} [osFederationIdentityProvidersProtocolPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut: function (idpId_1, protocolId_1, osFederationIdentityProvidersProtocolPutRequest_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, protocolId_1, osFederationIdentityProvidersProtocolPutRequest_1], args_1, true), void 0, function (idpId, protocolId, osFederationIdentityProvidersProtocolPutRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut', 'idpId', idpId);
                            // verify required parameter 'protocolId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut', 'protocolId', protocolId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)))
                                .replace("{".concat("protocol_id", "}"), encodeURIComponent(String(protocolId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(osFederationIdentityProvidersProtocolPutRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create an idp resource for federated authentication.  PUT /OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {OsFederationIdentityProviderPutRequest} [osFederationIdentityProviderPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdPut: function (idpId_1, osFederationIdentityProviderPutRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([idpId_1, osFederationIdentityProviderPutRequest_1], args_1, true), void 0, function (idpId, osFederationIdentityProviderPutRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'idpId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONIdentityProvidersIdpIdPut', 'idpId', idpId);
                            localVarPath = "/v3/OS-FEDERATION/identity_providers/{idp_id}"
                                .replace("{".concat("idp_id", "}"), encodeURIComponent(String(idpId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(osFederationIdentityProviderPutRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/mappings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/mappings";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a mapping.  DELETE /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdDelete: function (mappingId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([mappingId_1], args_1, true), void 0, function (mappingId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mappingId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONMappingsMappingIdDelete', 'mappingId', mappingId);
                            localVarPath = "/v3/OS-FEDERATION/mappings/{mapping_id}"
                                .replace("{".concat("mapping_id", "}"), encodeURIComponent(String(mappingId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdGet: function (mappingId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([mappingId_1], args_1, true), void 0, function (mappingId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mappingId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONMappingsMappingIdGet', 'mappingId', mappingId);
                            localVarPath = "/v3/OS-FEDERATION/mappings/{mapping_id}"
                                .replace("{".concat("mapping_id", "}"), encodeURIComponent(String(mappingId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdHead: function (mappingId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([mappingId_1], args_1, true), void 0, function (mappingId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mappingId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONMappingsMappingIdHead', 'mappingId', mappingId);
                            localVarPath = "/v3/OS-FEDERATION/mappings/{mapping_id}"
                                .replace("{".concat("mapping_id", "}"), encodeURIComponent(String(mappingId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update an attribute mapping for identity federation.  PATCH /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {OsFederationMappingPatchRequest} [osFederationMappingPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdPatch: function (mappingId_1, osFederationMappingPatchRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([mappingId_1, osFederationMappingPatchRequest_1], args_1, true), void 0, function (mappingId, osFederationMappingPatchRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mappingId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONMappingsMappingIdPatch', 'mappingId', mappingId);
                            localVarPath = "/v3/OS-FEDERATION/mappings/{mapping_id}"
                                .replace("{".concat("mapping_id", "}"), encodeURIComponent(String(mappingId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(osFederationMappingPatchRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a mapping.  PUT /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {OsFederationMappingPutRequest} [osFederationMappingPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdPut: function (mappingId_1, osFederationMappingPutRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([mappingId_1, osFederationMappingPutRequest_1], args_1, true), void 0, function (mappingId, osFederationMappingPutRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mappingId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONMappingsMappingIdPut', 'mappingId', mappingId);
                            localVarPath = "/v3/OS-FEDERATION/mappings/{mapping_id}"
                                .replace("{".concat("mapping_id", "}"), encodeURIComponent(String(mappingId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(osFederationMappingPutRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONProjectsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONProjectsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONSaml2MetadataGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/saml2/metadata";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONSaml2MetadataHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/saml2/metadata";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/service_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/service_providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/service_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-FEDERATION/service_providers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a service provider.  DELETE /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdDelete: function (spId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([spId_1], args_1, true), void 0, function (spId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'spId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONServiceProvidersSpIdDelete', 'spId', spId);
                            localVarPath = "/v3/OS-FEDERATION/service_providers/{sp_id}"
                                .replace("{".concat("sp_id", "}"), encodeURIComponent(String(spId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdGet: function (spId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([spId_1], args_1, true), void 0, function (spId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'spId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONServiceProvidersSpIdGet', 'spId', spId);
                            localVarPath = "/v3/OS-FEDERATION/service_providers/{sp_id}"
                                .replace("{".concat("sp_id", "}"), encodeURIComponent(String(spId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdHead: function (spId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([spId_1], args_1, true), void 0, function (spId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'spId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONServiceProvidersSpIdHead', 'spId', spId);
                            localVarPath = "/v3/OS-FEDERATION/service_providers/{sp_id}"
                                .replace("{".concat("sp_id", "}"), encodeURIComponent(String(spId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a service provider.  PATCH /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {OsFederationServiceProviderPatchRequest} [osFederationServiceProviderPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdPatch: function (spId_1, osFederationServiceProviderPatchRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([spId_1, osFederationServiceProviderPatchRequest_1], args_1, true), void 0, function (spId, osFederationServiceProviderPatchRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'spId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONServiceProvidersSpIdPatch', 'spId', spId);
                            localVarPath = "/v3/OS-FEDERATION/service_providers/{sp_id}"
                                .replace("{".concat("sp_id", "}"), encodeURIComponent(String(spId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(osFederationServiceProviderPatchRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a service provider.  PUT /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {OsFederationServiceProviderPutRequest} [osFederationServiceProviderPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdPut: function (spId_1, osFederationServiceProviderPutRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([spId_1, osFederationServiceProviderPutRequest_1], args_1, true), void 0, function (spId, osFederationServiceProviderPutRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'spId' is not null or undefined
                            (0, common_1.assertParamExists)('oSFEDERATIONServiceProvidersSpIdPut', 'spId', spId);
                            localVarPath = "/v3/OS-FEDERATION/service_providers/{sp_id}"
                                .replace("{".concat("sp_id", "}"), encodeURIComponent(String(spId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(osFederationServiceProviderPutRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSFEDERATIONApiAxiosParamCreator = OSFEDERATIONApiAxiosParamCreator;
/**
 * OSFEDERATIONApi - functional programming interface
 * @export
 */
var OSFEDERATIONApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OSFEDERATIONApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONDomainsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONDomainsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONDomainsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONDomainsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONDomainsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONDomainsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/identity_providers
         * @param {string} [id] Filter for Identity Providers’ ID attribute
         * @param {boolean} [enabled] Filter for Identity Providers’ enabled attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersGet: function (id, enabled, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersGet(id, enabled, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/identity_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdDelete: function (idpId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdDelete(idpId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdGet: function (idpId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdGet(idpId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdHead: function (idpId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdHead(idpId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {OsFederationIdentityProviderPatchRequest} [osFederationIdentityProviderPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdPatch: function (idpId, osFederationIdentityProviderPatchRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdPatch(idpId, osFederationIdentityProviderPatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsGet: function (idpId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsGet(idpId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsHead: function (idpId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsHead(idpId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet: function (idpId, protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet(idpId, protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead: function (idpId, protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead(idpId, protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Authenticate from dedicated uri endpoint.  POST /OS-FEDERATION/identity_providers/      {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost: function (idpId, protocolId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost(idpId, protocolId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a protocol from an IDP.  DELETE /OS-FEDERATION/identity_providers/        {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete: function (idpId, protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete(idpId, protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet: function (idpId, protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet(idpId, protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead: function (idpId, protocolId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead(idpId, protocolId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update protocol for an IDP.  PATCH /OS-FEDERATION/identity_providers/       {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {OsFederationIdentityProvidersProtocolPatchRequest} [osFederationIdentityProvidersProtocolPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch: function (idpId, protocolId, osFederationIdentityProvidersProtocolPatchRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch(idpId, protocolId, osFederationIdentityProvidersProtocolPatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create protocol for an IDP.  PUT /OS-Federation/identity_providers/{idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {OsFederationIdentityProvidersProtocolPutRequest} [osFederationIdentityProvidersProtocolPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut: function (idpId, protocolId, osFederationIdentityProvidersProtocolPutRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut(idpId, protocolId, osFederationIdentityProvidersProtocolPutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create an idp resource for federated authentication.  PUT /OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {OsFederationIdentityProviderPutRequest} [osFederationIdentityProviderPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdPut: function (idpId, osFederationIdentityProviderPutRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONIdentityProvidersIdpIdPut(idpId, osFederationIdentityProviderPutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONIdentityProvidersIdpIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONMappingsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONMappingsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONMappingsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONMappingsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a mapping.  DELETE /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdDelete: function (mappingId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONMappingsMappingIdDelete(mappingId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONMappingsMappingIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdGet: function (mappingId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONMappingsMappingIdGet(mappingId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONMappingsMappingIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdHead: function (mappingId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONMappingsMappingIdHead(mappingId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONMappingsMappingIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update an attribute mapping for identity federation.  PATCH /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {OsFederationMappingPatchRequest} [osFederationMappingPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdPatch: function (mappingId, osFederationMappingPatchRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONMappingsMappingIdPatch(mappingId, osFederationMappingPatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONMappingsMappingIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a mapping.  PUT /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {OsFederationMappingPutRequest} [osFederationMappingPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdPut: function (mappingId, osFederationMappingPutRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONMappingsMappingIdPut(mappingId, osFederationMappingPutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONMappingsMappingIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONProjectsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONProjectsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONProjectsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONProjectsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONSaml2MetadataGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONSaml2MetadataGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONSaml2MetadataGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONSaml2MetadataHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONSaml2MetadataHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONSaml2MetadataHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/service_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONServiceProvidersGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONServiceProvidersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/service_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONServiceProvidersHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONServiceProvidersHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a service provider.  DELETE /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdDelete: function (spId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONServiceProvidersSpIdDelete(spId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONServiceProvidersSpIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdGet: function (spId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONServiceProvidersSpIdGet(spId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONServiceProvidersSpIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdHead: function (spId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONServiceProvidersSpIdHead(spId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONServiceProvidersSpIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a service provider.  PATCH /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {OsFederationServiceProviderPatchRequest} [osFederationServiceProviderPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdPatch: function (spId, osFederationServiceProviderPatchRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONServiceProvidersSpIdPatch(spId, osFederationServiceProviderPatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONServiceProvidersSpIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a service provider.  PUT /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {OsFederationServiceProviderPutRequest} [osFederationServiceProviderPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdPut: function (spId, osFederationServiceProviderPutRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSFEDERATIONServiceProvidersSpIdPut(spId, osFederationServiceProviderPutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSFEDERATIONApi.oSFEDERATIONServiceProvidersSpIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OSFEDERATIONApiFp = OSFEDERATIONApiFp;
/**
 * OSFEDERATIONApi - factory interface
 * @export
 */
var OSFEDERATIONApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OSFEDERATIONApiFp)(configuration);
    return {
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONDomainsGet: function (options) {
            return localVarFp.oSFEDERATIONDomainsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONDomainsHead: function (options) {
            return localVarFp.oSFEDERATIONDomainsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/identity_providers
         * @param {string} [id] Filter for Identity Providers’ ID attribute
         * @param {boolean} [enabled] Filter for Identity Providers’ enabled attribute
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersGet: function (id, enabled, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersGet(id, enabled, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/identity_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersHead: function (options) {
            return localVarFp.oSFEDERATIONIdentityProvidersHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdDelete: function (idpId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdDelete(idpId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdGet: function (idpId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdGet(idpId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdHead: function (idpId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdHead(idpId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {OsFederationIdentityProviderPatchRequest} [osFederationIdentityProviderPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdPatch: function (idpId, osFederationIdentityProviderPatchRequest, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdPatch(idpId, osFederationIdentityProviderPatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsGet: function (idpId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsGet(idpId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsHead: function (idpId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsHead(idpId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet: function (idpId, protocolId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet(idpId, protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead: function (idpId, protocolId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead(idpId, protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Authenticate from dedicated uri endpoint.  POST /OS-FEDERATION/identity_providers/      {idp_id}/protocols/{protocol_id}/auth
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
         * @param {object} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost: function (idpId, protocolId, body, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost(idpId, protocolId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a protocol from an IDP.  DELETE /OS-FEDERATION/identity_providers/        {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete: function (idpId, protocolId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete(idpId, protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet: function (idpId, protocolId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet(idpId, protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead: function (idpId, protocolId, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead(idpId, protocolId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update protocol for an IDP.  PATCH /OS-FEDERATION/identity_providers/       {idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {OsFederationIdentityProvidersProtocolPatchRequest} [osFederationIdentityProvidersProtocolPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch: function (idpId, protocolId, osFederationIdentityProvidersProtocolPatchRequest, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch(idpId, protocolId, osFederationIdentityProvidersProtocolPatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create protocol for an IDP.  PUT /OS-Federation/identity_providers/{idp_id}/protocols/{protocol_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
         * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
         * @param {OsFederationIdentityProvidersProtocolPutRequest} [osFederationIdentityProvidersProtocolPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut: function (idpId, protocolId, osFederationIdentityProvidersProtocolPutRequest, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut(idpId, protocolId, osFederationIdentityProvidersProtocolPutRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create an idp resource for federated authentication.  PUT /OS-FEDERATION/identity_providers/{idp_id}
         * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
         * @param {OsFederationIdentityProviderPutRequest} [osFederationIdentityProviderPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONIdentityProvidersIdpIdPut: function (idpId, osFederationIdentityProviderPutRequest, options) {
            return localVarFp.oSFEDERATIONIdentityProvidersIdpIdPut(idpId, osFederationIdentityProviderPutRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsGet: function (options) {
            return localVarFp.oSFEDERATIONMappingsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/mappings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsHead: function (options) {
            return localVarFp.oSFEDERATIONMappingsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a mapping.  DELETE /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdDelete: function (mappingId, options) {
            return localVarFp.oSFEDERATIONMappingsMappingIdDelete(mappingId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdGet: function (mappingId, options) {
            return localVarFp.oSFEDERATIONMappingsMappingIdGet(mappingId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdHead: function (mappingId, options) {
            return localVarFp.oSFEDERATIONMappingsMappingIdHead(mappingId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update an attribute mapping for identity federation.  PATCH /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {OsFederationMappingPatchRequest} [osFederationMappingPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdPatch: function (mappingId, osFederationMappingPatchRequest, options) {
            return localVarFp.oSFEDERATIONMappingsMappingIdPatch(mappingId, osFederationMappingPatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a mapping.  PUT /OS-FEDERATION/mappings/{mapping_id}
         * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
         * @param {OsFederationMappingPutRequest} [osFederationMappingPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONMappingsMappingIdPut: function (mappingId, osFederationMappingPutRequest, options) {
            return localVarFp.oSFEDERATIONMappingsMappingIdPut(mappingId, osFederationMappingPutRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONProjectsGet: function (options) {
            return localVarFp.oSFEDERATIONProjectsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        oSFEDERATIONProjectsHead: function (options) {
            return localVarFp.oSFEDERATIONProjectsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONSaml2MetadataGet: function (options) {
            return localVarFp.oSFEDERATIONSaml2MetadataGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONSaml2MetadataHead: function (options) {
            return localVarFp.oSFEDERATIONSaml2MetadataHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/service_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersGet: function (options) {
            return localVarFp.oSFEDERATIONServiceProvidersGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/service_providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersHead: function (options) {
            return localVarFp.oSFEDERATIONServiceProvidersHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a service provider.  DELETE /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdDelete: function (spId, options) {
            return localVarFp.oSFEDERATIONServiceProvidersSpIdDelete(spId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdGet: function (spId, options) {
            return localVarFp.oSFEDERATIONServiceProvidersSpIdGet(spId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdHead: function (spId, options) {
            return localVarFp.oSFEDERATIONServiceProvidersSpIdHead(spId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a service provider.  PATCH /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {OsFederationServiceProviderPatchRequest} [osFederationServiceProviderPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdPatch: function (spId, osFederationServiceProviderPatchRequest, options) {
            return localVarFp.oSFEDERATIONServiceProvidersSpIdPatch(spId, osFederationServiceProviderPatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a service provider.  PUT /OS-FEDERATION/service_providers/{sp_id}
         * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
         * @param {OsFederationServiceProviderPutRequest} [osFederationServiceProviderPutRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSFEDERATIONServiceProvidersSpIdPut: function (spId, osFederationServiceProviderPutRequest, options) {
            return localVarFp.oSFEDERATIONServiceProvidersSpIdPut(spId, osFederationServiceProviderPutRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OSFEDERATIONApiFactory = OSFEDERATIONApiFactory;
/**
 * OSFEDERATIONApi - object-oriented interface
 * @export
 * @class OSFEDERATIONApi
 * @extends {BaseAPI}
 */
var OSFEDERATIONApi = /** @class */ (function (_super) {
    __extends(OSFEDERATIONApi, _super);
    function OSFEDERATIONApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONDomainsGet = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONDomainsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible domain scopes for token.  GET/HEAD /v3/auth/domains GET/HEAD /v3/OS-FEDERATION/domains
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONDomainsHead = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONDomainsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {boolean} [enabled] Filter for Identity Providers’ enabled attribute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersGet = function (id, enabled, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersGet(id, enabled, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersHead = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdDelete = function (idpId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdDelete(idpId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdGet = function (idpId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdGet(idpId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdHead = function (idpId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdHead(idpId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPatchRequest} [osFederationIdentityProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdPatch = function (idpId, osFederationIdentityProviderPatchRequest, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdPatch(idpId, osFederationIdentityProviderPatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsGet = function (idpId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsGet(idpId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/{idp_id}/protocols
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsHead = function (idpId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsHead(idpId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet = function (idpId, protocolId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthGet(idpId, protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Authenticate from dedicated uri endpoint.  GET/HEAD /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead = function (idpId, protocolId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthHead(idpId, protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Authenticate from dedicated uri endpoint.  POST /OS-FEDERATION/identity_providers/      {idp_id}/protocols/{protocol_id}/auth
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id}/auth API
     * @param {object} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost = function (idpId, protocolId, body, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdAuthPost(idpId, protocolId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a protocol from an IDP.  DELETE /OS-FEDERATION/identity_providers/        {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete = function (idpId, protocolId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdDelete(idpId, protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet = function (idpId, protocolId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdGet(idpId, protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get protocols for an IDP.  HEAD/GET /OS-FEDERATION/identity_providers/          {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead = function (idpId, protocolId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdHead(idpId, protocolId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update protocol for an IDP.  PATCH /OS-FEDERATION/identity_providers/       {idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPatchRequest} [osFederationIdentityProvidersProtocolPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch = function (idpId, protocolId, osFederationIdentityProvidersProtocolPatchRequest, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPatch(idpId, protocolId, osFederationIdentityProvidersProtocolPatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create protocol for an IDP.  PUT /OS-Federation/identity_providers/{idp_id}/protocols/{protocol_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols API
     * @param {string} protocolId protocol_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id}/protocols/{protocol_id} API
     * @param {OsFederationIdentityProvidersProtocolPutRequest} [osFederationIdentityProvidersProtocolPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut = function (idpId, protocolId, osFederationIdentityProvidersProtocolPutRequest, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdProtocolsProtocolIdPut(idpId, protocolId, osFederationIdentityProvidersProtocolPutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create an idp resource for federated authentication.  PUT /OS-FEDERATION/identity_providers/{idp_id}
     * @param {string} idpId idp_id parameter for /v3/OS-FEDERATION/identity_providers/{idp_id} API
     * @param {OsFederationIdentityProviderPutRequest} [osFederationIdentityProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONIdentityProvidersIdpIdPut = function (idpId, osFederationIdentityProviderPutRequest, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONIdentityProvidersIdpIdPut(idpId, osFederationIdentityProviderPutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONMappingsGet = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONMappingsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONMappingsHead = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONMappingsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a mapping.  DELETE /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONMappingsMappingIdDelete = function (mappingId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONMappingsMappingIdDelete(mappingId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONMappingsMappingIdGet = function (mappingId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONMappingsMappingIdGet(mappingId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONMappingsMappingIdHead = function (mappingId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONMappingsMappingIdHead(mappingId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update an attribute mapping for identity federation.  PATCH /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPatchRequest} [osFederationMappingPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONMappingsMappingIdPatch = function (mappingId, osFederationMappingPatchRequest, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONMappingsMappingIdPatch(mappingId, osFederationMappingPatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a mapping.  PUT /OS-FEDERATION/mappings/{mapping_id}
     * @param {string} mappingId mapping_id parameter for /v3/OS-FEDERATION/mappings/{mapping_id} API
     * @param {OsFederationMappingPutRequest} [osFederationMappingPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONMappingsMappingIdPut = function (mappingId, osFederationMappingPutRequest, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONMappingsMappingIdPut(mappingId, osFederationMappingPutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONProjectsGet = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONProjectsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get possible project scopes for token.  GET/HEAD /v3/auth/projects GET/HEAD /v3/OS-FEDERATION/projects
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONProjectsHead = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONProjectsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONSaml2MetadataGet = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONSaml2MetadataGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get SAML2 metadata.  GET/HEAD /OS-FEDERATION/saml2/metadata
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONSaml2MetadataHead = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONSaml2MetadataHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONServiceProvidersGet = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONServiceProvidersGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONServiceProvidersHead = function (options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONServiceProvidersHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a service provider.  DELETE /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONServiceProvidersSpIdDelete = function (spId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONServiceProvidersSpIdDelete(spId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONServiceProvidersSpIdGet = function (spId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONServiceProvidersSpIdGet(spId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONServiceProvidersSpIdHead = function (spId, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONServiceProvidersSpIdHead(spId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a service provider.  PATCH /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPatchRequest} [osFederationServiceProviderPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONServiceProvidersSpIdPatch = function (spId, osFederationServiceProviderPatchRequest, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONServiceProvidersSpIdPatch(spId, osFederationServiceProviderPatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a service provider.  PUT /OS-FEDERATION/service_providers/{sp_id}
     * @param {string} spId sp_id parameter for /v3/OS-FEDERATION/service_providers/{sp_id} API
     * @param {OsFederationServiceProviderPutRequest} [osFederationServiceProviderPutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSFEDERATIONApi
     */
    OSFEDERATIONApi.prototype.oSFEDERATIONServiceProvidersSpIdPut = function (spId, osFederationServiceProviderPutRequest, options) {
        var _this = this;
        return (0, exports.OSFEDERATIONApiFp)(this.configuration).oSFEDERATIONServiceProvidersSpIdPut(spId, osFederationServiceProviderPutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OSFEDERATIONApi;
}(base_1.BaseAPI));
exports.OSFEDERATIONApi = OSFEDERATIONApi;
/**
 * OSINHERITApi - axios parameter creator
 * @export
 */
var OSINHERITApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet: function (domainId_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1], args_1, true), void 0, function (domainId, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet', 'groupId', groupId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead: function (domainId_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1], args_1, true), void 0, function (domainId, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead', 'groupId', groupId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke an inherited grant for a group on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete: function (domainId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1, roleId_1], args_1, true), void 0, function (domainId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet: function (domainId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1, roleId_1], args_1, true), void 0, function (domainId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead: function (domainId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1, roleId_1], args_1, true), void 0, function (domainId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create an inherited grant for a group on a domain.  PUT /OS-INHERIT/domains/{domain_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut: function (domainId_1, groupId_1, roleId_1, body_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1, roleId_1, body_1], args_1, true), void 0, function (domainId, groupId, roleId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet: function (domainId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1], args_1, true), void 0, function (domainId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet', 'userId', userId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead: function (domainId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1], args_1, true), void 0, function (domainId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead', 'userId', userId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke a grant from a user on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles        /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete: function (domainId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1, roleId_1], args_1, true), void 0, function (domainId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet: function (domainId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1, roleId_1], args_1, true), void 0, function (domainId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead: function (domainId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1, roleId_1], args_1, true), void 0, function (domainId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create an inherited grant for a user on a domain.  PUT /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}     /inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut: function (domainId_1, userId_1, roleId_1, body_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1, roleId_1, body_1], args_1, true), void 0, function (domainId, userId, roleId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke an inherited grant for a group on a project.  DELETE /OS-INHERIT/projects/{project_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete: function (projectId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1, roleId_1], args_1, true), void 0, function (projectId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet: function (projectId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1, roleId_1], args_1, true), void 0, function (projectId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead: function (projectId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1, roleId_1], args_1, true), void 0, function (projectId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create an inherited grant for a group on a project.  PUT /OS-INHERIT/projects/{project_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut: function (projectId_1, groupId_1, roleId_1, body_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1, roleId_1, body_1], args_1, true), void 0, function (projectId, groupId, roleId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke an inherited grant for a user on a project.  DELETE /OS-INHERIT/projects/{project_id}/users/{user_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete: function (projectId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1, roleId_1], args_1, true), void 0, function (projectId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet: function (projectId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1, roleId_1], args_1, true), void 0, function (projectId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead: function (projectId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1, roleId_1], args_1, true), void 0, function (projectId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create an inherited grant for a user on a project.  PUT /OS-INHERIT/projects/{project_id}/users/{user_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut: function (projectId_1, userId_1, roleId_1, body_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1, roleId_1, body_1], args_1, true), void 0, function (projectId, userId, roleId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut', 'roleId', roleId);
                            localVarPath = "/v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSINHERITApiAxiosParamCreator = OSINHERITApiAxiosParamCreator;
/**
 * OSINHERITApi - functional programming interface
 * @export
 */
var OSINHERITApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OSINHERITApiAxiosParamCreator)(configuration);
    return {
        /**
         * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet: function (domainId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet(domainId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead: function (domainId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead(domainId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke an inherited grant for a group on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete: function (domainId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(domainId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet: function (domainId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(domainId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead: function (domainId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(domainId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create an inherited grant for a group on a domain.  PUT /OS-INHERIT/domains/{domain_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut: function (domainId, groupId, roleId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(domainId, groupId, roleId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet: function (domainId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet(domainId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead: function (domainId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead(domainId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke a grant from a user on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles        /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete: function (domainId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(domainId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet: function (domainId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet(domainId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead: function (domainId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead(domainId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create an inherited grant for a user on a domain.  PUT /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}     /inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut: function (domainId, userId, roleId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut(domainId, userId, roleId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke an inherited grant for a group on a project.  DELETE /OS-INHERIT/projects/{project_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete: function (projectId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(projectId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet: function (projectId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(projectId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead: function (projectId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(projectId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create an inherited grant for a group on a project.  PUT /OS-INHERIT/projects/{project_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut: function (projectId, groupId, roleId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(projectId, groupId, roleId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke an inherited grant for a user on a project.  DELETE /OS-INHERIT/projects/{project_id}/users/{user_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete: function (projectId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(projectId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet: function (projectId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet(projectId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead: function (projectId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead(projectId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create an inherited grant for a user on a project.  PUT /OS-INHERIT/projects/{project_id}/users/{user_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut: function (projectId, userId, roleId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut(projectId, userId, roleId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSINHERITApi.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OSINHERITApiFp = OSINHERITApiFp;
/**
 * OSINHERITApi - factory interface
 * @export
 */
var OSINHERITApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OSINHERITApiFp)(configuration);
    return {
        /**
         * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet: function (domainId, groupId, options) {
            return localVarFp.oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet(domainId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead: function (domainId, groupId, options) {
            return localVarFp.oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead(domainId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke an inherited grant for a group on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete: function (domainId, groupId, roleId, options) {
            return localVarFp.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(domainId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet: function (domainId, groupId, roleId, options) {
            return localVarFp.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(domainId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead: function (domainId, groupId, roleId, options) {
            return localVarFp.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(domainId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create an inherited grant for a group on a domain.  PUT /OS-INHERIT/domains/{domain_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut: function (domainId, groupId, roleId, body, options) {
            return localVarFp.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(domainId, groupId, roleId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet: function (domainId, userId, options) {
            return localVarFp.oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet(domainId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead: function (domainId, userId, options) {
            return localVarFp.oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead(domainId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke a grant from a user on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles        /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete: function (domainId, userId, roleId, options) {
            return localVarFp.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(domainId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet: function (domainId, userId, roleId, options) {
            return localVarFp.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet(domainId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead: function (domainId, userId, roleId, options) {
            return localVarFp.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead(domainId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create an inherited grant for a user on a domain.  PUT /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}     /inherited_to_projects
         * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut: function (domainId, userId, roleId, body, options) {
            return localVarFp.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut(domainId, userId, roleId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke an inherited grant for a group on a project.  DELETE /OS-INHERIT/projects/{project_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete: function (projectId, groupId, roleId, options) {
            return localVarFp.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(projectId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet: function (projectId, groupId, roleId, options) {
            return localVarFp.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(projectId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead: function (projectId, groupId, roleId, options) {
            return localVarFp.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(projectId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create an inherited grant for a group on a project.  PUT /OS-INHERIT/projects/{project_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut: function (projectId, groupId, roleId, body, options) {
            return localVarFp.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(projectId, groupId, roleId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke an inherited grant for a user on a project.  DELETE /OS-INHERIT/projects/{project_id}/users/{user_id}        /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete: function (projectId, userId, roleId, options) {
            return localVarFp.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(projectId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet: function (projectId, userId, roleId, options) {
            return localVarFp.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet(projectId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead: function (projectId, userId, roleId, options) {
            return localVarFp.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead(projectId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create an inherited grant for a user on a project.  PUT /OS-INHERIT/projects/{project_id}/users/{user_id}     /roles/{role_id}/inherited_to_projects
         * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut: function (projectId, userId, roleId, body, options) {
            return localVarFp.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut(projectId, userId, roleId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OSINHERITApiFactory = OSINHERITApiFactory;
/**
 * OSINHERITApi - object-oriented interface
 * @export
 * @class OSINHERITApi
 * @extends {BaseAPI}
 */
var OSINHERITApi = /** @class */ (function (_super) {
    __extends(OSINHERITApi, _super);
    function OSINHERITApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet = function (domainId, groupId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsGet(domainId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List roles (inherited) for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead = function (domainId, groupId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdGroupsGroupIdRolesInheritedToProjectsHead(domainId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke an inherited grant for a group on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete = function (domainId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(domainId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet = function (domainId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(domainId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for an inherited grant for a group on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead = function (domainId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(domainId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create an inherited grant for a group on a domain.  PUT /OS-INHERIT/domains/{domain_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut = function (domainId, groupId, roleId, body, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(domainId, groupId, roleId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet = function (domainId, userId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsGet(domainId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List roles (inherited) for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}          /roles/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead = function (domainId, userId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdUsersUserIdRolesInheritedToProjectsHead(domainId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke a grant from a user on a domain.  DELETE /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles        /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete = function (domainId, userId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(domainId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet = function (domainId, userId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsGet(domainId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for an inherited grant for a user on a domain.  GET/HEAD /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles          /{role_id}/inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead = function (domainId, userId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsHead(domainId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create an inherited grant for a user on a domain.  PUT /OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}     /inherited_to_projects
     * @param {string} domainId domain_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/domains/{domain_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut = function (domainId, userId, roleId, body, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITDomainsDomainIdUsersUserIdRolesRoleIdInheritedToProjectsPut(domainId, userId, roleId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke an inherited grant for a group on a project.  DELETE /OS-INHERIT/projects/{project_id}/groups/{group_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete = function (projectId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsDelete(projectId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet = function (projectId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsGet(projectId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for an inherited grant for a group on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/groups/{group_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead = function (projectId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsHead(projectId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create an inherited grant for a group on a project.  PUT /OS-INHERIT/projects/{project_id}/groups/{group_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} groupId group_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/groups/{group_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut = function (projectId, groupId, roleId, body, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITProjectsProjectIdGroupsGroupIdRolesRoleIdInheritedToProjectsPut(projectId, groupId, roleId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke an inherited grant for a user on a project.  DELETE /OS-INHERIT/projects/{project_id}/users/{user_id}        /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete = function (projectId, userId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsDelete(projectId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet = function (projectId, userId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsGet(projectId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for an inherited grant for a user on a project.  GET/HEAD /OS-INHERIT/projects/{project_id}/users/{user_id}          /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead = function (projectId, userId, roleId, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsHead(projectId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create an inherited grant for a user on a project.  PUT /OS-INHERIT/projects/{project_id}/users/{user_id}     /roles/{role_id}/inherited_to_projects
     * @param {string} projectId project_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} userId user_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {string} roleId role_id parameter for /v3/OS-INHERIT/projects/{project_id}/users/{user_id}/roles/{role_id}/inherited_to_projects API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSINHERITApi
     */
    OSINHERITApi.prototype.oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut = function (projectId, userId, roleId, body, options) {
        var _this = this;
        return (0, exports.OSINHERITApiFp)(this.configuration).oSINHERITProjectsProjectIdUsersUserIdRolesRoleIdInheritedToProjectsPut(projectId, userId, roleId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OSINHERITApi;
}(base_1.BaseAPI));
exports.OSINHERITApi = OSINHERITApi;
/**
 * OSOAUTH1Api - axios parameter creator
 * @export
 */
var OSOAUTH1ApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/OS-OAUTH1/access_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/access_token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/access_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/access_token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/access_token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/access_token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/OS-OAUTH1/authorize/{request_token_id}
         * @param {string} requestTokenId request_token_id parameter for /v3/OS-OAUTH1/authorize/{request_token_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AuthorizeRequestTokenIdPut: function (requestTokenId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([requestTokenId_1, body_1], args_1, true), void 0, function (requestTokenId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'requestTokenId' is not null or undefined
                            (0, common_1.assertParamExists)('oSOAUTH1AuthorizeRequestTokenIdPut', 'requestTokenId', requestTokenId);
                            localVarPath = "/v3/OS-OAUTH1/authorize/{request_token_id}"
                                .replace("{".concat("request_token_id", "}"), encodeURIComponent(String(requestTokenId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdDelete: function (consumerId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([consumerId_1], args_1, true), void 0, function (consumerId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'consumerId' is not null or undefined
                            (0, common_1.assertParamExists)('oSOAUTH1ConsumersConsumerIdDelete', 'consumerId', consumerId);
                            localVarPath = "/v3/OS-OAUTH1/consumers/{consumer_id}"
                                .replace("{".concat("consumer_id", "}"), encodeURIComponent(String(consumerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdGet: function (consumerId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([consumerId_1], args_1, true), void 0, function (consumerId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'consumerId' is not null or undefined
                            (0, common_1.assertParamExists)('oSOAUTH1ConsumersConsumerIdGet', 'consumerId', consumerId);
                            localVarPath = "/v3/OS-OAUTH1/consumers/{consumer_id}"
                                .replace("{".concat("consumer_id", "}"), encodeURIComponent(String(consumerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdHead: function (consumerId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([consumerId_1], args_1, true), void 0, function (consumerId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'consumerId' is not null or undefined
                            (0, common_1.assertParamExists)('oSOAUTH1ConsumersConsumerIdHead', 'consumerId', consumerId);
                            localVarPath = "/v3/OS-OAUTH1/consumers/{consumer_id}"
                                .replace("{".concat("consumer_id", "}"), encodeURIComponent(String(consumerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdPatch: function (consumerId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([consumerId_1, body_1], args_1, true), void 0, function (consumerId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'consumerId' is not null or undefined
                            (0, common_1.assertParamExists)('oSOAUTH1ConsumersConsumerIdPatch', 'consumerId', consumerId);
                            localVarPath = "/v3/OS-OAUTH1/consumers/{consumer_id}"
                                .replace("{".concat("consumer_id", "}"), encodeURIComponent(String(consumerId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/consumers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/consumers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/consumers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/consumers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/consumers
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/consumers";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/request_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/request_token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/request_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/request_token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/request_token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH1/request_token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSOAUTH1ApiAxiosParamCreator = OSOAUTH1ApiAxiosParamCreator;
/**
 * OSOAUTH1Api - functional programming interface
 * @export
 */
var OSOAUTH1ApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OSOAUTH1ApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/OS-OAUTH1/access_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1AccessTokenGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1AccessTokenGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/access_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1AccessTokenHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1AccessTokenHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/access_token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1AccessTokenPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1AccessTokenPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/OS-OAUTH1/authorize/{request_token_id}
         * @param {string} requestTokenId request_token_id parameter for /v3/OS-OAUTH1/authorize/{request_token_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AuthorizeRequestTokenIdPut: function (requestTokenId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1AuthorizeRequestTokenIdPut(requestTokenId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1AuthorizeRequestTokenIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdDelete: function (consumerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1ConsumersConsumerIdDelete(consumerId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1ConsumersConsumerIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdGet: function (consumerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1ConsumersConsumerIdGet(consumerId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1ConsumersConsumerIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdHead: function (consumerId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1ConsumersConsumerIdHead(consumerId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1ConsumersConsumerIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdPatch: function (consumerId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1ConsumersConsumerIdPatch(consumerId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1ConsumersConsumerIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/consumers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1ConsumersGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1ConsumersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/consumers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1ConsumersHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1ConsumersHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/consumers
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1ConsumersPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1ConsumersPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/request_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1RequestTokenGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1RequestTokenGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/request_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1RequestTokenHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1RequestTokenHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/request_token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH1RequestTokenPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH1Api.oSOAUTH1RequestTokenPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OSOAUTH1ApiFp = OSOAUTH1ApiFp;
/**
 * OSOAUTH1Api - factory interface
 * @export
 */
var OSOAUTH1ApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OSOAUTH1ApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/OS-OAUTH1/access_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenGet: function (options) {
            return localVarFp.oSOAUTH1AccessTokenGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/access_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenHead: function (options) {
            return localVarFp.oSOAUTH1AccessTokenHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/access_token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AccessTokenPost: function (body, options) {
            return localVarFp.oSOAUTH1AccessTokenPost(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PUT operation on /v3/OS-OAUTH1/authorize/{request_token_id}
         * @param {string} requestTokenId request_token_id parameter for /v3/OS-OAUTH1/authorize/{request_token_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1AuthorizeRequestTokenIdPut: function (requestTokenId, body, options) {
            return localVarFp.oSOAUTH1AuthorizeRequestTokenIdPut(requestTokenId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdDelete: function (consumerId, options) {
            return localVarFp.oSOAUTH1ConsumersConsumerIdDelete(consumerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdGet: function (consumerId, options) {
            return localVarFp.oSOAUTH1ConsumersConsumerIdGet(consumerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdHead: function (consumerId, options) {
            return localVarFp.oSOAUTH1ConsumersConsumerIdHead(consumerId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/OS-OAUTH1/consumers/{consumer_id}
         * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersConsumerIdPatch: function (consumerId, body, options) {
            return localVarFp.oSOAUTH1ConsumersConsumerIdPatch(consumerId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/consumers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersGet: function (options) {
            return localVarFp.oSOAUTH1ConsumersGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/consumers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersHead: function (options) {
            return localVarFp.oSOAUTH1ConsumersHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/consumers
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1ConsumersPost: function (body, options) {
            return localVarFp.oSOAUTH1ConsumersPost(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-OAUTH1/request_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenGet: function (options) {
            return localVarFp.oSOAUTH1RequestTokenGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-OAUTH1/request_token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenHead: function (options) {
            return localVarFp.oSOAUTH1RequestTokenHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/OS-OAUTH1/request_token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH1RequestTokenPost: function (body, options) {
            return localVarFp.oSOAUTH1RequestTokenPost(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OSOAUTH1ApiFactory = OSOAUTH1ApiFactory;
/**
 * OSOAUTH1Api - object-oriented interface
 * @export
 * @class OSOAUTH1Api
 * @extends {BaseAPI}
 */
var OSOAUTH1Api = /** @class */ (function (_super) {
    __extends(OSOAUTH1Api, _super);
    function OSOAUTH1Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1AccessTokenGet = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1AccessTokenGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-OAUTH1/access_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1AccessTokenHead = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1AccessTokenHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/OS-OAUTH1/access_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1AccessTokenPost = function (body, options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1AccessTokenPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PUT operation on /v3/OS-OAUTH1/authorize/{request_token_id}
     * @param {string} requestTokenId request_token_id parameter for /v3/OS-OAUTH1/authorize/{request_token_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1AuthorizeRequestTokenIdPut = function (requestTokenId, body, options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1AuthorizeRequestTokenIdPut(requestTokenId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1ConsumersConsumerIdDelete = function (consumerId, options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1ConsumersConsumerIdDelete(consumerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1ConsumersConsumerIdGet = function (consumerId, options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1ConsumersConsumerIdGet(consumerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1ConsumersConsumerIdHead = function (consumerId, options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1ConsumersConsumerIdHead(consumerId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/OS-OAUTH1/consumers/{consumer_id}
     * @param {string} consumerId consumer_id parameter for /v3/OS-OAUTH1/consumers/{consumer_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1ConsumersConsumerIdPatch = function (consumerId, body, options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1ConsumersConsumerIdPatch(consumerId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1ConsumersGet = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1ConsumersGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-OAUTH1/consumers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1ConsumersHead = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1ConsumersHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/OS-OAUTH1/consumers
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1ConsumersPost = function (body, options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1ConsumersPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1RequestTokenGet = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1RequestTokenGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-OAUTH1/request_token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1RequestTokenHead = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1RequestTokenHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/OS-OAUTH1/request_token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH1Api
     */
    OSOAUTH1Api.prototype.oSOAUTH1RequestTokenPost = function (body, options) {
        var _this = this;
        return (0, exports.OSOAUTH1ApiFp)(this.configuration).oSOAUTH1RequestTokenPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OSOAUTH1Api;
}(base_1.BaseAPI));
exports.OSOAUTH1Api = OSOAUTH1Api;
/**
 * OSOAUTH2Api - axios parameter creator
 * @export
 */
var OSOAUTH2ApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenDelete: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH2/token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH2/token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH2/token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * The method is not allowed.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPatch: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH2/token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get an OAuth2.0 Access Token.  POST /v3/OS-OAUTH2/token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH2/token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * The method is not allowed.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPut: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-OAUTH2/token";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSOAUTH2ApiAxiosParamCreator = OSOAUTH2ApiAxiosParamCreator;
/**
 * OSOAUTH2Api - functional programming interface
 * @export
 */
var OSOAUTH2ApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OSOAUTH2ApiAxiosParamCreator)(configuration);
    return {
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenDelete: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH2TokenDelete(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH2Api.oSOAUTH2TokenDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH2TokenGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH2Api.oSOAUTH2TokenGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH2TokenHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH2Api.oSOAUTH2TokenHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * The method is not allowed.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPatch: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH2TokenPatch(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH2Api.oSOAUTH2TokenPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get an OAuth2.0 Access Token.  POST /v3/OS-OAUTH2/token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH2TokenPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH2Api.oSOAUTH2TokenPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * The method is not allowed.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPut: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSOAUTH2TokenPut(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSOAUTH2Api.oSOAUTH2TokenPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OSOAUTH2ApiFp = OSOAUTH2ApiFp;
/**
 * OSOAUTH2Api - factory interface
 * @export
 */
var OSOAUTH2ApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OSOAUTH2ApiFp)(configuration);
    return {
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenDelete: function (options) {
            return localVarFp.oSOAUTH2TokenDelete(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenGet: function (options) {
            return localVarFp.oSOAUTH2TokenGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The method is not allowed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenHead: function (options) {
            return localVarFp.oSOAUTH2TokenHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The method is not allowed.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPatch: function (body, options) {
            return localVarFp.oSOAUTH2TokenPatch(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get an OAuth2.0 Access Token.  POST /v3/OS-OAUTH2/token
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPost: function (body, options) {
            return localVarFp.oSOAUTH2TokenPost(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * The method is not allowed.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSOAUTH2TokenPut: function (body, options) {
            return localVarFp.oSOAUTH2TokenPut(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OSOAUTH2ApiFactory = OSOAUTH2ApiFactory;
/**
 * OSOAUTH2Api - object-oriented interface
 * @export
 * @class OSOAUTH2Api
 * @extends {BaseAPI}
 */
var OSOAUTH2Api = /** @class */ (function (_super) {
    __extends(OSOAUTH2Api, _super);
    function OSOAUTH2Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    OSOAUTH2Api.prototype.oSOAUTH2TokenDelete = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH2ApiFp)(this.configuration).oSOAUTH2TokenDelete(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    OSOAUTH2Api.prototype.oSOAUTH2TokenGet = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH2ApiFp)(this.configuration).oSOAUTH2TokenGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The method is not allowed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    OSOAUTH2Api.prototype.oSOAUTH2TokenHead = function (options) {
        var _this = this;
        return (0, exports.OSOAUTH2ApiFp)(this.configuration).oSOAUTH2TokenHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    OSOAUTH2Api.prototype.oSOAUTH2TokenPatch = function (body, options) {
        var _this = this;
        return (0, exports.OSOAUTH2ApiFp)(this.configuration).oSOAUTH2TokenPatch(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get an OAuth2.0 Access Token.  POST /v3/OS-OAUTH2/token
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    OSOAUTH2Api.prototype.oSOAUTH2TokenPost = function (body, options) {
        var _this = this;
        return (0, exports.OSOAUTH2ApiFp)(this.configuration).oSOAUTH2TokenPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * The method is not allowed.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSOAUTH2Api
     */
    OSOAUTH2Api.prototype.oSOAUTH2TokenPut = function (body, options) {
        var _this = this;
        return (0, exports.OSOAUTH2ApiFp)(this.configuration).oSOAUTH2TokenPut(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OSOAUTH2Api;
}(base_1.BaseAPI));
exports.OSOAUTH2Api = OSOAUTH2Api;
/**
 * OSREVOKEApi - axios parameter creator
 * @export
 */
var OSREVOKEApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/OS-REVOKE/events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSREVOKEEventsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-REVOKE/events";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-REVOKE/events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSREVOKEEventsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-REVOKE/events";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSREVOKEApiAxiosParamCreator = OSREVOKEApiAxiosParamCreator;
/**
 * OSREVOKEApi - functional programming interface
 * @export
 */
var OSREVOKEApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OSREVOKEApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/OS-REVOKE/events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSREVOKEEventsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSREVOKEEventsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSREVOKEApi.oSREVOKEEventsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-REVOKE/events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSREVOKEEventsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSREVOKEEventsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSREVOKEApi.oSREVOKEEventsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OSREVOKEApiFp = OSREVOKEApiFp;
/**
 * OSREVOKEApi - factory interface
 * @export
 */
var OSREVOKEApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OSREVOKEApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/OS-REVOKE/events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSREVOKEEventsGet: function (options) {
            return localVarFp.oSREVOKEEventsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-REVOKE/events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSREVOKEEventsHead: function (options) {
            return localVarFp.oSREVOKEEventsHead(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OSREVOKEApiFactory = OSREVOKEApiFactory;
/**
 * OSREVOKEApi - object-oriented interface
 * @export
 * @class OSREVOKEApi
 * @extends {BaseAPI}
 */
var OSREVOKEApi = /** @class */ (function (_super) {
    __extends(OSREVOKEApi, _super);
    function OSREVOKEApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSREVOKEApi
     */
    OSREVOKEApi.prototype.oSREVOKEEventsGet = function (options) {
        var _this = this;
        return (0, exports.OSREVOKEApiFp)(this.configuration).oSREVOKEEventsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-REVOKE/events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSREVOKEApi
     */
    OSREVOKEApi.prototype.oSREVOKEEventsHead = function (options) {
        var _this = this;
        return (0, exports.OSREVOKEApiFp)(this.configuration).oSREVOKEEventsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OSREVOKEApi;
}(base_1.BaseAPI));
exports.OSREVOKEApi = OSREVOKEApi;
/**
 * OSSIMPLECERTApi - axios parameter creator
 * @export
 */
var OSSIMPLECERTApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/OS-SIMPLE-CERT/ca
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCaGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-SIMPLE-CERT/ca";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-SIMPLE-CERT/ca
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCaHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-SIMPLE-CERT/ca";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-SIMPLE-CERT/certificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCertificatesGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-SIMPLE-CERT/certificates";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-SIMPLE-CERT/certificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCertificatesHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-SIMPLE-CERT/certificates";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSSIMPLECERTApiAxiosParamCreator = OSSIMPLECERTApiAxiosParamCreator;
/**
 * OSSIMPLECERTApi - functional programming interface
 * @export
 */
var OSSIMPLECERTApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OSSIMPLECERTApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/OS-SIMPLE-CERT/ca
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCaGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSSIMPLECERTCaGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSSIMPLECERTApi.oSSIMPLECERTCaGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-SIMPLE-CERT/ca
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCaHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSSIMPLECERTCaHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSSIMPLECERTApi.oSSIMPLECERTCaHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-SIMPLE-CERT/certificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCertificatesGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSSIMPLECERTCertificatesGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSSIMPLECERTApi.oSSIMPLECERTCertificatesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-SIMPLE-CERT/certificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCertificatesHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSSIMPLECERTCertificatesHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSSIMPLECERTApi.oSSIMPLECERTCertificatesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OSSIMPLECERTApiFp = OSSIMPLECERTApiFp;
/**
 * OSSIMPLECERTApi - factory interface
 * @export
 */
var OSSIMPLECERTApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OSSIMPLECERTApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/OS-SIMPLE-CERT/ca
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCaGet: function (options) {
            return localVarFp.oSSIMPLECERTCaGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-SIMPLE-CERT/ca
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCaHead: function (options) {
            return localVarFp.oSSIMPLECERTCaHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-SIMPLE-CERT/certificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCertificatesGet: function (options) {
            return localVarFp.oSSIMPLECERTCertificatesGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-SIMPLE-CERT/certificates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSSIMPLECERTCertificatesHead: function (options) {
            return localVarFp.oSSIMPLECERTCertificatesHead(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OSSIMPLECERTApiFactory = OSSIMPLECERTApiFactory;
/**
 * OSSIMPLECERTApi - object-oriented interface
 * @export
 * @class OSSIMPLECERTApi
 * @extends {BaseAPI}
 */
var OSSIMPLECERTApi = /** @class */ (function (_super) {
    __extends(OSSIMPLECERTApi, _super);
    function OSSIMPLECERTApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSIMPLECERTApi
     */
    OSSIMPLECERTApi.prototype.oSSIMPLECERTCaGet = function (options) {
        var _this = this;
        return (0, exports.OSSIMPLECERTApiFp)(this.configuration).oSSIMPLECERTCaGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/ca
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSIMPLECERTApi
     */
    OSSIMPLECERTApi.prototype.oSSIMPLECERTCaHead = function (options) {
        var _this = this;
        return (0, exports.OSSIMPLECERTApiFp)(this.configuration).oSSIMPLECERTCaHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSIMPLECERTApi
     */
    OSSIMPLECERTApi.prototype.oSSIMPLECERTCertificatesGet = function (options) {
        var _this = this;
        return (0, exports.OSSIMPLECERTApiFp)(this.configuration).oSSIMPLECERTCertificatesGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-SIMPLE-CERT/certificates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSSIMPLECERTApi
     */
    OSSIMPLECERTApi.prototype.oSSIMPLECERTCertificatesHead = function (options) {
        var _this = this;
        return (0, exports.OSSIMPLECERTApiFp)(this.configuration).oSSIMPLECERTCertificatesHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OSSIMPLECERTApi;
}(base_1.BaseAPI));
exports.OSSIMPLECERTApi = OSSIMPLECERTApi;
/**
 * OSTRUSTApi - axios parameter creator
 * @export
 */
var OSTRUSTApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-TRUST/trusts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-TRUST/trusts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a new trust.  The User creating the trust must be the trustor.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/OS-TRUST/trusts";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-TRUST/trusts/{trust_id}
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdDelete: function (trustId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trustId_1], args_1, true), void 0, function (trustId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trustId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdDelete', 'trustId', trustId);
                            localVarPath = "/v3/OS-TRUST/trusts/{trust_id}"
                                .replace("{".concat("trust_id", "}"), encodeURIComponent(String(trustId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdGet: function (trustId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trustId_1], args_1, true), void 0, function (trustId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trustId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdGet', 'trustId', trustId);
                            localVarPath = "/v3/OS-TRUST/trusts/{trust_id}"
                                .replace("{".concat("trust_id", "}"), encodeURIComponent(String(trustId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdHead: function (trustId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trustId_1], args_1, true), void 0, function (trustId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trustId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdHead', 'trustId', trustId);
                            localVarPath = "/v3/OS-TRUST/trusts/{trust_id}"
                                .replace("{".concat("trust_id", "}"), encodeURIComponent(String(trustId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-TRUST/trusts/{trust_id}/roles
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesGet: function (trustId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trustId_1], args_1, true), void 0, function (trustId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trustId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdRolesGet', 'trustId', trustId);
                            localVarPath = "/v3/OS-TRUST/trusts/{trust_id}/roles"
                                .replace("{".concat("trust_id", "}"), encodeURIComponent(String(trustId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-TRUST/trusts/{trust_id}/roles
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesHead: function (trustId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trustId_1], args_1, true), void 0, function (trustId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trustId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdRolesHead', 'trustId', trustId);
                            localVarPath = "/v3/OS-TRUST/trusts/{trust_id}/roles"
                                .replace("{".concat("trust_id", "}"), encodeURIComponent(String(trustId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a role that has been assigned to a trust.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesRoleIdGet: function (trustId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trustId_1, roleId_1], args_1, true), void 0, function (trustId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trustId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdRolesRoleIdGet', 'trustId', trustId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdRolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/OS-TRUST/trusts/{trust_id}/roles/{role_id}"
                                .replace("{".concat("trust_id", "}"), encodeURIComponent(String(trustId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a role that has been assigned to a trust.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesRoleIdHead: function (trustId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([trustId_1, roleId_1], args_1, true), void 0, function (trustId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trustId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdRolesRoleIdHead', 'trustId', trustId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('oSTRUSTTrustsTrustIdRolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/OS-TRUST/trusts/{trust_id}/roles/{role_id}"
                                .replace("{".concat("trust_id", "}"), encodeURIComponent(String(trustId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.OSTRUSTApiAxiosParamCreator = OSTRUSTApiAxiosParamCreator;
/**
 * OSTRUSTApi - functional programming interface
 * @export
 */
var OSTRUSTApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.OSTRUSTApiAxiosParamCreator)(configuration);
    return {
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a new trust.  The User creating the trust must be the trustor.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/OS-TRUST/trusts/{trust_id}
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdDelete: function (trustId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsTrustIdDelete(trustId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsTrustIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdGet: function (trustId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsTrustIdGet(trustId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsTrustIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdHead: function (trustId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsTrustIdHead(trustId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsTrustIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/OS-TRUST/trusts/{trust_id}/roles
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesGet: function (trustId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsTrustIdRolesGet(trustId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsTrustIdRolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/OS-TRUST/trusts/{trust_id}/roles
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesHead: function (trustId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsTrustIdRolesHead(trustId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsTrustIdRolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a role that has been assigned to a trust.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesRoleIdGet: function (trustId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsTrustIdRolesRoleIdGet(trustId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsTrustIdRolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a role that has been assigned to a trust.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesRoleIdHead: function (trustId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.oSTRUSTTrustsTrustIdRolesRoleIdHead(trustId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['OSTRUSTApi.oSTRUSTTrustsTrustIdRolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.OSTRUSTApiFp = OSTRUSTApiFp;
/**
 * OSTRUSTApi - factory interface
 * @export
 */
var OSTRUSTApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.OSTRUSTApiFp)(configuration);
    return {
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsGet: function (options) {
            return localVarFp.oSTRUSTTrustsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsHead: function (options) {
            return localVarFp.oSTRUSTTrustsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a new trust.  The User creating the trust must be the trustor.
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsPost: function (body, options) {
            return localVarFp.oSTRUSTTrustsPost(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/OS-TRUST/trusts/{trust_id}
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdDelete: function (trustId, options) {
            return localVarFp.oSTRUSTTrustsTrustIdDelete(trustId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdGet: function (trustId, options) {
            return localVarFp.oSTRUSTTrustsTrustIdGet(trustId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Dispatch for GET/HEAD or LIST trusts.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdHead: function (trustId, options) {
            return localVarFp.oSTRUSTTrustsTrustIdHead(trustId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/OS-TRUST/trusts/{trust_id}/roles
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesGet: function (trustId, options) {
            return localVarFp.oSTRUSTTrustsTrustIdRolesGet(trustId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/OS-TRUST/trusts/{trust_id}/roles
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesHead: function (trustId, options) {
            return localVarFp.oSTRUSTTrustsTrustIdRolesHead(trustId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a role that has been assigned to a trust.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesRoleIdGet: function (trustId, roleId, options) {
            return localVarFp.oSTRUSTTrustsTrustIdRolesRoleIdGet(trustId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a role that has been assigned to a trust.
         * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oSTRUSTTrustsTrustIdRolesRoleIdHead: function (trustId, roleId, options) {
            return localVarFp.oSTRUSTTrustsTrustIdRolesRoleIdHead(trustId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.OSTRUSTApiFactory = OSTRUSTApiFactory;
/**
 * OSTRUSTApi - object-oriented interface
 * @export
 * @class OSTRUSTApi
 * @extends {BaseAPI}
 */
var OSTRUSTApi = /** @class */ (function (_super) {
    __extends(OSTRUSTApi, _super);
    function OSTRUSTApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsGet = function (options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsHead = function (options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a new trust.  The User creating the trust must be the trustor.
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsPost = function (body, options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/OS-TRUST/trusts/{trust_id}
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsTrustIdDelete = function (trustId, options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsTrustIdDelete(trustId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsTrustIdGet = function (trustId, options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsTrustIdGet(trustId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Dispatch for GET/HEAD or LIST trusts.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsTrustIdHead = function (trustId, options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsTrustIdHead(trustId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsTrustIdRolesGet = function (trustId, options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsTrustIdRolesGet(trustId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/OS-TRUST/trusts/{trust_id}/roles
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsTrustIdRolesHead = function (trustId, options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsTrustIdRolesHead(trustId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsTrustIdRolesRoleIdGet = function (trustId, roleId, options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsTrustIdRolesRoleIdGet(trustId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a role that has been assigned to a trust.
     * @param {string} trustId trust_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/OS-TRUST/trusts/{trust_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OSTRUSTApi
     */
    OSTRUSTApi.prototype.oSTRUSTTrustsTrustIdRolesRoleIdHead = function (trustId, roleId, options) {
        var _this = this;
        return (0, exports.OSTRUSTApiFp)(this.configuration).oSTRUSTTrustsTrustIdRolesRoleIdHead(trustId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return OSTRUSTApi;
}(base_1.BaseAPI));
exports.OSTRUSTApi = OSTRUSTApi;
/**
 * PoliciesApi - axios parameter creator
 * @export
 */
var PoliciesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdDelete: function (policyId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1], args_1, true), void 0, function (policyId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdDelete', 'policyId', policyId);
                            localVarPath = "/v3/policies/{policy_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdGet: function (policyId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1], args_1, true), void 0, function (policyId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdGet', 'policyId', policyId);
                            localVarPath = "/v3/policies/{policy_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdHead: function (policyId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1], args_1, true), void 0, function (policyId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdHead', 'policyId', policyId);
                            localVarPath = "/v3/policies/{policy_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete: function (policyId_1, endpointId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, endpointId_1], args_1, true), void 0, function (policyId, endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete', 'policyId', policyId);
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete', 'endpointId', endpointId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet: function (policyId_1, endpointId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, endpointId_1], args_1, true), void 0, function (policyId, endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet', 'policyId', policyId);
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet', 'endpointId', endpointId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead: function (policyId_1, endpointId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, endpointId_1], args_1, true), void 0, function (policyId, endpointId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead', 'policyId', policyId);
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead', 'endpointId', endpointId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut: function (policyId_1, endpointId_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, endpointId_1, body_1], args_1, true), void 0, function (policyId, endpointId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut', 'policyId', policyId);
                            // verify required parameter 'endpointId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut', 'endpointId', endpointId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("endpoint_id", "}"), encodeURIComponent(String(endpointId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsGet: function (policyId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1], args_1, true), void 0, function (policyId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsGet', 'policyId', policyId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsHead: function (policyId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1], args_1, true), void 0, function (policyId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYEndpointsHead', 'policyId', policyId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete: function (policyId_1, serviceId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, serviceId_1], args_1, true), void 0, function (policyId, serviceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete', 'policyId', policyId);
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete', 'serviceId', serviceId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet: function (policyId_1, serviceId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, serviceId_1], args_1, true), void 0, function (policyId, serviceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet', 'policyId', policyId);
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet', 'serviceId', serviceId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead: function (policyId_1, serviceId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, serviceId_1], args_1, true), void 0, function (policyId, serviceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead', 'policyId', policyId);
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead', 'serviceId', serviceId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut: function (policyId_1, serviceId_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, serviceId_1, body_1], args_1, true), void 0, function (policyId, serviceId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut', 'policyId', policyId);
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut', 'serviceId', serviceId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete: function (policyId_1, serviceId_1, regionId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, serviceId_1, regionId_1], args_1, true), void 0, function (policyId, serviceId, regionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete', 'policyId', policyId);
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete', 'serviceId', serviceId);
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete', 'regionId', regionId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)))
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet: function (policyId_1, serviceId_1, regionId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, serviceId_1, regionId_1], args_1, true), void 0, function (policyId, serviceId, regionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet', 'policyId', policyId);
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet', 'serviceId', serviceId);
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet', 'regionId', regionId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)))
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead: function (policyId_1, serviceId_1, regionId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, serviceId_1, regionId_1], args_1, true), void 0, function (policyId, serviceId, regionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead', 'policyId', policyId);
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead', 'serviceId', serviceId);
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead', 'regionId', regionId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)))
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut: function (policyId_1, serviceId_1, regionId_1, body_1) {
            var args_1 = [];
            for (var _i = 4; _i < arguments.length; _i++) {
                args_1[_i - 4] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, serviceId_1, regionId_1, body_1], args_1, true), void 0, function (policyId, serviceId, regionId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut', 'policyId', policyId);
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut', 'serviceId', serviceId);
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut', 'regionId', regionId);
                            localVarPath = "/v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)))
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)))
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPatch: function (policyId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([policyId_1, body_1], args_1, true), void 0, function (policyId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'policyId' is not null or undefined
                            (0, common_1.assertParamExists)('policiesPolicyIdPatch', 'policyId', policyId);
                            localVarPath = "/v3/policies/{policy_id}"
                                .replace("{".concat("policy_id", "}"), encodeURIComponent(String(policyId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/policies
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/policies";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.PoliciesApiAxiosParamCreator = PoliciesApiAxiosParamCreator;
/**
 * PoliciesApi - functional programming interface
 * @export
 */
var PoliciesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PoliciesApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdDelete: function (policyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdDelete(policyId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdGet: function (policyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdGet(policyId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdHead: function (policyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdHead(policyId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete: function (policyId, endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete(policyId, endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet: function (policyId, endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet(policyId, endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead: function (policyId, endpointId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead(policyId, endpointId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut: function (policyId, endpointId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut(policyId, endpointId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsGet: function (policyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYEndpointsGet(policyId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYEndpointsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsHead: function (policyId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYEndpointsHead(policyId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYEndpointsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete: function (policyId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete(policyId, serviceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet: function (policyId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet(policyId, serviceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead: function (policyId, serviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead(policyId, serviceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut: function (policyId, serviceId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut(policyId, serviceId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete: function (policyId, serviceId, regionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete(policyId, serviceId, regionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet: function (policyId, serviceId, regionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet(policyId, serviceId, regionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead: function (policyId, serviceId, regionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead(policyId, serviceId, regionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut: function (policyId, serviceId, regionId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut(policyId, serviceId, regionId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPatch: function (policyId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPolicyIdPatch(policyId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPolicyIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/policies
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.policiesPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['PoliciesApi.policiesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.PoliciesApiFp = PoliciesApiFp;
/**
 * PoliciesApi - factory interface
 * @export
 */
var PoliciesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PoliciesApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesGet: function (options) {
            return localVarFp.policiesGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesHead: function (options) {
            return localVarFp.policiesHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdDelete: function (policyId, options) {
            return localVarFp.policiesPolicyIdDelete(policyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdGet: function (policyId, options) {
            return localVarFp.policiesPolicyIdGet(policyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdHead: function (policyId, options) {
            return localVarFp.policiesPolicyIdHead(policyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete: function (policyId, endpointId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete(policyId, endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet: function (policyId, endpointId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet(policyId, endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead: function (policyId, endpointId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead(policyId, endpointId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut: function (policyId, endpointId, body, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut(policyId, endpointId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsGet: function (policyId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYEndpointsGet(policyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYEndpointsHead: function (policyId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYEndpointsHead(policyId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete: function (policyId, serviceId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete(policyId, serviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet: function (policyId, serviceId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet(policyId, serviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead: function (policyId, serviceId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead(policyId, serviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut: function (policyId, serviceId, body, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut(policyId, serviceId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete: function (policyId, serviceId, regionId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete(policyId, serviceId, regionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet: function (policyId, serviceId, regionId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet(policyId, serviceId, regionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead: function (policyId, serviceId, regionId, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead(policyId, serviceId, regionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut: function (policyId, serviceId, regionId, body, options) {
            return localVarFp.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut(policyId, serviceId, regionId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/policies/{policy_id}
         * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPolicyIdPatch: function (policyId, body, options) {
            return localVarFp.policiesPolicyIdPatch(policyId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/policies
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policiesPost: function (body, options) {
            return localVarFp.policiesPost(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.PoliciesApiFactory = PoliciesApiFactory;
/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
var PoliciesApi = /** @class */ (function (_super) {
    __extends(PoliciesApi, _super);
    function PoliciesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesGet = function (options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesHead = function (options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdDelete = function (policyId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdDelete(policyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdGet = function (policyId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdGet(policyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdHead = function (policyId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdHead(policyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete = function (policyId, endpointId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdDelete(policyId, endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet = function (policyId, endpointId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdGet(policyId, endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead = function (policyId, endpointId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdHead(policyId, endpointId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {string} endpointId endpoint_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut = function (policyId, endpointId, body, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYEndpointsEndpointIdPut(policyId, endpointId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYEndpointsGet = function (policyId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYEndpointsGet(policyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/endpoints/{endpoint_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYEndpointsHead = function (policyId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYEndpointsHead(policyId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete = function (policyId, serviceId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdDelete(policyId, serviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet = function (policyId, serviceId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdGet(policyId, serviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead = function (policyId, serviceId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdHead(policyId, serviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut = function (policyId, serviceId, body, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdPut(policyId, serviceId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete = function (policyId, serviceId, regionId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdDelete(policyId, serviceId, regionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet = function (policyId, serviceId, regionId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdGet(policyId, serviceId, regionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead = function (policyId, serviceId, regionId, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdHead(policyId, serviceId, regionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PUT operation on /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} serviceId service_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {string} regionId region_id parameter for /v3/policies/{policy_id}/OS-ENDPOINT-POLICY/services/{service_id}/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut = function (policyId, serviceId, regionId, body, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdOSENDPOINTPOLICYServicesServiceIdRegionsRegionIdPut(policyId, serviceId, regionId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/policies/{policy_id}
     * @param {string} policyId policy_id parameter for /v3/policies/{policy_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPolicyIdPatch = function (policyId, body, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPolicyIdPatch(policyId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/policies
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    PoliciesApi.prototype.policiesPost = function (body, options) {
        var _this = this;
        return (0, exports.PoliciesApiFp)(this.configuration).policiesPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PoliciesApi;
}(base_1.BaseAPI));
exports.PoliciesApi = PoliciesApi;
/**
 * ProjectsApi - axios parameter creator
 * @export
 */
var ProjectsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
         * @param {boolean} [isDomain] If this is specified as true, then only projects acting as a domain are included. Otherwise, only projects that are not acting as a domain are included.
         * @param {string} [name] Filters the response by a resource name.
         * @param {string} [parentId] Filters the response by a parent ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: function (domainId_1, enabled_1, isDomain_1, name_1, parentId_1) {
            var args_1 = [];
            for (var _i = 5; _i < arguments.length; _i++) {
                args_1[_i - 5] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, enabled_1, isDomain_1, name_1, parentId_1], args_1, true), void 0, function (domainId, enabled, isDomain, name, parentId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (domainId !== undefined) {
                                localVarQueryParameter['domain_id'] = domainId;
                            }
                            if (enabled !== undefined) {
                                localVarQueryParameter['enabled'] = enabled;
                            }
                            if (isDomain !== undefined) {
                                localVarQueryParameter['is_domain'] = isDomain;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (parentId !== undefined) {
                                localVarQueryParameter['parent_id'] = parentId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create project.  POST /v3/projects
         * @param {Project} [project]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost: function (project_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([project_1], args_1, true), void 0, function (project, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/projects";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(project, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete project.  DELETE /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdDelete: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdDelete', 'projectId', projectId);
                            localVarPath = "/v3/projects/{project_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGet: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGet', 'projectId', projectId);
                            localVarPath = "/v3/projects/{project_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesGet: function (projectId_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1], args_1, true), void 0, function (projectId, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesGet', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesGet', 'groupId', groupId);
                            localVarPath = "/v3/projects/{project_id}/groups/{group_id}/roles"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesHead: function (projectId_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1], args_1, true), void 0, function (projectId, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesHead', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesHead', 'groupId', groupId);
                            localVarPath = "/v3/projects/{project_id}/groups/{group_id}/roles"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete grant of role for group on project.  DELETE /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdDelete: function (projectId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1, roleId_1], args_1, true), void 0, function (projectId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdDelete', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdDelete', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdDelete', 'roleId', roleId);
                            localVarPath = "/v3/projects/{project_id}/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdGet: function (projectId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1, roleId_1], args_1, true), void 0, function (projectId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdGet', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdGet', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/projects/{project_id}/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdHead: function (projectId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1, roleId_1], args_1, true), void 0, function (projectId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdHead', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdHead', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/projects/{project_id}/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Grant role for group on project.  PUT /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdPut: function (projectId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, groupId_1, roleId_1], args_1, true), void 0, function (projectId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdPut', 'projectId', projectId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdPut', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdGroupsGroupIdRolesRoleIdPut', 'roleId', roleId);
                            localVarPath = "/v3/projects/{project_id}/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdHead: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdHead', 'projectId', projectId);
                            localVarPath = "/v3/projects/{project_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update project.  PATCH /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {Project} [project]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdPatch: function (projectId_1, project_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, project_1], args_1, true), void 0, function (projectId, project, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdPatch', 'projectId', projectId);
                            localVarPath = "/v3/projects/{project_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(project, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete all tags associated with a given project.  DELETE /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsDelete: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsDelete', 'projectId', projectId);
                            localVarPath = "/v3/projects/{project_id}/tags"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsGet: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsGet', 'projectId', projectId);
                            localVarPath = "/v3/projects/{project_id}/tags"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsHead: function (projectId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1], args_1, true), void 0, function (projectId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsHead', 'projectId', projectId);
                            localVarPath = "/v3/projects/{project_id}/tags"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update all tags associated with a given project.  PUT /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsPut: function (projectId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, body_1], args_1, true), void 0, function (projectId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsPut', 'projectId', projectId);
                            localVarPath = "/v3/projects/{project_id}/tags"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a single tag from a project.  /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueDelete: function (projectId_1, value_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, value_1], args_1, true), void 0, function (projectId, value, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsValueDelete', 'projectId', projectId);
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsValueDelete', 'value', value);
                            localVarPath = "/v3/projects/{project_id}/tags/{value}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("value", "}"), encodeURIComponent(String(value)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueGet: function (projectId_1, value_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, value_1], args_1, true), void 0, function (projectId, value, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsValueGet', 'projectId', projectId);
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsValueGet', 'value', value);
                            localVarPath = "/v3/projects/{project_id}/tags/{value}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("value", "}"), encodeURIComponent(String(value)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueHead: function (projectId_1, value_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, value_1], args_1, true), void 0, function (projectId, value, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsValueHead', 'projectId', projectId);
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsValueHead', 'value', value);
                            localVarPath = "/v3/projects/{project_id}/tags/{value}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("value", "}"), encodeURIComponent(String(value)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Add a single tag to a project.  PUT /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValuePut: function (projectId_1, value_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, value_1, body_1], args_1, true), void 0, function (projectId, value, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsValuePut', 'projectId', projectId);
                            // verify required parameter 'value' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdTagsValuePut', 'value', value);
                            localVarPath = "/v3/projects/{project_id}/tags/{value}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("value", "}"), encodeURIComponent(String(value)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesGet: function (projectId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1], args_1, true), void 0, function (projectId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesGet', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesGet', 'userId', userId);
                            localVarPath = "/v3/projects/{project_id}/users/{user_id}/roles"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesHead: function (projectId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1], args_1, true), void 0, function (projectId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesHead', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesHead', 'userId', userId);
                            localVarPath = "/v3/projects/{project_id}/users/{user_id}/roles"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete grant of role for user on project.  DELETE /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdDelete: function (projectId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1, roleId_1], args_1, true), void 0, function (projectId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdDelete', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdDelete', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdDelete', 'roleId', roleId);
                            localVarPath = "/v3/projects/{project_id}/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdGet: function (projectId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1, roleId_1], args_1, true), void 0, function (projectId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdGet', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdGet', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/projects/{project_id}/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdHead: function (projectId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1, roleId_1], args_1, true), void 0, function (projectId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdHead', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdHead', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/projects/{project_id}/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Grant role for user on project.  PUT /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdPut: function (projectId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([projectId_1, userId_1, roleId_1], args_1, true), void 0, function (projectId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'projectId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdPut', 'projectId', projectId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdPut', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('projectsProjectIdUsersUserIdRolesRoleIdPut', 'roleId', roleId);
                            localVarPath = "/v3/projects/{project_id}/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("project_id", "}"), encodeURIComponent(String(projectId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ProjectsApiAxiosParamCreator = ProjectsApiAxiosParamCreator;
/**
 * ProjectsApi - functional programming interface
 * @export
 */
var ProjectsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ProjectsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
         * @param {boolean} [isDomain] If this is specified as true, then only projects acting as a domain are included. Otherwise, only projects that are not acting as a domain are included.
         * @param {string} [name] Filters the response by a resource name.
         * @param {string} [parentId] Filters the response by a parent ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: function (domainId, enabled, isDomain, name, parentId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsGet(domainId, enabled, isDomain, name, parentId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create project.  POST /v3/projects
         * @param {Project} [project]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost: function (project, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsPost(project, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete project.  DELETE /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdDelete: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdDelete(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGet: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdGet(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesGet: function (projectId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdGroupsGroupIdRolesGet(projectId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdGroupsGroupIdRolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesHead: function (projectId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdGroupsGroupIdRolesHead(projectId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdGroupsGroupIdRolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete grant of role for group on project.  DELETE /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdDelete: function (projectId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdGroupsGroupIdRolesRoleIdDelete(projectId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdGroupsGroupIdRolesRoleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdGet: function (projectId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdGroupsGroupIdRolesRoleIdGet(projectId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdGroupsGroupIdRolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdHead: function (projectId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdGroupsGroupIdRolesRoleIdHead(projectId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdGroupsGroupIdRolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Grant role for group on project.  PUT /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdPut: function (projectId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdGroupsGroupIdRolesRoleIdPut(projectId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdGroupsGroupIdRolesRoleIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdHead: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdHead(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update project.  PATCH /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {Project} [project]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdPatch: function (projectId, project, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdPatch(projectId, project, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete all tags associated with a given project.  DELETE /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsDelete: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdTagsDelete(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdTagsDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsGet: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdTagsGet(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdTagsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsHead: function (projectId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdTagsHead(projectId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdTagsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update all tags associated with a given project.  PUT /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsPut: function (projectId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdTagsPut(projectId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdTagsPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a single tag from a project.  /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueDelete: function (projectId, value, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdTagsValueDelete(projectId, value, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdTagsValueDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueGet: function (projectId, value, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdTagsValueGet(projectId, value, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdTagsValueGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueHead: function (projectId, value, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdTagsValueHead(projectId, value, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdTagsValueHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Add a single tag to a project.  PUT /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValuePut: function (projectId, value, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdTagsValuePut(projectId, value, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdTagsValuePut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesGet: function (projectId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdUsersUserIdRolesGet(projectId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdUsersUserIdRolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesHead: function (projectId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdUsersUserIdRolesHead(projectId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdUsersUserIdRolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete grant of role for user on project.  DELETE /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdDelete: function (projectId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdUsersUserIdRolesRoleIdDelete(projectId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdUsersUserIdRolesRoleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdGet: function (projectId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdUsersUserIdRolesRoleIdGet(projectId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdUsersUserIdRolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdHead: function (projectId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdUsersUserIdRolesRoleIdHead(projectId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdUsersUserIdRolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Grant role for user on project.  PUT /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdPut: function (projectId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.projectsProjectIdUsersUserIdRolesRoleIdPut(projectId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ProjectsApi.projectsProjectIdUsersUserIdRolesRoleIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ProjectsApiFp = ProjectsApiFp;
/**
 * ProjectsApi - factory interface
 * @export
 */
var ProjectsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ProjectsApiFp)(configuration);
    return {
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
         * @param {boolean} [isDomain] If this is specified as true, then only projects acting as a domain are included. Otherwise, only projects that are not acting as a domain are included.
         * @param {string} [name] Filters the response by a resource name.
         * @param {string} [parentId] Filters the response by a parent ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsGet: function (domainId, enabled, isDomain, name, parentId, options) {
            return localVarFp.projectsGet(domainId, enabled, isDomain, name, parentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsHead: function (options) {
            return localVarFp.projectsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create project.  POST /v3/projects
         * @param {Project} [project]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsPost: function (project, options) {
            return localVarFp.projectsPost(project, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete project.  DELETE /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdDelete: function (projectId, options) {
            return localVarFp.projectsProjectIdDelete(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGet: function (projectId, options) {
            return localVarFp.projectsProjectIdGet(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesGet: function (projectId, groupId, options) {
            return localVarFp.projectsProjectIdGroupsGroupIdRolesGet(projectId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesHead: function (projectId, groupId, options) {
            return localVarFp.projectsProjectIdGroupsGroupIdRolesHead(projectId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete grant of role for group on project.  DELETE /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdDelete: function (projectId, groupId, roleId, options) {
            return localVarFp.projectsProjectIdGroupsGroupIdRolesRoleIdDelete(projectId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdGet: function (projectId, groupId, roleId, options) {
            return localVarFp.projectsProjectIdGroupsGroupIdRolesRoleIdGet(projectId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdHead: function (projectId, groupId, roleId, options) {
            return localVarFp.projectsProjectIdGroupsGroupIdRolesRoleIdHead(projectId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Grant role for group on project.  PUT /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdGroupsGroupIdRolesRoleIdPut: function (projectId, groupId, roleId, options) {
            return localVarFp.projectsProjectIdGroupsGroupIdRolesRoleIdPut(projectId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdHead: function (projectId, options) {
            return localVarFp.projectsProjectIdHead(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update project.  PATCH /v3/projects/{project_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
         * @param {Project} [project]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdPatch: function (projectId, project, options) {
            return localVarFp.projectsProjectIdPatch(projectId, project, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete all tags associated with a given project.  DELETE /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsDelete: function (projectId, options) {
            return localVarFp.projectsProjectIdTagsDelete(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsGet: function (projectId, options) {
            return localVarFp.projectsProjectIdTagsGet(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsHead: function (projectId, options) {
            return localVarFp.projectsProjectIdTagsHead(projectId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update all tags associated with a given project.  PUT /v3/projects/{project_id}/tags
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsPut: function (projectId, body, options) {
            return localVarFp.projectsProjectIdTagsPut(projectId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a single tag from a project.  /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueDelete: function (projectId, value, options) {
            return localVarFp.projectsProjectIdTagsValueDelete(projectId, value, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueGet: function (projectId, value, options) {
            return localVarFp.projectsProjectIdTagsValueGet(projectId, value, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValueHead: function (projectId, value, options) {
            return localVarFp.projectsProjectIdTagsValueHead(projectId, value, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Add a single tag to a project.  PUT /v3/projects/{project_id}/tags/{value}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdTagsValuePut: function (projectId, value, body, options) {
            return localVarFp.projectsProjectIdTagsValuePut(projectId, value, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesGet: function (projectId, userId, options) {
            return localVarFp.projectsProjectIdUsersUserIdRolesGet(projectId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesHead: function (projectId, userId, options) {
            return localVarFp.projectsProjectIdUsersUserIdRolesHead(projectId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete grant of role for user on project.  DELETE /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdDelete: function (projectId, userId, roleId, options) {
            return localVarFp.projectsProjectIdUsersUserIdRolesRoleIdDelete(projectId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdGet: function (projectId, userId, roleId, options) {
            return localVarFp.projectsProjectIdUsersUserIdRolesRoleIdGet(projectId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdHead: function (projectId, userId, roleId, options) {
            return localVarFp.projectsProjectIdUsersUserIdRolesRoleIdHead(projectId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Grant role for user on project.  PUT /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
         * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
         * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectsProjectIdUsersUserIdRolesRoleIdPut: function (projectId, userId, roleId, options) {
            return localVarFp.projectsProjectIdUsersUserIdRolesRoleIdPut(projectId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ProjectsApiFactory = ProjectsApiFactory;
/**
 * ProjectsApi - object-oriented interface
 * @export
 * @class ProjectsApi
 * @extends {BaseAPI}
 */
var ProjectsApi = /** @class */ (function (_super) {
    __extends(ProjectsApi, _super);
    function ProjectsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {boolean} [isDomain] If this is specified as true, then only projects acting as a domain are included. Otherwise, only projects that are not acting as a domain are included.
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [parentId] Filters the response by a parent ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsGet = function (domainId, enabled, isDomain, name, parentId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsGet(domainId, enabled, isDomain, name, parentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsHead = function (options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create project.  POST /v3/projects
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsPost = function (project, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsPost(project, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete project.  DELETE /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdDelete = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdDelete(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdGet = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdGet(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdGroupsGroupIdRolesGet = function (projectId, groupId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdGroupsGroupIdRolesGet(projectId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List grants for group on project.  GET/HEAD /v3/projects/{project_id}/groups/{group_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdGroupsGroupIdRolesHead = function (projectId, groupId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdGroupsGroupIdRolesHead(projectId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete grant of role for group on project.  DELETE /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdGroupsGroupIdRolesRoleIdDelete = function (projectId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdGroupsGroupIdRolesRoleIdDelete(projectId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdGroupsGroupIdRolesRoleIdGet = function (projectId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdGroupsGroupIdRolesRoleIdGet(projectId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check grant for project, group, role.  GET/HEAD /v3/projects/{project_id/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdGroupsGroupIdRolesRoleIdHead = function (projectId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdGroupsGroupIdRolesRoleIdHead(projectId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Grant role for group on project.  PUT /v3/projects/{project_id}/groups/{group_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} groupId group_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdGroupsGroupIdRolesRoleIdPut = function (projectId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdGroupsGroupIdRolesRoleIdPut(projectId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get project or list projects.  GET/HEAD /v3/projects GET/HEAD /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdHead = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdHead(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update project.  PATCH /v3/projects/{project_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id} API
     * @param {Project} [project]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdPatch = function (projectId, project, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdPatch(projectId, project, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete all tags associated with a given project.  DELETE /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdTagsDelete = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdTagsDelete(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdTagsGet = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdTagsGet(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List tags associated with a given project.  GET /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdTagsHead = function (projectId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdTagsHead(projectId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update all tags associated with a given project.  PUT /v3/projects/{project_id}/tags
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdTagsPut = function (projectId, body, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdTagsPut(projectId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a single tag from a project.  /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdTagsValueDelete = function (projectId, value, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdTagsValueDelete(projectId, value, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdTagsValueGet = function (projectId, value, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdTagsValueGet(projectId, value, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get information for a single tag associated with a given project.  GET /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdTagsValueHead = function (projectId, value, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdTagsValueHead(projectId, value, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Add a single tag to a project.  PUT /v3/projects/{project_id}/tags/{value}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {string} value value parameter for /v3/projects/{project_id}/tags/{value} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdTagsValuePut = function (projectId, value, body, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdTagsValuePut(projectId, value, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdUsersUserIdRolesGet = function (projectId, userId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdUsersUserIdRolesGet(projectId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List grants for user on project.  GET/HEAD /v3/projects/{project_id}/users/{user_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdUsersUserIdRolesHead = function (projectId, userId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdUsersUserIdRolesHead(projectId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete grant of role for user on project.  DELETE /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdUsersUserIdRolesRoleIdDelete = function (projectId, userId, roleId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdUsersUserIdRolesRoleIdDelete(projectId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdUsersUserIdRolesRoleIdGet = function (projectId, userId, roleId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdUsersUserIdRolesRoleIdGet(projectId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check grant for project, user, role.  GET/HEAD /v3/projects/{project_id/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdUsersUserIdRolesRoleIdHead = function (projectId, userId, roleId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdUsersUserIdRolesRoleIdHead(projectId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Grant role for user on project.  PUT /v3/projects/{project_id}/users/{user_id}/roles/{role_id}
     * @param {string} projectId project_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} userId user_id parameter for /v3/projects/{project_id}/users/{user_id}/roles API
     * @param {string} roleId role_id parameter for /v3/projects/{project_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectsApi
     */
    ProjectsApi.prototype.projectsProjectIdUsersUserIdRolesRoleIdPut = function (projectId, userId, roleId, options) {
        var _this = this;
        return (0, exports.ProjectsApiFp)(this.configuration).projectsProjectIdUsersUserIdRolesRoleIdPut(projectId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ProjectsApi;
}(base_1.BaseAPI));
exports.ProjectsApi = ProjectsApi;
/**
 * RegionsApi - axios parameter creator
 * @export
 */
var RegionsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/regions
         * @param {string} [parentRegionId] Filters the response by a parent region, by ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsGet: function (parentRegionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([parentRegionId_1], args_1, true), void 0, function (parentRegionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/regions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (parentRegionId !== undefined) {
                                localVarQueryParameter['parent_region_id'] = parentRegionId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/regions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/regions
         * @param {Region} [region]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsPost: function (region_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([region_1], args_1, true), void 0, function (region, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/regions";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(region, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdDelete: function (regionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([regionId_1], args_1, true), void 0, function (regionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('regionsRegionIdDelete', 'regionId', regionId);
                            localVarPath = "/v3/regions/{region_id}"
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdGet: function (regionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([regionId_1], args_1, true), void 0, function (regionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('regionsRegionIdGet', 'regionId', regionId);
                            localVarPath = "/v3/regions/{region_id}"
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdHead: function (regionId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([regionId_1], args_1, true), void 0, function (regionId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('regionsRegionIdHead', 'regionId', regionId);
                            localVarPath = "/v3/regions/{region_id}"
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {Region} [region]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdPatch: function (regionId_1, region_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([regionId_1, region_1], args_1, true), void 0, function (regionId, region, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('regionsRegionIdPatch', 'regionId', regionId);
                            localVarPath = "/v3/regions/{region_id}"
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(region, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdPut: function (regionId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([regionId_1, body_1], args_1, true), void 0, function (regionId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'regionId' is not null or undefined
                            (0, common_1.assertParamExists)('regionsRegionIdPut', 'regionId', regionId);
                            localVarPath = "/v3/regions/{region_id}"
                                .replace("{".concat("region_id", "}"), encodeURIComponent(String(regionId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RegionsApiAxiosParamCreator = RegionsApiAxiosParamCreator;
/**
 * RegionsApi - functional programming interface
 * @export
 */
var RegionsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RegionsApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/regions
         * @param {string} [parentRegionId] Filters the response by a parent region, by ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsGet: function (parentRegionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.regionsGet(parentRegionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegionsApi.regionsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.regionsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegionsApi.regionsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/regions
         * @param {Region} [region]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsPost: function (region, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.regionsPost(region, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegionsApi.regionsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdDelete: function (regionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.regionsRegionIdDelete(regionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegionsApi.regionsRegionIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdGet: function (regionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.regionsRegionIdGet(regionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegionsApi.regionsRegionIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdHead: function (regionId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.regionsRegionIdHead(regionId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegionsApi.regionsRegionIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {Region} [region]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdPatch: function (regionId, region, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.regionsRegionIdPatch(regionId, region, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegionsApi.regionsRegionIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PUT operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdPut: function (regionId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.regionsRegionIdPut(regionId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegionsApi.regionsRegionIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RegionsApiFp = RegionsApiFp;
/**
 * RegionsApi - factory interface
 * @export
 */
var RegionsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RegionsApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/regions
         * @param {string} [parentRegionId] Filters the response by a parent region, by ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsGet: function (parentRegionId, options) {
            return localVarFp.regionsGet(parentRegionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/regions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsHead: function (options) {
            return localVarFp.regionsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/regions
         * @param {Region} [region]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsPost: function (region, options) {
            return localVarFp.regionsPost(region, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdDelete: function (regionId, options) {
            return localVarFp.regionsRegionIdDelete(regionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdGet: function (regionId, options) {
            return localVarFp.regionsRegionIdGet(regionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdHead: function (regionId, options) {
            return localVarFp.regionsRegionIdHead(regionId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {Region} [region]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdPatch: function (regionId, region, options) {
            return localVarFp.regionsRegionIdPatch(regionId, region, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PUT operation on /v3/regions/{region_id}
         * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        regionsRegionIdPut: function (regionId, body, options) {
            return localVarFp.regionsRegionIdPut(regionId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RegionsApiFactory = RegionsApiFactory;
/**
 * RegionsApi - object-oriented interface
 * @export
 * @class RegionsApi
 * @extends {BaseAPI}
 */
var RegionsApi = /** @class */ (function (_super) {
    __extends(RegionsApi, _super);
    function RegionsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/regions
     * @param {string} [parentRegionId] Filters the response by a parent region, by ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    RegionsApi.prototype.regionsGet = function (parentRegionId, options) {
        var _this = this;
        return (0, exports.RegionsApiFp)(this.configuration).regionsGet(parentRegionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/regions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    RegionsApi.prototype.regionsHead = function (options) {
        var _this = this;
        return (0, exports.RegionsApiFp)(this.configuration).regionsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/regions
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    RegionsApi.prototype.regionsPost = function (region, options) {
        var _this = this;
        return (0, exports.RegionsApiFp)(this.configuration).regionsPost(region, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    RegionsApi.prototype.regionsRegionIdDelete = function (regionId, options) {
        var _this = this;
        return (0, exports.RegionsApiFp)(this.configuration).regionsRegionIdDelete(regionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    RegionsApi.prototype.regionsRegionIdGet = function (regionId, options) {
        var _this = this;
        return (0, exports.RegionsApiFp)(this.configuration).regionsRegionIdGet(regionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    RegionsApi.prototype.regionsRegionIdHead = function (regionId, options) {
        var _this = this;
        return (0, exports.RegionsApiFp)(this.configuration).regionsRegionIdHead(regionId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {Region} [region]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    RegionsApi.prototype.regionsRegionIdPatch = function (regionId, region, options) {
        var _this = this;
        return (0, exports.RegionsApiFp)(this.configuration).regionsRegionIdPatch(regionId, region, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PUT operation on /v3/regions/{region_id}
     * @param {string} regionId region_id parameter for /v3/regions/{region_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegionsApi
     */
    RegionsApi.prototype.regionsRegionIdPut = function (regionId, body, options) {
        var _this = this;
        return (0, exports.RegionsApiFp)(this.configuration).regionsRegionIdPut(regionId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RegionsApi;
}(base_1.BaseAPI));
exports.RegionsApi = RegionsApi;
/**
 * RegisteredLimitsApi - axios parameter creator
 * @export
 */
var RegisteredLimitsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/registered_limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/registered_limits";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/registered_limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/registered_limits";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/registered_limits
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/registered_limits";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdDelete: function (registeredLimitId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([registeredLimitId_1], args_1, true), void 0, function (registeredLimitId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'registeredLimitId' is not null or undefined
                            (0, common_1.assertParamExists)('registeredLimitsRegisteredLimitIdDelete', 'registeredLimitId', registeredLimitId);
                            localVarPath = "/v3/registered_limits/{registered_limit_id}"
                                .replace("{".concat("registered_limit_id", "}"), encodeURIComponent(String(registeredLimitId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdGet: function (registeredLimitId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([registeredLimitId_1], args_1, true), void 0, function (registeredLimitId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'registeredLimitId' is not null or undefined
                            (0, common_1.assertParamExists)('registeredLimitsRegisteredLimitIdGet', 'registeredLimitId', registeredLimitId);
                            localVarPath = "/v3/registered_limits/{registered_limit_id}"
                                .replace("{".concat("registered_limit_id", "}"), encodeURIComponent(String(registeredLimitId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdHead: function (registeredLimitId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([registeredLimitId_1], args_1, true), void 0, function (registeredLimitId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'registeredLimitId' is not null or undefined
                            (0, common_1.assertParamExists)('registeredLimitsRegisteredLimitIdHead', 'registeredLimitId', registeredLimitId);
                            localVarPath = "/v3/registered_limits/{registered_limit_id}"
                                .replace("{".concat("registered_limit_id", "}"), encodeURIComponent(String(registeredLimitId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdPatch: function (registeredLimitId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([registeredLimitId_1, body_1], args_1, true), void 0, function (registeredLimitId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'registeredLimitId' is not null or undefined
                            (0, common_1.assertParamExists)('registeredLimitsRegisteredLimitIdPatch', 'registeredLimitId', registeredLimitId);
                            localVarPath = "/v3/registered_limits/{registered_limit_id}"
                                .replace("{".concat("registered_limit_id", "}"), encodeURIComponent(String(registeredLimitId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RegisteredLimitsApiAxiosParamCreator = RegisteredLimitsApiAxiosParamCreator;
/**
 * RegisteredLimitsApi - functional programming interface
 * @export
 */
var RegisteredLimitsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RegisteredLimitsApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/registered_limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registeredLimitsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegisteredLimitsApi.registeredLimitsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/registered_limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registeredLimitsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegisteredLimitsApi.registeredLimitsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/registered_limits
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registeredLimitsPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegisteredLimitsApi.registeredLimitsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdDelete: function (registeredLimitId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registeredLimitsRegisteredLimitIdDelete(registeredLimitId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegisteredLimitsApi.registeredLimitsRegisteredLimitIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdGet: function (registeredLimitId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registeredLimitsRegisteredLimitIdGet(registeredLimitId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegisteredLimitsApi.registeredLimitsRegisteredLimitIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdHead: function (registeredLimitId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registeredLimitsRegisteredLimitIdHead(registeredLimitId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegisteredLimitsApi.registeredLimitsRegisteredLimitIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdPatch: function (registeredLimitId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.registeredLimitsRegisteredLimitIdPatch(registeredLimitId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RegisteredLimitsApi.registeredLimitsRegisteredLimitIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RegisteredLimitsApiFp = RegisteredLimitsApiFp;
/**
 * RegisteredLimitsApi - factory interface
 * @export
 */
var RegisteredLimitsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RegisteredLimitsApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/registered_limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsGet: function (options) {
            return localVarFp.registeredLimitsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/registered_limits
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsHead: function (options) {
            return localVarFp.registeredLimitsHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/registered_limits
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsPost: function (body, options) {
            return localVarFp.registeredLimitsPost(body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdDelete: function (registeredLimitId, options) {
            return localVarFp.registeredLimitsRegisteredLimitIdDelete(registeredLimitId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdGet: function (registeredLimitId, options) {
            return localVarFp.registeredLimitsRegisteredLimitIdGet(registeredLimitId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdHead: function (registeredLimitId, options) {
            return localVarFp.registeredLimitsRegisteredLimitIdHead(registeredLimitId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/registered_limits/{registered_limit_id}
         * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registeredLimitsRegisteredLimitIdPatch: function (registeredLimitId, body, options) {
            return localVarFp.registeredLimitsRegisteredLimitIdPatch(registeredLimitId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RegisteredLimitsApiFactory = RegisteredLimitsApiFactory;
/**
 * RegisteredLimitsApi - object-oriented interface
 * @export
 * @class RegisteredLimitsApi
 * @extends {BaseAPI}
 */
var RegisteredLimitsApi = /** @class */ (function (_super) {
    __extends(RegisteredLimitsApi, _super);
    function RegisteredLimitsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    RegisteredLimitsApi.prototype.registeredLimitsGet = function (options) {
        var _this = this;
        return (0, exports.RegisteredLimitsApiFp)(this.configuration).registeredLimitsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/registered_limits
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    RegisteredLimitsApi.prototype.registeredLimitsHead = function (options) {
        var _this = this;
        return (0, exports.RegisteredLimitsApiFp)(this.configuration).registeredLimitsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/registered_limits
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    RegisteredLimitsApi.prototype.registeredLimitsPost = function (body, options) {
        var _this = this;
        return (0, exports.RegisteredLimitsApiFp)(this.configuration).registeredLimitsPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    RegisteredLimitsApi.prototype.registeredLimitsRegisteredLimitIdDelete = function (registeredLimitId, options) {
        var _this = this;
        return (0, exports.RegisteredLimitsApiFp)(this.configuration).registeredLimitsRegisteredLimitIdDelete(registeredLimitId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    RegisteredLimitsApi.prototype.registeredLimitsRegisteredLimitIdGet = function (registeredLimitId, options) {
        var _this = this;
        return (0, exports.RegisteredLimitsApiFp)(this.configuration).registeredLimitsRegisteredLimitIdGet(registeredLimitId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    RegisteredLimitsApi.prototype.registeredLimitsRegisteredLimitIdHead = function (registeredLimitId, options) {
        var _this = this;
        return (0, exports.RegisteredLimitsApiFp)(this.configuration).registeredLimitsRegisteredLimitIdHead(registeredLimitId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/registered_limits/{registered_limit_id}
     * @param {string} registeredLimitId registered_limit_id parameter for /v3/registered_limits/{registered_limit_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegisteredLimitsApi
     */
    RegisteredLimitsApi.prototype.registeredLimitsRegisteredLimitIdPatch = function (registeredLimitId, body, options) {
        var _this = this;
        return (0, exports.RegisteredLimitsApiFp)(this.configuration).registeredLimitsRegisteredLimitIdPatch(registeredLimitId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RegisteredLimitsApi;
}(base_1.BaseAPI));
exports.RegisteredLimitsApi = RegisteredLimitsApi;
/**
 * RoleAssignmentsApi - axios parameter creator
 * @export
 */
var RoleAssignmentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * List all role assignments.  GET/HEAD /v3/role_assignments
         * @param {string} [groupId] Filters the response by a group ID.
         * @param {string} [roleId] Filters the response by a role ID.
         * @param {string} [userId] Filters the response by a user ID.
         * @param {string} [scopeDomainId] Filters the response by a domain ID.
         * @param {string} [scopeProjectId] Filters the response by a project ID.
         * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
         * @param {any | null} [effective] Returns the effective assignments, including any assignments gained by virtue of group membership.
         * @param {any | null} [includeNames] If set, then the names of any entities returned will be include as well as their IDs. Any value other than 0 (including no value) will be interpreted as true.
         * @param {any | null} [includeSubtree] If set, then relevant assignments in the project hierarchy below the project specified in the scope.project_id query parameter are also included in the response. Any value other than 0 (including no value) for include_subtree will be interpreted as true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleAssignmentsGet: function (groupId_1, roleId_1, userId_1, scopeDomainId_1, scopeProjectId_1, scopeOSINHERITinheritedTo_1, effective_1, includeNames_1, includeSubtree_1) {
            var args_1 = [];
            for (var _i = 9; _i < arguments.length; _i++) {
                args_1[_i - 9] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, roleId_1, userId_1, scopeDomainId_1, scopeProjectId_1, scopeOSINHERITinheritedTo_1, effective_1, includeNames_1, includeSubtree_1], args_1, true), void 0, function (groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, effective, includeNames, includeSubtree, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, _a, _b, _c, key, value, _d, _e, _f, key, value, _g, _h, _j, key, value, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_k) {
                    switch (_k.label) {
                        case 0:
                            localVarPath = "/v3/role_assignments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _k.sent();
                            if (groupId !== undefined) {
                                localVarQueryParameter['group.id'] = groupId;
                            }
                            if (roleId !== undefined) {
                                localVarQueryParameter['role.id'] = roleId;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['user.id'] = userId;
                            }
                            if (scopeDomainId !== undefined) {
                                localVarQueryParameter['scope.domain.id'] = scopeDomainId;
                            }
                            if (scopeProjectId !== undefined) {
                                localVarQueryParameter['scope.project.id'] = scopeProjectId;
                            }
                            if (scopeOSINHERITinheritedTo !== undefined) {
                                localVarQueryParameter['scope.OS-INHERIT:inherited_to'] = scopeOSINHERITinheritedTo;
                            }
                            if (effective !== undefined) {
                                for (_a = 0, _b = Object.entries(effective); _a < _b.length; _a++) {
                                    _c = _b[_a], key = _c[0], value = _c[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (includeNames !== undefined) {
                                for (_d = 0, _e = Object.entries(includeNames); _d < _e.length; _d++) {
                                    _f = _e[_d], key = _f[0], value = _f[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            if (includeSubtree !== undefined) {
                                for (_g = 0, _h = Object.entries(includeSubtree); _g < _h.length; _g++) {
                                    _j = _h[_g], key = _j[0], value = _j[1];
                                    localVarQueryParameter[key] = value;
                                }
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all role assignments.  GET/HEAD /v3/role_assignments
         * @param {string} [groupId] Filters the response by a group ID.
         * @param {string} [roleId] Filters the response by a role ID.
         * @param {string} [userId] Filters the response by a user ID.
         * @param {string} [scopeDomainId] Filters the response by a domain ID.
         * @param {string} [scopeProjectId] Filters the response by a project ID.
         * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleAssignmentsHead: function (groupId_1, roleId_1, userId_1, scopeDomainId_1, scopeProjectId_1, scopeOSINHERITinheritedTo_1) {
            var args_1 = [];
            for (var _i = 6; _i < arguments.length; _i++) {
                args_1[_i - 6] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, roleId_1, userId_1, scopeDomainId_1, scopeProjectId_1, scopeOSINHERITinheritedTo_1], args_1, true), void 0, function (groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/role_assignments";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (groupId !== undefined) {
                                localVarQueryParameter['group.id'] = groupId;
                            }
                            if (roleId !== undefined) {
                                localVarQueryParameter['role.id'] = roleId;
                            }
                            if (userId !== undefined) {
                                localVarQueryParameter['user.id'] = userId;
                            }
                            if (scopeDomainId !== undefined) {
                                localVarQueryParameter['scope.domain.id'] = scopeDomainId;
                            }
                            if (scopeProjectId !== undefined) {
                                localVarQueryParameter['scope.project.id'] = scopeProjectId;
                            }
                            if (scopeOSINHERITinheritedTo !== undefined) {
                                localVarQueryParameter['scope.OS-INHERIT:inherited_to'] = scopeOSINHERITinheritedTo;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RoleAssignmentsApiAxiosParamCreator = RoleAssignmentsApiAxiosParamCreator;
/**
 * RoleAssignmentsApi - functional programming interface
 * @export
 */
var RoleAssignmentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RoleAssignmentsApiAxiosParamCreator)(configuration);
    return {
        /**
         * List all role assignments.  GET/HEAD /v3/role_assignments
         * @param {string} [groupId] Filters the response by a group ID.
         * @param {string} [roleId] Filters the response by a role ID.
         * @param {string} [userId] Filters the response by a user ID.
         * @param {string} [scopeDomainId] Filters the response by a domain ID.
         * @param {string} [scopeProjectId] Filters the response by a project ID.
         * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
         * @param {any | null} [effective] Returns the effective assignments, including any assignments gained by virtue of group membership.
         * @param {any | null} [includeNames] If set, then the names of any entities returned will be include as well as their IDs. Any value other than 0 (including no value) will be interpreted as true.
         * @param {any | null} [includeSubtree] If set, then relevant assignments in the project hierarchy below the project specified in the scope.project_id query parameter are also included in the response. Any value other than 0 (including no value) for include_subtree will be interpreted as true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleAssignmentsGet: function (groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, effective, includeNames, includeSubtree, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.roleAssignmentsGet(groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, effective, includeNames, includeSubtree, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoleAssignmentsApi.roleAssignmentsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all role assignments.  GET/HEAD /v3/role_assignments
         * @param {string} [groupId] Filters the response by a group ID.
         * @param {string} [roleId] Filters the response by a role ID.
         * @param {string} [userId] Filters the response by a user ID.
         * @param {string} [scopeDomainId] Filters the response by a domain ID.
         * @param {string} [scopeProjectId] Filters the response by a project ID.
         * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleAssignmentsHead: function (groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.roleAssignmentsHead(groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoleAssignmentsApi.roleAssignmentsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RoleAssignmentsApiFp = RoleAssignmentsApiFp;
/**
 * RoleAssignmentsApi - factory interface
 * @export
 */
var RoleAssignmentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RoleAssignmentsApiFp)(configuration);
    return {
        /**
         * List all role assignments.  GET/HEAD /v3/role_assignments
         * @param {string} [groupId] Filters the response by a group ID.
         * @param {string} [roleId] Filters the response by a role ID.
         * @param {string} [userId] Filters the response by a user ID.
         * @param {string} [scopeDomainId] Filters the response by a domain ID.
         * @param {string} [scopeProjectId] Filters the response by a project ID.
         * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
         * @param {any | null} [effective] Returns the effective assignments, including any assignments gained by virtue of group membership.
         * @param {any | null} [includeNames] If set, then the names of any entities returned will be include as well as their IDs. Any value other than 0 (including no value) will be interpreted as true.
         * @param {any | null} [includeSubtree] If set, then relevant assignments in the project hierarchy below the project specified in the scope.project_id query parameter are also included in the response. Any value other than 0 (including no value) for include_subtree will be interpreted as true.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleAssignmentsGet: function (groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, effective, includeNames, includeSubtree, options) {
            return localVarFp.roleAssignmentsGet(groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, effective, includeNames, includeSubtree, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all role assignments.  GET/HEAD /v3/role_assignments
         * @param {string} [groupId] Filters the response by a group ID.
         * @param {string} [roleId] Filters the response by a role ID.
         * @param {string} [userId] Filters the response by a user ID.
         * @param {string} [scopeDomainId] Filters the response by a domain ID.
         * @param {string} [scopeProjectId] Filters the response by a project ID.
         * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleAssignmentsHead: function (groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, options) {
            return localVarFp.roleAssignmentsHead(groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RoleAssignmentsApiFactory = RoleAssignmentsApiFactory;
/**
 * RoleAssignmentsApi - object-oriented interface
 * @export
 * @class RoleAssignmentsApi
 * @extends {BaseAPI}
 */
var RoleAssignmentsApi = /** @class */ (function (_super) {
    __extends(RoleAssignmentsApi, _super);
    function RoleAssignmentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {any | null} [effective] Returns the effective assignments, including any assignments gained by virtue of group membership.
     * @param {any | null} [includeNames] If set, then the names of any entities returned will be include as well as their IDs. Any value other than 0 (including no value) will be interpreted as true.
     * @param {any | null} [includeSubtree] If set, then relevant assignments in the project hierarchy below the project specified in the scope.project_id query parameter are also included in the response. Any value other than 0 (including no value) for include_subtree will be interpreted as true.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    RoleAssignmentsApi.prototype.roleAssignmentsGet = function (groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, effective, includeNames, includeSubtree, options) {
        var _this = this;
        return (0, exports.RoleAssignmentsApiFp)(this.configuration).roleAssignmentsGet(groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, effective, includeNames, includeSubtree, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all role assignments.  GET/HEAD /v3/role_assignments
     * @param {string} [groupId] Filters the response by a group ID.
     * @param {string} [roleId] Filters the response by a role ID.
     * @param {string} [userId] Filters the response by a user ID.
     * @param {string} [scopeDomainId] Filters the response by a domain ID.
     * @param {string} [scopeProjectId] Filters the response by a project ID.
     * @param {string} [scopeOSINHERITinheritedTo] Filters based on role assignments that are inherited. The only value of inherited_to that is currently supported is projects.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleAssignmentsApi
     */
    RoleAssignmentsApi.prototype.roleAssignmentsHead = function (groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, options) {
        var _this = this;
        return (0, exports.RoleAssignmentsApiFp)(this.configuration).roleAssignmentsHead(groupId, roleId, userId, scopeDomainId, scopeProjectId, scopeOSINHERITinheritedTo, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RoleAssignmentsApi;
}(base_1.BaseAPI));
exports.RoleAssignmentsApi = RoleAssignmentsApi;
/**
 * RoleInferencesApi - axios parameter creator
 * @export
 */
var RoleInferencesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * List role inference rules.  GET/HEAD /v3/role_inferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleInferencesGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/role_inferences";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List role inference rules.  GET/HEAD /v3/role_inferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleInferencesHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/role_inferences";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RoleInferencesApiAxiosParamCreator = RoleInferencesApiAxiosParamCreator;
/**
 * RoleInferencesApi - functional programming interface
 * @export
 */
var RoleInferencesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RoleInferencesApiAxiosParamCreator)(configuration);
    return {
        /**
         * List role inference rules.  GET/HEAD /v3/role_inferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleInferencesGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.roleInferencesGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoleInferencesApi.roleInferencesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List role inference rules.  GET/HEAD /v3/role_inferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleInferencesHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.roleInferencesHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RoleInferencesApi.roleInferencesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RoleInferencesApiFp = RoleInferencesApiFp;
/**
 * RoleInferencesApi - factory interface
 * @export
 */
var RoleInferencesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RoleInferencesApiFp)(configuration);
    return {
        /**
         * List role inference rules.  GET/HEAD /v3/role_inferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleInferencesGet: function (options) {
            return localVarFp.roleInferencesGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List role inference rules.  GET/HEAD /v3/role_inferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roleInferencesHead: function (options) {
            return localVarFp.roleInferencesHead(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RoleInferencesApiFactory = RoleInferencesApiFactory;
/**
 * RoleInferencesApi - object-oriented interface
 * @export
 * @class RoleInferencesApi
 * @extends {BaseAPI}
 */
var RoleInferencesApi = /** @class */ (function (_super) {
    __extends(RoleInferencesApi, _super);
    function RoleInferencesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInferencesApi
     */
    RoleInferencesApi.prototype.roleInferencesGet = function (options) {
        var _this = this;
        return (0, exports.RoleInferencesApiFp)(this.configuration).roleInferencesGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List role inference rules.  GET/HEAD /v3/role_inferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleInferencesApi
     */
    RoleInferencesApi.prototype.roleInferencesHead = function (options) {
        var _this = this;
        return (0, exports.RoleInferencesApiFp)(this.configuration).roleInferencesHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RoleInferencesApi;
}(base_1.BaseAPI));
exports.RoleInferencesApi = RoleInferencesApi;
/**
 * RolesApi - axios parameter creator
 * @export
 */
var RolesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesGet: function (domainId_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1], args_1, true), void 0, function (domainId, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesGet', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesGet', 'groupId', groupId);
                            localVarPath = "/v3/domains/{domain_id}/groups/{group_id}/roles"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesHead: function (domainId_1, groupId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1], args_1, true), void 0, function (domainId, groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesHead', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesHead', 'groupId', groupId);
                            localVarPath = "/v3/domains/{domain_id}/groups/{group_id}/roles"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke a role from a group on a domain.  DELETE /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdDelete: function (domainId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1, roleId_1], args_1, true), void 0, function (domainId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdDelete', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdDelete', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdDelete', 'roleId', roleId);
                            localVarPath = "/v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdGet: function (domainId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1, roleId_1], args_1, true), void 0, function (domainId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdGet', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdGet', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdHead: function (domainId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1, roleId_1], args_1, true), void 0, function (domainId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdHead', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdHead', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Grant a role to a group on a domain.  PUT /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdPut: function (domainId_1, groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, groupId_1, roleId_1], args_1, true), void 0, function (domainId, groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdPut', 'domainId', domainId);
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdPut', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdGroupsGroupIdRolesRoleIdPut', 'roleId', roleId);
                            localVarPath = "/v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesGet: function (domainId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1], args_1, true), void 0, function (domainId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesGet', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesGet', 'userId', userId);
                            localVarPath = "/v3/domains/{domain_id}/users/{user_id}/roles"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesHead: function (domainId_1, userId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1], args_1, true), void 0, function (domainId, userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesHead', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesHead', 'userId', userId);
                            localVarPath = "/v3/domains/{domain_id}/users/{user_id}/roles"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke a role from user on a domain.  DELETE /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdDelete: function (domainId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1, roleId_1], args_1, true), void 0, function (domainId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdDelete', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdDelete', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdDelete', 'roleId', roleId);
                            localVarPath = "/v3/domains/{domain_id}/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdGet: function (domainId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1, roleId_1], args_1, true), void 0, function (domainId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdGet', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdGet', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/domains/{domain_id}/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdHead: function (domainId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1, roleId_1], args_1, true), void 0, function (domainId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdHead', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdHead', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/domains/{domain_id}/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a role to a user on a domain.  PUT /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdPut: function (domainId_1, userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, userId_1, roleId_1], args_1, true), void 0, function (domainId, userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'domainId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdPut', 'domainId', domainId);
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdPut', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('domainsDomainIdUsersUserIdRolesRoleIdPut', 'roleId', roleId);
                            localVarPath = "/v3/domains/{domain_id}/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("domain_id", "}"), encodeURIComponent(String(domainId)))
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGet: function (domainId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1], args_1, true), void 0, function (domainId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (domainId !== undefined) {
                                localVarQueryParameter['domain_id'] = domainId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create role.  POST /v3/roles
         * @param {Role} [role]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPost: function (role_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([role_1], args_1, true), void 0, function (role, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/roles";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(role, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesGet: function (priorRoleId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([priorRoleId_1], args_1, true), void 0, function (priorRoleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'priorRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesGet', 'priorRoleId', priorRoleId);
                            localVarPath = "/v3/roles/{prior_role_id}/implies"
                                .replace("{".concat("prior_role_id", "}"), encodeURIComponent(String(priorRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesHead: function (priorRoleId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([priorRoleId_1], args_1, true), void 0, function (priorRoleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'priorRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesHead', 'priorRoleId', priorRoleId);
                            localVarPath = "/v3/roles/{prior_role_id}/implies"
                                .replace("{".concat("prior_role_id", "}"), encodeURIComponent(String(priorRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete implied role.  DELETE /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdDelete: function (priorRoleId_1, impliedRoleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([priorRoleId_1, impliedRoleId_1], args_1, true), void 0, function (priorRoleId, impliedRoleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'priorRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesImpliedRoleIdDelete', 'priorRoleId', priorRoleId);
                            // verify required parameter 'impliedRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesImpliedRoleIdDelete', 'impliedRoleId', impliedRoleId);
                            localVarPath = "/v3/roles/{prior_role_id}/implies/{implied_role_id}"
                                .replace("{".concat("prior_role_id", "}"), encodeURIComponent(String(priorRoleId)))
                                .replace("{".concat("implied_role_id", "}"), encodeURIComponent(String(impliedRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdGet: function (priorRoleId_1, impliedRoleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([priorRoleId_1, impliedRoleId_1], args_1, true), void 0, function (priorRoleId, impliedRoleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'priorRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesImpliedRoleIdGet', 'priorRoleId', priorRoleId);
                            // verify required parameter 'impliedRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesImpliedRoleIdGet', 'impliedRoleId', impliedRoleId);
                            localVarPath = "/v3/roles/{prior_role_id}/implies/{implied_role_id}"
                                .replace("{".concat("prior_role_id", "}"), encodeURIComponent(String(priorRoleId)))
                                .replace("{".concat("implied_role_id", "}"), encodeURIComponent(String(impliedRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdHead: function (priorRoleId_1, impliedRoleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([priorRoleId_1, impliedRoleId_1], args_1, true), void 0, function (priorRoleId, impliedRoleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'priorRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesImpliedRoleIdHead', 'priorRoleId', priorRoleId);
                            // verify required parameter 'impliedRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesImpliedRoleIdHead', 'impliedRoleId', impliedRoleId);
                            localVarPath = "/v3/roles/{prior_role_id}/implies/{implied_role_id}"
                                .replace("{".concat("prior_role_id", "}"), encodeURIComponent(String(priorRoleId)))
                                .replace("{".concat("implied_role_id", "}"), encodeURIComponent(String(impliedRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create implied role.  PUT /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdPut: function (priorRoleId_1, impliedRoleId_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([priorRoleId_1, impliedRoleId_1, body_1], args_1, true), void 0, function (priorRoleId, impliedRoleId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'priorRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesImpliedRoleIdPut', 'priorRoleId', priorRoleId);
                            // verify required parameter 'impliedRoleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesPriorRoleIdImpliesImpliedRoleIdPut', 'impliedRoleId', impliedRoleId);
                            localVarPath = "/v3/roles/{prior_role_id}/implies/{implied_role_id}"
                                .replace("{".concat("prior_role_id", "}"), encodeURIComponent(String(priorRoleId)))
                                .replace("{".concat("implied_role_id", "}"), encodeURIComponent(String(impliedRoleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete role.  DELETE /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdDelete: function (roleId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([roleId_1], args_1, true), void 0, function (roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesRoleIdDelete', 'roleId', roleId);
                            localVarPath = "/v3/roles/{role_id}"
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdGet: function (roleId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([roleId_1], args_1, true), void 0, function (roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/roles/{role_id}"
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdHead: function (roleId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([roleId_1], args_1, true), void 0, function (roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/roles/{role_id}"
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update role.  PATCH /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {Role} [role]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdPatch: function (roleId_1, role_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([roleId_1, role_1], args_1, true), void 0, function (roleId, role, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('rolesRoleIdPatch', 'roleId', roleId);
                            localVarPath = "/v3/roles/{role_id}"
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(role, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.RolesApiAxiosParamCreator = RolesApiAxiosParamCreator;
/**
 * RolesApi - functional programming interface
 * @export
 */
var RolesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.RolesApiAxiosParamCreator)(configuration);
    return {
        /**
         * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesGet: function (domainId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdGroupsGroupIdRolesGet(domainId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdGroupsGroupIdRolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesHead: function (domainId, groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdGroupsGroupIdRolesHead(domainId, groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdGroupsGroupIdRolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke a role from a group on a domain.  DELETE /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdDelete: function (domainId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdGroupsGroupIdRolesRoleIdDelete(domainId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdGroupsGroupIdRolesRoleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdGet: function (domainId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdGroupsGroupIdRolesRoleIdGet(domainId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdGroupsGroupIdRolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdHead: function (domainId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdGroupsGroupIdRolesRoleIdHead(domainId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdGroupsGroupIdRolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Grant a role to a group on a domain.  PUT /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdPut: function (domainId, groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdGroupsGroupIdRolesRoleIdPut(domainId, groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdGroupsGroupIdRolesRoleIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesGet: function (domainId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdUsersUserIdRolesGet(domainId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdUsersUserIdRolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesHead: function (domainId, userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdUsersUserIdRolesHead(domainId, userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdUsersUserIdRolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke a role from user on a domain.  DELETE /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdDelete: function (domainId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdUsersUserIdRolesRoleIdDelete(domainId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdUsersUserIdRolesRoleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdGet: function (domainId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdUsersUserIdRolesRoleIdGet(domainId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdUsersUserIdRolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdHead: function (domainId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdUsersUserIdRolesRoleIdHead(domainId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdUsersUserIdRolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a role to a user on a domain.  PUT /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdPut: function (domainId, userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.domainsDomainIdUsersUserIdRolesRoleIdPut(domainId, userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.domainsDomainIdUsersUserIdRolesRoleIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGet: function (domainId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesGet(domainId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create role.  POST /v3/roles
         * @param {Role} [role]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPost: function (role, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesPost(role, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesGet: function (priorRoleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesPriorRoleIdImpliesGet(priorRoleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesPriorRoleIdImpliesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesHead: function (priorRoleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesPriorRoleIdImpliesHead(priorRoleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesPriorRoleIdImpliesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete implied role.  DELETE /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdDelete: function (priorRoleId, impliedRoleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesPriorRoleIdImpliesImpliedRoleIdDelete(priorRoleId, impliedRoleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesPriorRoleIdImpliesImpliedRoleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdGet: function (priorRoleId, impliedRoleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesPriorRoleIdImpliesImpliedRoleIdGet(priorRoleId, impliedRoleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesPriorRoleIdImpliesImpliedRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdHead: function (priorRoleId, impliedRoleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesPriorRoleIdImpliesImpliedRoleIdHead(priorRoleId, impliedRoleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesPriorRoleIdImpliesImpliedRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create implied role.  PUT /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdPut: function (priorRoleId, impliedRoleId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesPriorRoleIdImpliesImpliedRoleIdPut(priorRoleId, impliedRoleId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesPriorRoleIdImpliesImpliedRoleIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete role.  DELETE /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdDelete: function (roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesRoleIdDelete(roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesRoleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdGet: function (roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesRoleIdGet(roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdHead: function (roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesRoleIdHead(roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update role.  PATCH /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {Role} [role]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdPatch: function (roleId, role, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.rolesRoleIdPatch(roleId, role, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['RolesApi.rolesRoleIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.RolesApiFp = RolesApiFp;
/**
 * RolesApi - factory interface
 * @export
 */
var RolesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.RolesApiFp)(configuration);
    return {
        /**
         * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesGet: function (domainId, groupId, options) {
            return localVarFp.domainsDomainIdGroupsGroupIdRolesGet(domainId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesHead: function (domainId, groupId, options) {
            return localVarFp.domainsDomainIdGroupsGroupIdRolesHead(domainId, groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke a role from a group on a domain.  DELETE /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdDelete: function (domainId, groupId, roleId, options) {
            return localVarFp.domainsDomainIdGroupsGroupIdRolesRoleIdDelete(domainId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdGet: function (domainId, groupId, roleId, options) {
            return localVarFp.domainsDomainIdGroupsGroupIdRolesRoleIdGet(domainId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdHead: function (domainId, groupId, roleId, options) {
            return localVarFp.domainsDomainIdGroupsGroupIdRolesRoleIdHead(domainId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Grant a role to a group on a domain.  PUT /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdGroupsGroupIdRolesRoleIdPut: function (domainId, groupId, roleId, options) {
            return localVarFp.domainsDomainIdGroupsGroupIdRolesRoleIdPut(domainId, groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesGet: function (domainId, userId, options) {
            return localVarFp.domainsDomainIdUsersUserIdRolesGet(domainId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesHead: function (domainId, userId, options) {
            return localVarFp.domainsDomainIdUsersUserIdRolesHead(domainId, userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke a role from user on a domain.  DELETE /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdDelete: function (domainId, userId, roleId, options) {
            return localVarFp.domainsDomainIdUsersUserIdRolesRoleIdDelete(domainId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdGet: function (domainId, userId, roleId, options) {
            return localVarFp.domainsDomainIdUsersUserIdRolesRoleIdGet(domainId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdHead: function (domainId, userId, roleId, options) {
            return localVarFp.domainsDomainIdUsersUserIdRolesRoleIdHead(domainId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a role to a user on a domain.  PUT /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
         * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        domainsDomainIdUsersUserIdRolesRoleIdPut: function (domainId, userId, roleId, options) {
            return localVarFp.domainsDomainIdUsersUserIdRolesRoleIdPut(domainId, userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesGet: function (domainId, options) {
            return localVarFp.rolesGet(domainId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesHead: function (options) {
            return localVarFp.rolesHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create role.  POST /v3/roles
         * @param {Role} [role]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPost: function (role, options) {
            return localVarFp.rolesPost(role, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesGet: function (priorRoleId, options) {
            return localVarFp.rolesPriorRoleIdImpliesGet(priorRoleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesHead: function (priorRoleId, options) {
            return localVarFp.rolesPriorRoleIdImpliesHead(priorRoleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete implied role.  DELETE /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdDelete: function (priorRoleId, impliedRoleId, options) {
            return localVarFp.rolesPriorRoleIdImpliesImpliedRoleIdDelete(priorRoleId, impliedRoleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdGet: function (priorRoleId, impliedRoleId, options) {
            return localVarFp.rolesPriorRoleIdImpliesImpliedRoleIdGet(priorRoleId, impliedRoleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdHead: function (priorRoleId, impliedRoleId, options) {
            return localVarFp.rolesPriorRoleIdImpliesImpliedRoleIdHead(priorRoleId, impliedRoleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create implied role.  PUT /v3/roles/{prior_role_id}/implies/{implied_role_id}
         * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesPriorRoleIdImpliesImpliedRoleIdPut: function (priorRoleId, impliedRoleId, body, options) {
            return localVarFp.rolesPriorRoleIdImpliesImpliedRoleIdPut(priorRoleId, impliedRoleId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete role.  DELETE /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdDelete: function (roleId, options) {
            return localVarFp.rolesRoleIdDelete(roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdGet: function (roleId, options) {
            return localVarFp.rolesRoleIdGet(roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdHead: function (roleId, options) {
            return localVarFp.rolesRoleIdHead(roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update role.  PATCH /v3/roles/{role_id}
         * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
         * @param {Role} [role]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rolesRoleIdPatch: function (roleId, role, options) {
            return localVarFp.rolesRoleIdPatch(roleId, role, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.RolesApiFactory = RolesApiFactory;
/**
 * RolesApi - object-oriented interface
 * @export
 * @class RolesApi
 * @extends {BaseAPI}
 */
var RolesApi = /** @class */ (function (_super) {
    __extends(RolesApi, _super);
    function RolesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdGroupsGroupIdRolesGet = function (domainId, groupId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdGroupsGroupIdRolesGet(domainId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all domain grats for a specific group.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdGroupsGroupIdRolesHead = function (domainId, groupId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdGroupsGroupIdRolesHead(domainId, groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke a role from a group on a domain.  DELETE /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdGroupsGroupIdRolesRoleIdDelete = function (domainId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdGroupsGroupIdRolesRoleIdDelete(domainId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdGroupsGroupIdRolesRoleIdGet = function (domainId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdGroupsGroupIdRolesRoleIdGet(domainId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a group has a specific role on a domain.  GET/HEAD /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdGroupsGroupIdRolesRoleIdHead = function (domainId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdGroupsGroupIdRolesRoleIdHead(domainId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Grant a role to a group on a domain.  PUT /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} groupId group_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdGroupsGroupIdRolesRoleIdPut = function (domainId, groupId, roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdGroupsGroupIdRolesRoleIdPut(domainId, groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdUsersUserIdRolesGet = function (domainId, userId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdUsersUserIdRolesGet(domainId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get user grant.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdUsersUserIdRolesHead = function (domainId, userId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdUsersUserIdRolesHead(domainId, userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke a role from user on a domain.  DELETE /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdUsersUserIdRolesRoleIdDelete = function (domainId, userId, roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdUsersUserIdRolesRoleIdDelete(domainId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdUsersUserIdRolesRoleIdGet = function (domainId, userId, roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdUsersUserIdRolesRoleIdGet(domainId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a user has a specific role on the domain.  GET/HEAD /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdUsersUserIdRolesRoleIdHead = function (domainId, userId, roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdUsersUserIdRolesRoleIdHead(domainId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a role to a user on a domain.  PUT /v3/domains/{domain_id}/users/{user_id}/roles/{role_id}
     * @param {string} domainId domain_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} userId user_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/domains/{domain_id}/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.domainsDomainIdUsersUserIdRolesRoleIdPut = function (domainId, userId, roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).domainsDomainIdUsersUserIdRolesRoleIdPut(domainId, userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesGet = function (domainId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesGet(domainId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesHead = function (options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create role.  POST /v3/roles
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesPost = function (role, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesPost(role, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesPriorRoleIdImpliesGet = function (priorRoleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesPriorRoleIdImpliesGet(priorRoleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List Implied Roles.  GET/HEAD /v3/roles/{prior_role_id}/implies
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesPriorRoleIdImpliesHead = function (priorRoleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesPriorRoleIdImpliesHead(priorRoleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete implied role.  DELETE /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesPriorRoleIdImpliesImpliedRoleIdDelete = function (priorRoleId, impliedRoleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesPriorRoleIdImpliesImpliedRoleIdDelete(priorRoleId, impliedRoleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesPriorRoleIdImpliesImpliedRoleIdGet = function (priorRoleId, impliedRoleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesPriorRoleIdImpliesImpliedRoleIdGet(priorRoleId, impliedRoleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get implied role.  GET/HEAD /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesPriorRoleIdImpliesImpliedRoleIdHead = function (priorRoleId, impliedRoleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesPriorRoleIdImpliesImpliedRoleIdHead(priorRoleId, impliedRoleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create implied role.  PUT /v3/roles/{prior_role_id}/implies/{implied_role_id}
     * @param {string} priorRoleId prior_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {string} impliedRoleId implied_role_id parameter for /v3/roles/{prior_role_id}/implies/{implied_role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesPriorRoleIdImpliesImpliedRoleIdPut = function (priorRoleId, impliedRoleId, body, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesPriorRoleIdImpliesImpliedRoleIdPut(priorRoleId, impliedRoleId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete role.  DELETE /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesRoleIdDelete = function (roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesRoleIdDelete(roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesRoleIdGet = function (roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesRoleIdGet(roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get role or list roles.  GET/HEAD /v3/roles GET/HEAD /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesRoleIdHead = function (roleId, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesRoleIdHead(roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update role.  PATCH /v3/roles/{role_id}
     * @param {string} roleId role_id parameter for /v3/roles/{role_id} API
     * @param {Role} [role]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolesApi
     */
    RolesApi.prototype.rolesRoleIdPatch = function (roleId, role, options) {
        var _this = this;
        return (0, exports.RolesApiFp)(this.configuration).rolesRoleIdPatch(roleId, role, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return RolesApi;
}(base_1.BaseAPI));
exports.RolesApi = RolesApi;
/**
 * S3tokensApi - axios parameter creator
 * @export
 */
var S3tokensApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/s3tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/s3tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/s3tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/s3tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Authenticate s3token.  POST /v3/s3tokens
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensPost: function (body_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([body_1], args_1, true), void 0, function (body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/s3tokens";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.S3tokensApiAxiosParamCreator = S3tokensApiAxiosParamCreator;
/**
 * S3tokensApi - functional programming interface
 * @export
 */
var S3tokensApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.S3tokensApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/s3tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.s3tokensGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['S3tokensApi.s3tokensGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/s3tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.s3tokensHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['S3tokensApi.s3tokensHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Authenticate s3token.  POST /v3/s3tokens
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensPost: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.s3tokensPost(body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['S3tokensApi.s3tokensPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.S3tokensApiFp = S3tokensApiFp;
/**
 * S3tokensApi - factory interface
 * @export
 */
var S3tokensApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.S3tokensApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/s3tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensGet: function (options) {
            return localVarFp.s3tokensGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/s3tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensHead: function (options) {
            return localVarFp.s3tokensHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Authenticate s3token.  POST /v3/s3tokens
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        s3tokensPost: function (body, options) {
            return localVarFp.s3tokensPost(body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.S3tokensApiFactory = S3tokensApiFactory;
/**
 * S3tokensApi - object-oriented interface
 * @export
 * @class S3tokensApi
 * @extends {BaseAPI}
 */
var S3tokensApi = /** @class */ (function (_super) {
    __extends(S3tokensApi, _super);
    function S3tokensApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3tokensApi
     */
    S3tokensApi.prototype.s3tokensGet = function (options) {
        var _this = this;
        return (0, exports.S3tokensApiFp)(this.configuration).s3tokensGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/s3tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3tokensApi
     */
    S3tokensApi.prototype.s3tokensHead = function (options) {
        var _this = this;
        return (0, exports.S3tokensApiFp)(this.configuration).s3tokensHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Authenticate s3token.  POST /v3/s3tokens
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof S3tokensApi
     */
    S3tokensApi.prototype.s3tokensPost = function (body, options) {
        var _this = this;
        return (0, exports.S3tokensApiFp)(this.configuration).s3tokensPost(body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return S3tokensApi;
}(base_1.BaseAPI));
exports.S3tokensApi = S3tokensApi;
/**
 * ServicesApi - axios parameter creator
 * @export
 */
var ServicesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3/services
         * @param {string} [service] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGet: function (service_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([service_1], args_1, true), void 0, function (service, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/services";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (service !== undefined) {
                                localVarQueryParameter['service'] = service;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/services";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/services
         * @param {Service} [service]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPost: function (service_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([service_1], args_1, true), void 0, function (service, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/services";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(service, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdDelete: function (serviceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([serviceId_1], args_1, true), void 0, function (serviceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('servicesServiceIdDelete', 'serviceId', serviceId);
                            localVarPath = "/v3/services/{service_id}"
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdGet: function (serviceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([serviceId_1], args_1, true), void 0, function (serviceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('servicesServiceIdGet', 'serviceId', serviceId);
                            localVarPath = "/v3/services/{service_id}"
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdHead: function (serviceId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([serviceId_1], args_1, true), void 0, function (serviceId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('servicesServiceIdHead', 'serviceId', serviceId);
                            localVarPath = "/v3/services/{service_id}"
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {Service} [service]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdPatch: function (serviceId_1, service_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([serviceId_1, service_1], args_1, true), void 0, function (serviceId, service, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'serviceId' is not null or undefined
                            (0, common_1.assertParamExists)('servicesServiceIdPatch', 'serviceId', serviceId);
                            localVarPath = "/v3/services/{service_id}"
                                .replace("{".concat("service_id", "}"), encodeURIComponent(String(serviceId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(service, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.ServicesApiAxiosParamCreator = ServicesApiAxiosParamCreator;
/**
 * ServicesApi - functional programming interface
 * @export
 */
var ServicesApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ServicesApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3/services
         * @param {string} [service] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGet: function (service, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.servicesGet(service, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServicesApi.servicesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.servicesHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServicesApi.servicesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/services
         * @param {Service} [service]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPost: function (service, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.servicesPost(service, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServicesApi.servicesPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * DELETE operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdDelete: function (serviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.servicesServiceIdDelete(serviceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServicesApi.servicesServiceIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdGet: function (serviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.servicesServiceIdGet(serviceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServicesApi.servicesServiceIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdHead: function (serviceId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.servicesServiceIdHead(serviceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServicesApi.servicesServiceIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * PATCH operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {Service} [service]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdPatch: function (serviceId, service, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.servicesServiceIdPatch(serviceId, service, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['ServicesApi.servicesServiceIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.ServicesApiFp = ServicesApiFp;
/**
 * ServicesApi - factory interface
 * @export
 */
var ServicesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ServicesApiFp)(configuration);
    return {
        /**
         * GET operation on /v3/services
         * @param {string} [service] Filters the response by a domain ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGet: function (service, options) {
            return localVarFp.servicesGet(service, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesHead: function (options) {
            return localVarFp.servicesHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/services
         * @param {Service} [service]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPost: function (service, options) {
            return localVarFp.servicesPost(service, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * DELETE operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdDelete: function (serviceId, options) {
            return localVarFp.servicesServiceIdDelete(serviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdGet: function (serviceId, options) {
            return localVarFp.servicesServiceIdGet(serviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdHead: function (serviceId, options) {
            return localVarFp.servicesServiceIdHead(serviceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * PATCH operation on /v3/services/{service_id}
         * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
         * @param {Service} [service]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesServiceIdPatch: function (serviceId, service, options) {
            return localVarFp.servicesServiceIdPatch(serviceId, service, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.ServicesApiFactory = ServicesApiFactory;
/**
 * ServicesApi - object-oriented interface
 * @export
 * @class ServicesApi
 * @extends {BaseAPI}
 */
var ServicesApi = /** @class */ (function (_super) {
    __extends(ServicesApi, _super);
    function ServicesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3/services
     * @param {string} [service] Filters the response by a domain ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.servicesGet = function (service, options) {
        var _this = this;
        return (0, exports.ServicesApiFp)(this.configuration).servicesGet(service, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.servicesHead = function (options) {
        var _this = this;
        return (0, exports.ServicesApiFp)(this.configuration).servicesHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/services
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.servicesPost = function (service, options) {
        var _this = this;
        return (0, exports.ServicesApiFp)(this.configuration).servicesPost(service, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * DELETE operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.servicesServiceIdDelete = function (serviceId, options) {
        var _this = this;
        return (0, exports.ServicesApiFp)(this.configuration).servicesServiceIdDelete(serviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.servicesServiceIdGet = function (serviceId, options) {
        var _this = this;
        return (0, exports.ServicesApiFp)(this.configuration).servicesServiceIdGet(serviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.servicesServiceIdHead = function (serviceId, options) {
        var _this = this;
        return (0, exports.ServicesApiFp)(this.configuration).servicesServiceIdHead(serviceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * PATCH operation on /v3/services/{service_id}
     * @param {string} serviceId service_id parameter for /v3/services/{service_id} API
     * @param {Service} [service]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesApi
     */
    ServicesApi.prototype.servicesServiceIdPatch = function (serviceId, service, options) {
        var _this = this;
        return (0, exports.ServicesApiFp)(this.configuration).servicesServiceIdPatch(serviceId, service, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ServicesApi;
}(base_1.BaseAPI));
exports.ServicesApi = ServicesApi;
/**
 * SystemApi - axios parameter creator
 * @export
 */
var SystemApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesGet: function (groupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1], args_1, true), void 0, function (groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesGet', 'groupId', groupId);
                            localVarPath = "/v3/system/groups/{group_id}/roles"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesHead: function (groupId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1], args_1, true), void 0, function (groupId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesHead', 'groupId', groupId);
                            localVarPath = "/v3/system/groups/{group_id}/roles"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke a role from the group on the system.  DELETE /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdDelete: function (groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, roleId_1], args_1, true), void 0, function (groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesRoleIdDelete', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesRoleIdDelete', 'roleId', roleId);
                            localVarPath = "/v3/system/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdGet: function (groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, roleId_1], args_1, true), void 0, function (groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesRoleIdGet', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/system/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdHead: function (groupId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, roleId_1], args_1, true), void 0, function (groupId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesRoleIdHead', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/system/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Grant a role to a group on the system.  PUT /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdPut: function (groupId_1, roleId_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([groupId_1, roleId_1, body_1], args_1, true), void 0, function (groupId, roleId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'groupId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesRoleIdPut', 'groupId', groupId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('systemGroupsGroupIdRolesRoleIdPut', 'roleId', roleId);
                            localVarPath = "/v3/system/groups/{group_id}/roles/{role_id}"
                                .replace("{".concat("group_id", "}"), encodeURIComponent(String(groupId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesGet: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesGet', 'userId', userId);
                            localVarPath = "/v3/system/users/{user_id}/roles"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesHead: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesHead', 'userId', userId);
                            localVarPath = "/v3/system/users/{user_id}/roles"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Revoke a role from user on the system.  DELETE /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdDelete: function (userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, roleId_1], args_1, true), void 0, function (userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesRoleIdDelete', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesRoleIdDelete', 'roleId', roleId);
                            localVarPath = "/v3/system/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdGet: function (userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, roleId_1], args_1, true), void 0, function (userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesRoleIdGet', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/system/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdHead: function (userId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, roleId_1], args_1, true), void 0, function (userId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesRoleIdHead', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/system/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Grant a role to a user on the system.  PUT /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdPut: function (userId_1, roleId_1, body_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, roleId_1, body_1], args_1, true), void 0, function (userId, roleId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesRoleIdPut', 'userId', userId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('systemUsersUserIdRolesRoleIdPut', 'roleId', roleId);
                            localVarPath = "/v3/system/users/{user_id}/roles/{role_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.SystemApiAxiosParamCreator = SystemApiAxiosParamCreator;
/**
 * SystemApi - functional programming interface
 * @export
 */
var SystemApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.SystemApiAxiosParamCreator)(configuration);
    return {
        /**
         * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesGet: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemGroupsGroupIdRolesGet(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemGroupsGroupIdRolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesHead: function (groupId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemGroupsGroupIdRolesHead(groupId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemGroupsGroupIdRolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke a role from the group on the system.  DELETE /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdDelete: function (groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemGroupsGroupIdRolesRoleIdDelete(groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemGroupsGroupIdRolesRoleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdGet: function (groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemGroupsGroupIdRolesRoleIdGet(groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemGroupsGroupIdRolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdHead: function (groupId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemGroupsGroupIdRolesRoleIdHead(groupId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemGroupsGroupIdRolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Grant a role to a group on the system.  PUT /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdPut: function (groupId, roleId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemGroupsGroupIdRolesRoleIdPut(groupId, roleId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemGroupsGroupIdRolesRoleIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesGet: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemUsersUserIdRolesGet(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemUsersUserIdRolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesHead: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemUsersUserIdRolesHead(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemUsersUserIdRolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Revoke a role from user on the system.  DELETE /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdDelete: function (userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemUsersUserIdRolesRoleIdDelete(userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemUsersUserIdRolesRoleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdGet: function (userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemUsersUserIdRolesRoleIdGet(userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemUsersUserIdRolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdHead: function (userId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemUsersUserIdRolesRoleIdHead(userId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemUsersUserIdRolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Grant a role to a user on the system.  PUT /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdPut: function (userId, roleId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemUsersUserIdRolesRoleIdPut(userId, roleId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['SystemApi.systemUsersUserIdRolesRoleIdPut']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.SystemApiFp = SystemApiFp;
/**
 * SystemApi - factory interface
 * @export
 */
var SystemApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.SystemApiFp)(configuration);
    return {
        /**
         * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesGet: function (groupId, options) {
            return localVarFp.systemGroupsGroupIdRolesGet(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesHead: function (groupId, options) {
            return localVarFp.systemGroupsGroupIdRolesHead(groupId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke a role from the group on the system.  DELETE /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdDelete: function (groupId, roleId, options) {
            return localVarFp.systemGroupsGroupIdRolesRoleIdDelete(groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdGet: function (groupId, roleId, options) {
            return localVarFp.systemGroupsGroupIdRolesRoleIdGet(groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdHead: function (groupId, roleId, options) {
            return localVarFp.systemGroupsGroupIdRolesRoleIdHead(groupId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Grant a role to a group on the system.  PUT /system/groups/{group_id}/roles/{role_id}
         * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemGroupsGroupIdRolesRoleIdPut: function (groupId, roleId, body, options) {
            return localVarFp.systemGroupsGroupIdRolesRoleIdPut(groupId, roleId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesGet: function (userId, options) {
            return localVarFp.systemUsersUserIdRolesGet(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesHead: function (userId, options) {
            return localVarFp.systemUsersUserIdRolesHead(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Revoke a role from user on the system.  DELETE /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdDelete: function (userId, roleId, options) {
            return localVarFp.systemUsersUserIdRolesRoleIdDelete(userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdGet: function (userId, roleId, options) {
            return localVarFp.systemUsersUserIdRolesRoleIdGet(userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdHead: function (userId, roleId, options) {
            return localVarFp.systemUsersUserIdRolesRoleIdHead(userId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Grant a role to a user on the system.  PUT /system/users/{user_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemUsersUserIdRolesRoleIdPut: function (userId, roleId, body, options) {
            return localVarFp.systemUsersUserIdRolesRoleIdPut(userId, roleId, body, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.SystemApiFactory = SystemApiFactory;
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
var SystemApi = /** @class */ (function (_super) {
    __extends(SystemApi, _super);
    function SystemApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemGroupsGroupIdRolesGet = function (groupId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemGroupsGroupIdRolesGet(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all system grants for a specific group.  GET/HEAD /system/groups/{group_id}/roles
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemGroupsGroupIdRolesHead = function (groupId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemGroupsGroupIdRolesHead(groupId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke a role from the group on the system.  DELETE /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemGroupsGroupIdRolesRoleIdDelete = function (groupId, roleId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemGroupsGroupIdRolesRoleIdDelete(groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemGroupsGroupIdRolesRoleIdGet = function (groupId, roleId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemGroupsGroupIdRolesRoleIdGet(groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a group has a specific role on the system.  GET/HEAD /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemGroupsGroupIdRolesRoleIdHead = function (groupId, roleId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemGroupsGroupIdRolesRoleIdHead(groupId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Grant a role to a group on the system.  PUT /system/groups/{group_id}/roles/{role_id}
     * @param {string} groupId group_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/groups/{group_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemGroupsGroupIdRolesRoleIdPut = function (groupId, roleId, body, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemGroupsGroupIdRolesRoleIdPut(groupId, roleId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemUsersUserIdRolesGet = function (userId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemUsersUserIdRolesGet(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List all system grants for a specific user.  GET/HEAD /system/users/{user_id}/roles
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemUsersUserIdRolesHead = function (userId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemUsersUserIdRolesHead(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Revoke a role from user on the system.  DELETE /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemUsersUserIdRolesRoleIdDelete = function (userId, roleId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemUsersUserIdRolesRoleIdDelete(userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemUsersUserIdRolesRoleIdGet = function (userId, roleId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemUsersUserIdRolesRoleIdGet(userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check if a user has a specific role on the system.  GET/HEAD /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemUsersUserIdRolesRoleIdHead = function (userId, roleId, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemUsersUserIdRolesRoleIdHead(userId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Grant a role to a user on the system.  PUT /system/users/{user_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/system/users/{user_id}/roles/{role_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemUsersUserIdRolesRoleIdPut = function (userId, roleId, body, options) {
        var _this = this;
        return (0, exports.SystemApiFp)(this.configuration).systemUsersUserIdRolesRoleIdPut(userId, roleId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemApi;
}(base_1.BaseAPI));
exports.SystemApi = SystemApi;
/**
 * UsersApi - axios parameter creator
 * @export
 */
var UsersApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
         * @param {string} [id] Filter for Identity Providers’ ID attribute
         * @param {string} [name] Filters the response by a resource name.
         * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
         * @param {string} [protocolId] Filters the response by a protocol ID.
         * @param {string} [uniqueId] Filters the response by a unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: function (domainId_1, enabled_1, id_1, name_1, passwordExpiresAt_1, protocolId_1, uniqueId_1) {
            var args_1 = [];
            for (var _i = 7; _i < arguments.length; _i++) {
                args_1[_i - 7] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([domainId_1, enabled_1, id_1, name_1, passwordExpiresAt_1, protocolId_1, uniqueId_1], args_1, true), void 0, function (domainId, enabled, id, name, passwordExpiresAt, protocolId, uniqueId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (domainId !== undefined) {
                                localVarQueryParameter['domain_id'] = domainId;
                            }
                            if (enabled !== undefined) {
                                localVarQueryParameter['enabled'] = enabled;
                            }
                            if (id !== undefined) {
                                localVarQueryParameter['id'] = id;
                            }
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            if (passwordExpiresAt !== undefined) {
                                localVarQueryParameter['password_expires_at'] = (passwordExpiresAt instanceof Date) ?
                                    passwordExpiresAt.toISOString() :
                                    passwordExpiresAt;
                            }
                            if (protocolId !== undefined) {
                                localVarQueryParameter['protocol_id'] = protocolId;
                            }
                            if (uniqueId !== undefined) {
                                localVarQueryParameter['unique_id'] = uniqueId;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create a user.  POST /v3/users
         * @param {UsersPostRequest} [usersPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: function (usersPostRequest_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([usersPostRequest_1], args_1, true), void 0, function (usersPostRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/users";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete access rule resource.  DELETE /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdDelete: function (userId_1, accessRuleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessRuleId_1], args_1, true), void 0, function (userId, accessRuleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdAccessRulesAccessRuleIdDelete', 'userId', userId);
                            // verify required parameter 'accessRuleId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdAccessRulesAccessRuleIdDelete', 'accessRuleId', accessRuleId);
                            localVarPath = "/v3/users/{user_id}/access_rules/{access_rule_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_rule_id", "}"), encodeURIComponent(String(accessRuleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdGet: function (userId_1, accessRuleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessRuleId_1], args_1, true), void 0, function (userId, accessRuleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdAccessRulesAccessRuleIdGet', 'userId', userId);
                            // verify required parameter 'accessRuleId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdAccessRulesAccessRuleIdGet', 'accessRuleId', accessRuleId);
                            localVarPath = "/v3/users/{user_id}/access_rules/{access_rule_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_rule_id", "}"), encodeURIComponent(String(accessRuleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdHead: function (userId_1, accessRuleId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessRuleId_1], args_1, true), void 0, function (userId, accessRuleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdAccessRulesAccessRuleIdHead', 'userId', userId);
                            // verify required parameter 'accessRuleId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdAccessRulesAccessRuleIdHead', 'accessRuleId', accessRuleId);
                            localVarPath = "/v3/users/{user_id}/access_rules/{access_rule_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_rule_id", "}"), encodeURIComponent(String(accessRuleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesGet: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdAccessRulesGet', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/access_rules"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesHead: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdAccessRulesHead', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/access_rules"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete application credential resource.  DELETE /v3/users/{user_id}/application_credentials/        {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdDelete: function (userId_1, applicationCredentialId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, applicationCredentialId_1], args_1, true), void 0, function (userId, applicationCredentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdApplicationCredentialsApplicationCredentialIdDelete', 'userId', userId);
                            // verify required parameter 'applicationCredentialId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdApplicationCredentialsApplicationCredentialIdDelete', 'applicationCredentialId', applicationCredentialId);
                            localVarPath = "/v3/users/{user_id}/application_credentials/{application_credential_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("application_credential_id", "}"), encodeURIComponent(String(applicationCredentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdGet: function (userId_1, applicationCredentialId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, applicationCredentialId_1], args_1, true), void 0, function (userId, applicationCredentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdApplicationCredentialsApplicationCredentialIdGet', 'userId', userId);
                            // verify required parameter 'applicationCredentialId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdApplicationCredentialsApplicationCredentialIdGet', 'applicationCredentialId', applicationCredentialId);
                            localVarPath = "/v3/users/{user_id}/application_credentials/{application_credential_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("application_credential_id", "}"), encodeURIComponent(String(applicationCredentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdHead: function (userId_1, applicationCredentialId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, applicationCredentialId_1], args_1, true), void 0, function (userId, applicationCredentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdApplicationCredentialsApplicationCredentialIdHead', 'userId', userId);
                            // verify required parameter 'applicationCredentialId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdApplicationCredentialsApplicationCredentialIdHead', 'applicationCredentialId', applicationCredentialId);
                            localVarPath = "/v3/users/{user_id}/application_credentials/{application_credential_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("application_credential_id", "}"), encodeURIComponent(String(applicationCredentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
         * @param {string} [name] The name of the application credential. Must be unique to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsGet: function (name_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([name_1], args_1, true), void 0, function (name, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3/users/{user_id}/application_credentials";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            if (name !== undefined) {
                                localVarQueryParameter['name'] = name;
                            }
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsHead: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdApplicationCredentialsHead', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/application_credentials"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create application credential.  POST /v3/users/{user_id}/application_credentials
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {UsersApplicationCredentialsPostRequest} [usersApplicationCredentialsPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsPost: function (userId_1, usersApplicationCredentialsPostRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, usersApplicationCredentialsPostRequest_1], args_1, true), void 0, function (userId, usersApplicationCredentialsPostRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdApplicationCredentialsPost', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/application_credentials"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersApplicationCredentialsPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a specific EC2 credential.  DELETE /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdDelete: function (userId_1, credentialId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, credentialId_1], args_1, true), void 0, function (userId, credentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2CredentialIdDelete', 'userId', userId);
                            // verify required parameter 'credentialId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2CredentialIdDelete', 'credentialId', credentialId);
                            localVarPath = "/v3/users/{user_id}/credentials/OS-EC2/{credential_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("credential_id", "}"), encodeURIComponent(String(credentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdGet: function (userId_1, credentialId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, credentialId_1], args_1, true), void 0, function (userId, credentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2CredentialIdGet', 'userId', userId);
                            // verify required parameter 'credentialId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2CredentialIdGet', 'credentialId', credentialId);
                            localVarPath = "/v3/users/{user_id}/credentials/OS-EC2/{credential_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("credential_id", "}"), encodeURIComponent(String(credentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdHead: function (userId_1, credentialId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, credentialId_1], args_1, true), void 0, function (userId, credentialId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2CredentialIdHead', 'userId', userId);
                            // verify required parameter 'credentialId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2CredentialIdHead', 'credentialId', credentialId);
                            localVarPath = "/v3/users/{user_id}/credentials/OS-EC2/{credential_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("credential_id", "}"), encodeURIComponent(String(credentialId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Get: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2Get', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/credentials/OS-EC2"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Head: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2Head', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/credentials/OS-EC2"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Create EC2 Credential for user.  POST /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Post: function (userId_1, body_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, body_1], args_1, true), void 0, function (userId, body, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdCredentialsOSEC2Post', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/credentials/OS-EC2"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete a user.  DELETE /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdDelete', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdGet', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
         * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsGet: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdGroupsGet', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/groups"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
         * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsHead: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdGroupsHead', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/groups"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdHead: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdHead', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Delete specific access token.  DELETE /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete: function (userId_1, accessTokenId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessTokenId_1], args_1, true), void 0, function (userId, accessTokenId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete', 'userId', userId);
                            // verify required parameter 'accessTokenId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete', 'accessTokenId', accessTokenId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_token_id", "}"), encodeURIComponent(String(accessTokenId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet: function (userId_1, accessTokenId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessTokenId_1], args_1, true), void 0, function (userId, accessTokenId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet', 'userId', userId);
                            // verify required parameter 'accessTokenId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet', 'accessTokenId', accessTokenId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_token_id", "}"), encodeURIComponent(String(accessTokenId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead: function (userId_1, accessTokenId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessTokenId_1], args_1, true), void 0, function (userId, accessTokenId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead', 'userId', userId);
                            // verify required parameter 'accessTokenId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead', 'accessTokenId', accessTokenId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_token_id", "}"), encodeURIComponent(String(accessTokenId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet: function (userId_1, accessTokenId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessTokenId_1], args_1, true), void 0, function (userId, accessTokenId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet', 'userId', userId);
                            // verify required parameter 'accessTokenId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet', 'accessTokenId', accessTokenId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_token_id", "}"), encodeURIComponent(String(accessTokenId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead: function (userId_1, accessTokenId_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessTokenId_1], args_1, true), void 0, function (userId, accessTokenId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead', 'userId', userId);
                            // verify required parameter 'accessTokenId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead', 'accessTokenId', accessTokenId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_token_id", "}"), encodeURIComponent(String(accessTokenId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet: function (userId_1, accessTokenId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessTokenId_1, roleId_1], args_1, true), void 0, function (userId, accessTokenId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet', 'userId', userId);
                            // verify required parameter 'accessTokenId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet', 'accessTokenId', accessTokenId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet', 'roleId', roleId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_token_id", "}"), encodeURIComponent(String(accessTokenId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead: function (userId_1, accessTokenId_1, roleId_1) {
            var args_1 = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                args_1[_i - 3] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, accessTokenId_1, roleId_1], args_1, true), void 0, function (userId, accessTokenId, roleId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead', 'userId', userId);
                            // verify required parameter 'accessTokenId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead', 'accessTokenId', accessTokenId);
                            // verify required parameter 'roleId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead', 'roleId', roleId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)))
                                .replace("{".concat("access_token_id", "}"), encodeURIComponent(String(accessTokenId)))
                                .replace("{".concat("role_id", "}"), encodeURIComponent(String(roleId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensGet: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensGet', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensHead: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdOSOAUTH1AccessTokensHead', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/OS-OAUTH1/access_tokens"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/users/{user_id}/password
         * @param {string} userId user_id parameter for /v3/users/{user_id}/password API
         * @param {UsersPasswordPostRequest} [usersPasswordPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPasswordPost: function (userId_1, usersPasswordPostRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, usersPasswordPostRequest_1], args_1, true), void 0, function (userId, usersPasswordPostRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdPasswordPost', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/password"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(usersPasswordPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * Update a user.  PATCH /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {UserPatchRequest} [userPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPatch: function (userId_1, userPatchRequest_1) {
            var args_1 = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args_1[_i - 2] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1, userPatchRequest_1], args_1, true), void 0, function (userId, userPatchRequest, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdPatch', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userPatchRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/users/{user_id}/projects
         * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdProjectsGet: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdProjectsGet', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/projects"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/users/{user_id}/projects
         * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdProjectsHead: function (userId_1) {
            var args_1 = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args_1[_i - 1] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([userId_1], args_1, true), void 0, function (userId, options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userId' is not null or undefined
                            (0, common_1.assertParamExists)('usersUserIdProjectsHead', 'userId', userId);
                            localVarPath = "/v3/users/{user_id}/projects"
                                .replace("{".concat("user_id", "}"), encodeURIComponent(String(userId)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator;
/**
 * UsersApi - functional programming interface
 * @export
 */
var UsersApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
         * @param {string} [id] Filter for Identity Providers’ ID attribute
         * @param {string} [name] Filters the response by a resource name.
         * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
         * @param {string} [protocolId] Filters the response by a protocol ID.
         * @param {string} [uniqueId] Filters the response by a unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: function (domainId, enabled, id, name, passwordExpiresAt, protocolId, uniqueId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersGet(domainId, enabled, id, name, passwordExpiresAt, protocolId, uniqueId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create a user.  POST /v3/users
         * @param {UsersPostRequest} [usersPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: function (usersPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersPost(usersPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete access rule resource.  DELETE /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdDelete: function (userId, accessRuleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdAccessRulesAccessRuleIdDelete(userId, accessRuleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdAccessRulesAccessRuleIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdGet: function (userId, accessRuleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdAccessRulesAccessRuleIdGet(userId, accessRuleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdAccessRulesAccessRuleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdHead: function (userId, accessRuleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdAccessRulesAccessRuleIdHead(userId, accessRuleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdAccessRulesAccessRuleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesGet: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdAccessRulesGet(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdAccessRulesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesHead: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdAccessRulesHead(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdAccessRulesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete application credential resource.  DELETE /v3/users/{user_id}/application_credentials/        {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdDelete: function (userId, applicationCredentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdApplicationCredentialsApplicationCredentialIdDelete(userId, applicationCredentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdApplicationCredentialsApplicationCredentialIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdGet: function (userId, applicationCredentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdApplicationCredentialsApplicationCredentialIdGet(userId, applicationCredentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdApplicationCredentialsApplicationCredentialIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdHead: function (userId, applicationCredentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdApplicationCredentialsApplicationCredentialIdHead(userId, applicationCredentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdApplicationCredentialsApplicationCredentialIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
         * @param {string} [name] The name of the application credential. Must be unique to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsGet: function (name, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdApplicationCredentialsGet(name, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdApplicationCredentialsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsHead: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdApplicationCredentialsHead(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdApplicationCredentialsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create application credential.  POST /v3/users/{user_id}/application_credentials
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {UsersApplicationCredentialsPostRequest} [usersApplicationCredentialsPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsPost: function (userId, usersApplicationCredentialsPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdApplicationCredentialsPost(userId, usersApplicationCredentialsPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdApplicationCredentialsPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a specific EC2 credential.  DELETE /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdDelete: function (userId, credentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdCredentialsOSEC2CredentialIdDelete(userId, credentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdCredentialsOSEC2CredentialIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdGet: function (userId, credentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdCredentialsOSEC2CredentialIdGet(userId, credentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdCredentialsOSEC2CredentialIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdHead: function (userId, credentialId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdCredentialsOSEC2CredentialIdHead(userId, credentialId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdCredentialsOSEC2CredentialIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Get: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdCredentialsOSEC2Get(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdCredentialsOSEC2Get']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Head: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdCredentialsOSEC2Head(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdCredentialsOSEC2Head']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Create EC2 Credential for user.  POST /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Post: function (userId, body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdCredentialsOSEC2Post(userId, body, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdCredentialsOSEC2Post']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete a user.  DELETE /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdDelete(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdGet(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
         * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsGet: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdGroupsGet(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdGroupsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
         * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsHead: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdGroupsHead(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdGroupsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdHead: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdHead(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Delete specific access token.  DELETE /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete: function (userId, accessTokenId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete(userId, accessTokenId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet: function (userId, accessTokenId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet(userId, accessTokenId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead: function (userId, accessTokenId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead(userId, accessTokenId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet: function (userId, accessTokenId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet(userId, accessTokenId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead: function (userId, accessTokenId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead(userId, accessTokenId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet: function (userId, accessTokenId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet(userId, accessTokenId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead: function (userId, accessTokenId, roleId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead(userId, accessTokenId, roleId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensGet: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensGet(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensHead: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdOSOAUTH1AccessTokensHead(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdOSOAUTH1AccessTokensHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * POST operation on /v3/users/{user_id}/password
         * @param {string} userId user_id parameter for /v3/users/{user_id}/password API
         * @param {UsersPasswordPostRequest} [usersPasswordPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPasswordPost: function (userId, usersPasswordPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdPasswordPost(userId, usersPasswordPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdPasswordPost']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * Update a user.  PATCH /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {UserPatchRequest} [userPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPatch: function (userId, userPatchRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdPatch(userId, userPatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdPatch']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * GET operation on /v3/users/{user_id}/projects
         * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdProjectsGet: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdProjectsGet(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdProjectsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3/users/{user_id}/projects
         * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdProjectsHead: function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.usersUserIdProjectsHead(userId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['UsersApi.usersUserIdProjectsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.UsersApiFp = UsersApiFp;
/**
 * UsersApi - factory interface
 * @export
 */
var UsersApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UsersApiFp)(configuration);
    return {
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} [domainId] Filters the response by a domain ID.
         * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
         * @param {string} [id] Filter for Identity Providers’ ID attribute
         * @param {string} [name] Filters the response by a resource name.
         * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
         * @param {string} [protocolId] Filters the response by a protocol ID.
         * @param {string} [uniqueId] Filters the response by a unique ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: function (domainId, enabled, id, name, passwordExpiresAt, protocolId, uniqueId, options) {
            return localVarFp.usersGet(domainId, enabled, id, name, passwordExpiresAt, protocolId, uniqueId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersHead: function (options) {
            return localVarFp.usersHead(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create a user.  POST /v3/users
         * @param {UsersPostRequest} [usersPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPost: function (usersPostRequest, options) {
            return localVarFp.usersPost(usersPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete access rule resource.  DELETE /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdDelete: function (userId, accessRuleId, options) {
            return localVarFp.usersUserIdAccessRulesAccessRuleIdDelete(userId, accessRuleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdGet: function (userId, accessRuleId, options) {
            return localVarFp.usersUserIdAccessRulesAccessRuleIdGet(userId, accessRuleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesAccessRuleIdHead: function (userId, accessRuleId, options) {
            return localVarFp.usersUserIdAccessRulesAccessRuleIdHead(userId, accessRuleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesGet: function (userId, options) {
            return localVarFp.usersUserIdAccessRulesGet(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
         * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdAccessRulesHead: function (userId, options) {
            return localVarFp.usersUserIdAccessRulesHead(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete application credential resource.  DELETE /v3/users/{user_id}/application_credentials/        {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdDelete: function (userId, applicationCredentialId, options) {
            return localVarFp.usersUserIdApplicationCredentialsApplicationCredentialIdDelete(userId, applicationCredentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdGet: function (userId, applicationCredentialId, options) {
            return localVarFp.usersUserIdApplicationCredentialsApplicationCredentialIdGet(userId, applicationCredentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsApplicationCredentialIdHead: function (userId, applicationCredentialId, options) {
            return localVarFp.usersUserIdApplicationCredentialsApplicationCredentialIdHead(userId, applicationCredentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
         * @param {string} [name] The name of the application credential. Must be unique to a user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsGet: function (name, options) {
            return localVarFp.usersUserIdApplicationCredentialsGet(name, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsHead: function (userId, options) {
            return localVarFp.usersUserIdApplicationCredentialsHead(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create application credential.  POST /v3/users/{user_id}/application_credentials
         * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
         * @param {UsersApplicationCredentialsPostRequest} [usersApplicationCredentialsPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdApplicationCredentialsPost: function (userId, usersApplicationCredentialsPostRequest, options) {
            return localVarFp.usersUserIdApplicationCredentialsPost(userId, usersApplicationCredentialsPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a specific EC2 credential.  DELETE /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdDelete: function (userId, credentialId, options) {
            return localVarFp.usersUserIdCredentialsOSEC2CredentialIdDelete(userId, credentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdGet: function (userId, credentialId, options) {
            return localVarFp.usersUserIdCredentialsOSEC2CredentialIdGet(userId, credentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2CredentialIdHead: function (userId, credentialId, options) {
            return localVarFp.usersUserIdCredentialsOSEC2CredentialIdHead(userId, credentialId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Get: function (userId, options) {
            return localVarFp.usersUserIdCredentialsOSEC2Get(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Head: function (userId, options) {
            return localVarFp.usersUserIdCredentialsOSEC2Head(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Create EC2 Credential for user.  POST /v3/users/{user_id}/credentials/OS-EC2
         * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdCredentialsOSEC2Post: function (userId, body, options) {
            return localVarFp.usersUserIdCredentialsOSEC2Post(userId, body, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete a user.  DELETE /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdDelete: function (userId, options) {
            return localVarFp.usersUserIdDelete(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet: function (userId, options) {
            return localVarFp.usersUserIdGet(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
         * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsGet: function (userId, options) {
            return localVarFp.usersUserIdGroupsGet(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
         * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGroupsHead: function (userId, options) {
            return localVarFp.usersUserIdGroupsHead(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdHead: function (userId, options) {
            return localVarFp.usersUserIdHead(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Delete specific access token.  DELETE /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete: function (userId, accessTokenId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete(userId, accessTokenId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet: function (userId, accessTokenId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet(userId, accessTokenId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead: function (userId, accessTokenId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead(userId, accessTokenId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet: function (userId, accessTokenId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet(userId, accessTokenId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead: function (userId, accessTokenId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead(userId, accessTokenId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet: function (userId, accessTokenId, roleId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet(userId, accessTokenId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead: function (userId, accessTokenId, roleId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead(userId, accessTokenId, roleId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensGet: function (userId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensGet(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
         * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdOSOAUTH1AccessTokensHead: function (userId, options) {
            return localVarFp.usersUserIdOSOAUTH1AccessTokensHead(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * POST operation on /v3/users/{user_id}/password
         * @param {string} userId user_id parameter for /v3/users/{user_id}/password API
         * @param {UsersPasswordPostRequest} [usersPasswordPostRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPasswordPost: function (userId, usersPasswordPostRequest, options) {
            return localVarFp.usersUserIdPasswordPost(userId, usersPasswordPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Update a user.  PATCH /v3/users/{user_id}
         * @param {string} userId user_id parameter for /v3/users/{user_id} API
         * @param {UserPatchRequest} [userPatchRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPatch: function (userId, userPatchRequest, options) {
            return localVarFp.usersUserIdPatch(userId, userPatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * GET operation on /v3/users/{user_id}/projects
         * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdProjectsGet: function (userId, options) {
            return localVarFp.usersUserIdProjectsGet(userId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3/users/{user_id}/projects
         * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdProjectsHead: function (userId, options) {
            return localVarFp.usersUserIdProjectsHead(userId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UsersApiFactory = UsersApiFactory;
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
var UsersApi = /** @class */ (function (_super) {
    __extends(UsersApi, _super);
    function UsersApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} [domainId] Filters the response by a domain ID.
     * @param {boolean} [enabled] If set to true, then only enabled projects will be returned. Any value other than 0 (including no value) will be interpreted as true.
     * @param {string} [id] Filter for Identity Providers’ ID attribute
     * @param {string} [name] Filters the response by a resource name.
     * @param {string} [passwordExpiresAt] Filter results based on which user passwords have expired. The query should include an operator and a timestamp with a colon (:) separating the two, for example: &#x60;password_expires_at&#x3D;{operator}:{timestamp}&#x60;. Valid operators are: &#x60;lt&#x60;, &#x60;lte&#x60;, &#x60;gt&#x60;, &#x60;gte&#x60;, &#x60;eq&#x60;, and &#x60;neq&#x60;. Valid timestamps are of the form: YYYY-MM-DDTHH:mm:ssZ.
     * @param {string} [protocolId] Filters the response by a protocol ID.
     * @param {string} [uniqueId] Filters the response by a unique ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersGet = function (domainId, enabled, id, name, passwordExpiresAt, protocolId, uniqueId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersGet(domainId, enabled, id, name, passwordExpiresAt, protocolId, uniqueId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersHead = function (options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create a user.  POST /v3/users
     * @param {UsersPostRequest} [usersPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersPost = function (usersPostRequest, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersPost(usersPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete access rule resource.  DELETE /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdAccessRulesAccessRuleIdDelete = function (userId, accessRuleId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdAccessRulesAccessRuleIdDelete(userId, accessRuleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdAccessRulesAccessRuleIdGet = function (userId, accessRuleId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdAccessRulesAccessRuleIdGet(userId, accessRuleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get access rule resource.  GET/HEAD /v3/users/{user_id}/access_rules/{access_rule_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {string} accessRuleId access_rule_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdAccessRulesAccessRuleIdHead = function (userId, accessRuleId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdAccessRulesAccessRuleIdHead(userId, accessRuleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdAccessRulesGet = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdAccessRulesGet(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List access rules for user.  GET/HEAD /v3/users/{user_id}/access_rules
     * @param {string} userId user_id parameter for /v3/users/{user_id}/access_rules/{access_rule_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdAccessRulesHead = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdAccessRulesHead(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete application credential resource.  DELETE /v3/users/{user_id}/application_credentials/        {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdApplicationCredentialsApplicationCredentialIdDelete = function (userId, applicationCredentialId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdApplicationCredentialsApplicationCredentialIdDelete(userId, applicationCredentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdApplicationCredentialsApplicationCredentialIdGet = function (userId, applicationCredentialId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdApplicationCredentialsApplicationCredentialIdGet(userId, applicationCredentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get application credential resource.  GET/HEAD /v3/users/{user_id}/application_credentials/          {application_credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {string} applicationCredentialId application_credential_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdApplicationCredentialsApplicationCredentialIdHead = function (userId, applicationCredentialId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdApplicationCredentialsApplicationCredentialIdHead(userId, applicationCredentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} [name] The name of the application credential. Must be unique to a user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdApplicationCredentialsGet = function (name, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdApplicationCredentialsGet(name, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List application credentials for user.  GET/HEAD /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdApplicationCredentialsHead = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdApplicationCredentialsHead(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create application credential.  POST /v3/users/{user_id}/application_credentials
     * @param {string} userId user_id parameter for /v3/users/{user_id}/application_credentials/{application_credential_id} API
     * @param {UsersApplicationCredentialsPostRequest} [usersApplicationCredentialsPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdApplicationCredentialsPost = function (userId, usersApplicationCredentialsPostRequest, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdApplicationCredentialsPost(userId, usersApplicationCredentialsPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a specific EC2 credential.  DELETE /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdCredentialsOSEC2CredentialIdDelete = function (userId, credentialId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdCredentialsOSEC2CredentialIdDelete(userId, credentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdCredentialsOSEC2CredentialIdGet = function (userId, credentialId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdCredentialsOSEC2CredentialIdGet(userId, credentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a specific EC2 credential.  GET/HEAD /users/{user_id}/credentials/OS-EC2/{credential_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {string} credentialId credential_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdCredentialsOSEC2CredentialIdHead = function (userId, credentialId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdCredentialsOSEC2CredentialIdHead(userId, credentialId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdCredentialsOSEC2Get = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdCredentialsOSEC2Get(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List EC2 Credentials for user.  GET/HEAD /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdCredentialsOSEC2Head = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdCredentialsOSEC2Head(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Create EC2 Credential for user.  POST /v3/users/{user_id}/credentials/OS-EC2
     * @param {string} userId user_id parameter for /v3/users/{user_id}/credentials/OS-EC2/{credential_id} API
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdCredentialsOSEC2Post = function (userId, body, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdCredentialsOSEC2Post(userId, body, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete a user.  DELETE /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdDelete = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdDelete(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdGet = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdGet(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdGroupsGet = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdGroupsGet(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get groups for a user.  GET/HEAD /v3/users/{user_id}/groups
     * @param {string} userId user_id parameter for /v3/users/{user_id}/groups API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdGroupsHead = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdGroupsHead(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get a user resource or list users.  GET/HEAD /v3/users GET/HEAD /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdHead = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdHead(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Delete specific access token.  DELETE /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete = function (userId, accessTokenId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensAccessTokenIdDelete(userId, accessTokenId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet = function (userId, accessTokenId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensAccessTokenIdGet(userId, accessTokenId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get specific access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead = function (userId, accessTokenId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensAccessTokenIdHead(userId, accessTokenId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet = function (userId, accessTokenId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesGet(userId, accessTokenId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List roles for a user access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead = function (userId, accessTokenId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesHead(userId, accessTokenId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet = function (userId, accessTokenId, roleId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdGet(userId, accessTokenId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get role for access token.  GET/HEAD /v3/users/{user_id}/OS-OAUTH1/access_tokens/          {access_token_id}/roles/{role_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} accessTokenId access_token_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {string} roleId role_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id}/roles/{role_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead = function (userId, accessTokenId, roleId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensAccessTokenIdRolesRoleIdHead(userId, accessTokenId, roleId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensGet = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensGet(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List OAuth1 Access Tokens for user.  GET /v3/users/{user_id}/OS-OAUTH1/access_tokens
     * @param {string} userId user_id parameter for /v3/users/{user_id}/OS-OAUTH1/access_tokens/{access_token_id} API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdOSOAUTH1AccessTokensHead = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdOSOAUTH1AccessTokensHead(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * POST operation on /v3/users/{user_id}/password
     * @param {string} userId user_id parameter for /v3/users/{user_id}/password API
     * @param {UsersPasswordPostRequest} [usersPasswordPostRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdPasswordPost = function (userId, usersPasswordPostRequest, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdPasswordPost(userId, usersPasswordPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Update a user.  PATCH /v3/users/{user_id}
     * @param {string} userId user_id parameter for /v3/users/{user_id} API
     * @param {UserPatchRequest} [userPatchRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdPatch = function (userId, userPatchRequest, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdPatch(userId, userPatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * GET operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdProjectsGet = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdProjectsGet(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3/users/{user_id}/projects
     * @param {string} userId user_id parameter for /v3/users/{user_id}/projects API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    UsersApi.prototype.usersUserIdProjectsHead = function (userId, options) {
        var _this = this;
        return (0, exports.UsersApiFp)(this.configuration).usersUserIdProjectsHead(userId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UsersApi;
}(base_1.BaseAPI));
exports.UsersApi = UsersApi;
/**
 * V3Api - axios parameter creator
 * @export
 */
var V3ApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /v3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/v3";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.V3ApiAxiosParamCreator = V3ApiAxiosParamCreator;
/**
 * V3Api - functional programming interface
 * @export
 */
var V3ApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.V3ApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /v3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.versionGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['V3Api.versionGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /v3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.versionHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['V3Api.versionHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.V3ApiFp = V3ApiFp;
/**
 * V3Api - factory interface
 * @export
 */
var V3ApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.V3ApiFp)(configuration);
    return {
        /**
         * GET operation on /v3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionGet: function (options) {
            return localVarFp.versionGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /v3
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionHead: function (options) {
            return localVarFp.versionHead(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.V3ApiFactory = V3ApiFactory;
/**
 * V3Api - object-oriented interface
 * @export
 * @class V3Api
 * @extends {BaseAPI}
 */
var V3Api = /** @class */ (function (_super) {
    __extends(V3Api, _super);
    function V3Api() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V3Api
     */
    V3Api.prototype.versionGet = function (options) {
        var _this = this;
        return (0, exports.V3ApiFp)(this.configuration).versionGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /v3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V3Api
     */
    V3Api.prototype.versionHead = function (options) {
        var _this = this;
        return (0, exports.V3ApiFp)(this.configuration).versionHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return V3Api;
}(base_1.BaseAPI));
exports.V3Api = V3Api;
/**
 * VersionApi - axios parameter creator
 * @export
 */
var VersionApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * GET operation on /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionsGet: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionsHead: function () {
            var args_1 = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args_1[_i] = arguments[_i];
            }
            return __awaiter(_this, __spreadArray([], args_1, true), void 0, function (options) {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                if (options === void 0) { options = {}; }
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'HEAD' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-Auth-Token", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.VersionApiAxiosParamCreator = VersionApiAxiosParamCreator;
/**
 * VersionApi - functional programming interface
 * @export
 */
var VersionApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.VersionApiAxiosParamCreator)(configuration);
    return {
        /**
         * GET operation on /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionsGet: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.versionsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['VersionApi.versionsGet']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         * HEAD operation on /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionsHead: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, index, operationBasePath;
                var _a, _b, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.versionsHead(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            index = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            operationBasePath = (_c = (_b = base_1.operationServerMap['VersionApi.versionsHead']) === null || _b === void 0 ? void 0 : _b[index]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, operationBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
exports.VersionApiFp = VersionApiFp;
/**
 * VersionApi - factory interface
 * @export
 */
var VersionApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.VersionApiFp)(configuration);
    return {
        /**
         * GET operation on /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionsGet: function (options) {
            return localVarFp.versionsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * HEAD operation on /
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        versionsHead: function (options) {
            return localVarFp.versionsHead(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.VersionApiFactory = VersionApiFactory;
/**
 * VersionApi - object-oriented interface
 * @export
 * @class VersionApi
 * @extends {BaseAPI}
 */
var VersionApi = /** @class */ (function (_super) {
    __extends(VersionApi, _super);
    function VersionApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * GET operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    VersionApi.prototype.versionsGet = function (options) {
        var _this = this;
        return (0, exports.VersionApiFp)(this.configuration).versionsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * HEAD operation on /
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VersionApi
     */
    VersionApi.prototype.versionsHead = function (options) {
        var _this = this;
        return (0, exports.VersionApiFp)(this.configuration).versionsHead(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return VersionApi;
}(base_1.BaseAPI));
exports.VersionApi = VersionApi;
